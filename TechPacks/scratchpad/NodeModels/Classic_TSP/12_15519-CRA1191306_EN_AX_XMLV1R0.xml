<?xml version="1.0" encoding="UTF-8"?><!-- -*- mode: XML; sgml-indent-data: t; sgml-indent-step: 4; xsl-element-indent-step: 4; -*- -->
<!-- ===============================================================================================
# Copyright notice: Â© Ericsson AB 2018
#
# The document format defined by the IMS MIM 2.0 format specified in:
#  * 17/1550-HSC 113 06 Uen E.
#  * 2/1013-HSC 113 05 Uen E1.
#  * 3/192 05-LXA 119 1369 Uen B.
#  * 1/192 05-FEA 202 8501 Uen D.
#  * 3/192 05-FEA 202 8501 Uen D.
#  * 4/192 05-FEA 202 8501 Uen A.
# And the LDAP extensions specified in:
#  * 2/192 05-FEA 202 8501 Uen B.
# And the Revision History extensions specified in:
#  * 5/192 05-LXA 119 1369 Uen PA1.
# And the CSCF extensions specified in:
#  * 1/1550-LXA 119 1369 Uen A.
#  * 1/192 05-LXA 119 1369 Uen Rev A.
#  * 3/192 05-LXA 119 1369 Uen Rev B.
=============================================================================================== -->
<!--
# ======================================================================================================
# Revision History: See end of document.
======================================================================================================
-->
<!--
# Note: Please, remember to also update the pmMimMetadata and revison history at the end of the document.
-->
<PM id="12/155 19-CRA 119 1306 Uen AX" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="com:ericsson:ims:mim" xmlns:rh="com:ericsson:ims:mim:ext:rhistory:R1">
    <description>This document defines the performance counters of CSCF.</description>

    <!-- The Capabilities section is global, that is it is unrelated to the CSCF application -->
    <Capabilities>
        <!-- This section only applicable if the Network Elements (NE) -->
        <!-- configuration is managed by a Ericsson OSS-RC support system. -->
        <!-- For all other network configurations this sections should be disregarded. -->
        <!-- Specifically this section is specifies _inital_ configuration data -->
        <!-- that the NE initialized with when it is added in the OSS-RC node. -->

        <!-- Please notice that these parameters are global for the whole NE -->
        <!-- and therefore must be the same in all PM MIM files on the NE. -->
        <!-- However this the section is optional, so to avoid conflicts it -->
        <!-- should not be present in application MIMs. -->

        <!--  Definition on mechanisms towards the OSS. -->
        <!--  alignedReportingPeriod: Declares if this NE will align its reporting periods with real time. -->
        <!--  Possible Values: true or false -->
        <alignedReportingPeriod>true</alignedReportingPeriod>
        <!-- JobPersistence: This attribute will specify if the node can support persistence of jobs.  -->
        <!-- Persistence of jobs means that jobs will survive a node restart. -->
        <!-- Possible Values: NONE or  RESTART or UPGRADE -->
        <!--      'NONE' meaning they don't, -->
        <!--      'RESTART' means they will survive a normal node restart and remain in the exact same state as before, and -->
        <!--      'UPGRADE' meaning that this is also true after a SW upgrade of the node." -->
        <JobPersistence>RESTART</JobPersistence>
        <!-- FileRetention: The length of time the result files will be retained on the node is statically declared using this attribute.
             The length of time is specified in minutes -->
        <FileRetention>3600</FileRetention>
        <!-- FileCompression: The result files will (or will not) be compression.
             Possible Values: true or false -->
        <FileCompression>true</FileCompression>
        <CounterCapabilities>
            <!-- OutputFormat: The result files will have an output format as specified here
                 Possible Values: 3GPP_XML, or 3GPP_ASN.1       -->
            <OutputFormat>3GPP_XML</OutputFormat>
            <!-- OutputVersion: The 3GPP version of the result output file is specified here
                 Example of Values: 32.104 V3.5.0 used by TSP oPMF, or 32.435 V7.20 supported by TSP nPMF       -->
            <OutputVersion>32.104 V3.5.0</OutputVersion>
            <!-- FileDeliveryProtocol: The file delivery protocol specific for the node.
                 The collection of the result files will be performed using this protocol.
                 Possible Values: SFTP or FTP  -->
            <FileDeliveryProtocol>SFTP</FileDeliveryProtocol>
            <!-- FileDeliveryMethod: This is the file delivery method specific for the node.
                 The result files can either be pushed to be OSS, that is, the node will FTP or SFTP  (determined by the capability FileDeliveryProtocol)
                 the files to be predefined location on the OSS (determined by the capability  DeliveryTarget)
                 Or the result files can be pulled by the OSS, that is, the OSS will FTP or SFTP (determined by the capability FileDeliveryProtocol)
                 the files from a predefined location on the node (determined by the capability  DeliveryTarget)
                 Possible Values: PUSH or PULL -->
            <FileDeliveryMethod>PUSH</FileDeliveryMethod>
            <!-- DeliveryTarget This is the location where the result files will be stored.
                 If PULL Method is used for the FileDeliveryMethod capability this location is the location on the node.
                 if PUSH Method is used for the FileDeliveryMethod capability this location is the location on the OSS. -->
            <DeliveryTarget>/opt/axe/reporterLogs</DeliveryTarget>
            <!-- GranularityPeriod:This is a counter capability of the node.
                 This specifies the period between two successive measurements.
                 The default value for this attribute is 15 minutes and is an optional attribute that can be changed per job.
                 The possible values are 5 minutes, 15 minutes, 30 minutes, 1 Hr, 2 Hrs and 24hrs
                 Possible Values: 5, 15, 30, 60, 120, 3600      -->
            <GranularityPeriod>15</GranularityPeriod>
            <!-- reportingPeriod:his is a counter capability of the node.
                 This specifies the period between two successive measurement result files.
                 Reporting period must be equal or greater than the granularity period.
                 The default value for this attribute is 15 minutes and is an optional attribute that can be changed per job.
                 The possible values are 5 minutes, 15 minutes, 30 minutes, 1 Hr, 2 Hrs and 24hrs
                 Possible Values: 5, 15, 30, 60, 120, 3600      -->
            <ReportingPeriod>15</ReportingPeriod>
        </CounterCapabilities>
    </Capabilities>

    <data>

        <!-- ################################################################# -->
        <!-- #                     New nPMF counters                         # -->
        <!-- ################################################################# -->

        <moc name="Cscf">
            <description>
                The default Cscf xml file location is /opt/telorb/axe/tsp/NM/PMF/reporterLogs/Cscf
                and the Cscf counter group is Cscf as used in the xml file name.
            </description>
            <switchingTechnology>
                Packet Switched
            </switchingTechnology>
            <imsPmConfig>
                <nPMFConfig>
                    <pmApplication>
                        <reportingRootDirectory>/opt/telorb/axe/tsp/NM/PMF/reporterLogs</reportingRootDirectory>
                        <enable>true</enable>
                        <maxMonitorNr/>
                        <measReaderNr/>
                        <timeZone>utc</timeZone>
                        <maxPmdbMemSize/>
                        <maxPmdbCpuLoad/>
                        <maxAlarmPerMeasType/>
                        <monitorGroup>
                            <name>Cscf</name>
                            <measurementJob>
                                <name>Cscf</name>
                                <enabled>true</enabled>
                                <priority>4</priority>
                                <granularityPeriod>300</granularityPeriod>
                                <notifyMOEvents>true</notifyMOEvents>
                                <reportingDirectory>Cscf</reportingDirectory>
                                <notifyFileReady>false</notifyFileReady>
                                <reportingFormat>DTD</reportingFormat>
                                <measurementJobReader>
                                    <name>cscfAcceptedRegistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfAcceptedReregistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfAcceptedDeregistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRejectedRegistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRejectedReregistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRejectedDeregistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfExpiredRegistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfPeakConcurrentRegistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfConcurrentRegistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfServiceInvokations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfExpiredSessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfFailedSessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSuccessfulSessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfPeakConcurrentSessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfConcurrentSessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfScscfAssignments</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPutSents</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPutSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPutPublicIdUnknowns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPutUnableToComplys</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPutAlreadyRegistereds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPutAvpUnsupporteds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPullSents</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPutIdentitiesDontMatch</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPullSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPullPublicIdUnknowns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPullUnableToComplys</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPullAvpUnsupporteds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxPullIdentitiesDontMatch</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxCongestions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullSents</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullRegistereds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullInitRegistrations</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullPublicIdUnknowns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullUnableToComplys</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullRoamNotAlloweds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullAuthRejecteds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullAvpUnsupporteds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxSelPullIdentitiesDontMatch</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxLocQuerySents</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxLocQuerySuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxLocQueryNotRegistereds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxLocQueryPublicIdUnknowns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxLocQueryUnableToComplys</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxLocQueryAvpUnsupporteds</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxLocQueryUnregisteredServices</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxUpdateDataRequestReceived</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxUpdateDataAnswersSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxUpdateDataAnswersErrUserUnknown</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxUpdateDataAnswersNotSupportedUserData</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxUpdateDataAnswersErrInvalidAVPValue</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxUpdateDataAnswersErrUnableToComply</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxDeregisterRequestReceived</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxDeregisterAnswersSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxDeregisterAnswersErrUserUnknown</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxDeregisterAnswersAvpUnsupported</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxDeregisterAnswersErrInvalidAVPValue</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCxDeregisterAnswersErrUnableToComply</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfStatsCxUserAuthorizationRequestRedirections</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfStatsCxLocationUserRequestRedirections</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfStatsCxLocationInfoRequestRedirections</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfStatsCxMultimediaAuthRequestRedirections</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfStatsCxUnableToDecodeRequestRedirections</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfStatsCxIllegalCommandCodeRequestRedirections</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfStatsCxRedirectionLoopDetected</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfACR</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfACASuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfACABackup</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfACAProtocolErrors</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfACAPermanentFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfACARedirectIndication</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCurrentStoredRecords</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUnauthMsgSizes</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUserAgentRejections</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfActiveUsers</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfAuthenticatedTrustedGateway</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCR</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCASuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCAProtocolErrors</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCATransientFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCAPermanentFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCAEndUserServiceDenied</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCAUserUnknown</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCACreditLimitReached</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCCACreditNotApplicable</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfNpLdapAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfNpLdapPortedResults</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfNpLdapErrors</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfDuisLdapSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfDuisLdapFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxMediaAuthSessionEstAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxMediaAuthSessionModAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxMediaAuthSessionEstSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxMediaAuthSessionModSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxMediaAuthorizationFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxBearerAuthSessionEstAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxBearerAuthSessionModAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxBearerAuthSessionEstSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxBearerAuthSessionModSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxBearerAuthorizationFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRegistrationEventSubscriptionFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRegistrationEventSubscriptionSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRegistrationEventReSubscriptionFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRegistrationEventReSubscriptionSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRegistrationEventNotificationsSendFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRegistrationEventNotificationsSendSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTelBgcfOrigInvocationSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTelBgcfTermInvocationSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTelBgcfOrigInvocationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTelBgcfTermInvocationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSmpEarlyAuthorizationSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSmpConfirmedAuthorizationSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSmpEarlyAuthorizationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSmpConfirmedAuthorizationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSmpIdNotFound</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>CscfRxDiaAAR</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>CscfRxDiaAAA</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>CscfRxDiaNotRecAAA</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>CscfRxDiaSTR</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>CscfRxDiaSTA</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>CscfRxDiaASR</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>CscfRxDiaASA</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRxDiaInvalidAnswers</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfRxSipSessionContOnUnsuccAAA</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfRxSipSessionContOnTimeout</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                               <measurementJobReader>
                                    <name>pcscfRxSipSessionContOnDiaError</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfRxSipSessionContDelayedAAA</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfFailedEmergencySessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfExpiredEmergencySessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfSuccessfulEmergencySessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfEmergencyMethodNotAllowed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfShUDRSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfShUDRErrorResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfShUDRNoResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfShUDRExperimentalResults</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfMlHttpSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfMlHttpErrorResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfMlHttpNoResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfMlSoapErrorResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfLRFInternationalCalledNumber</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfLRFNationalCalledNumber</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfLRFErrorCalledNumber</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfLRFNoTelephoneNumber</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfFailedEmergencySessionForUnregisteredUser</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfFailedEmergencySessionForRegisteredUser</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSuccessfulEmergencySessionForUnregisteredUser</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSuccessfulEmergencySessionForRegisteredUser</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfExpiredEmergencySessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUnallocatedRoutingAttemptSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfFailureCauseCode</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfOrigASInvocationFailureSessionContinued</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTermASInvocationFailureSessionContinued</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfOrigASInvocationFailureSessionTerminated</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTermASInvocationFailureSessionTerminated</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCx3gppMAR</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCx3gppMAA</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfAuthAkaSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfAuthAkaFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRejectedUnprotectedMessages</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfPaniAssertionFailedDefaultUsed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfPaniAssertionFailedEmptyUsed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfDialogEventSubscriptionSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfDialogEventSubscriptionFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfDialogEventReSubscriptionSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfDialogEventReSubscriptionFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfDialogEventNotificationSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>ecscfDialogEventNotificationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfThrottledHssRequests</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>eatfSuccessfulInitialEmergencySessionEstablishment</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>eatfFailedInitialEmergencySessionEstablishment</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>eatfSuccessfulEmergencySessionAccessTransfer</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>eatfFailedEmergencySessionAccessTransfer</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>eatfSuccessfulEmergencySessionPsFallback</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>eatfFailedEmergencySessionPsFallback</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>eatfConcurrentSessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>eatfPeakConcurrentSessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                            </measurementJob>
                            <thresholdMonitor>
                                <name>CscfThresholdMonitor</name>
                                <enabled>true</enabled>
                                <granularityPeriod>300</granularityPeriod>
                                <ThresholdMonitorReader>
                                    <name>cscfACAProtocolErrors</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>1</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>7</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>CSCF Charging Answers Indicate Protocol Errors</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfACAProtocolErrors, possibly caused by configuration problem.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfACAPermanentFailure</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>1</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>8</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>CSCF Charging Answers Indicate Permanent Failures</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfACAPermanentFailure between the CSCF and the Charging System.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfCurrentStoredRecords</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>1</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>9</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>CSCF Charging Request Transmission Problem</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfCurrentStoredRecords, charging information sent to backup. Check connection to charging system.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfCCAProtocolErrors</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>1</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>14</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>CSCF Credit Control Answers Indicate Protocol Errors</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfCCAProtocolErrors, possibly caused by configuration problem.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfCCAPermanentFailures</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>1</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>12</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>CSCF Credit Control Answers Indicate Permanent Failures</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfCCAPermanentFailures. Check connection to charging system.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfCCAEndUserServiceDenied</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>1</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>11</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>CSCF Credit Control Answers Indicate End User Service Denied</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfCCAEndUserServiceDenied, the credit-control server denies the request due to service restrictions.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfSmpIdNotFound</name>
                                    <enabled>true</enabled>
                                    <minorLevel>
                                        <armLevel>1</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </minorLevel>
                                    <faultId>13</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>ProcessingError</type>
                                    <specificProblem>CSCF User Subscribed Media Profile Id Not Defined</specificProblem>
                                    <probableCause>307</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfSmpIdNotFound. There is no SMP Id defined. Add Subscribed Media Profile Id to the configuration database.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfMlHttpNoResponses</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>1</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>16</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>E-CSCF Receives No LRF Response</specificProblem>
                                    <probableCause>305</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfMlHttpNoResponses. Check connection to LRF. You may need to change value of EcscfHttpRequestTimer parameter.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfRejectedUnprotectedMessages</name>
                                    <enabled>true</enabled>
                                    <warningLevel>
                                        <armLevel>5</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </warningLevel>
                                    <faultId>20</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>P-CSCF Rejected Messages On Unprotected Server Port</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>cscfRejectedUnprotectedMessages. Too many RE-REGISTER or DE-REGISTER messages received from AKA authenticated UE on PCSCF unprotected server port.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfThrottledHssRequests</name>
                                    <enabled>true</enabled>
                                    <warningLevel>
                                        <armLevel>0</armLevel>
                                        <disarmLevel>0</disarmLevel>
                                    </warningLevel>
                                    <faultId>36</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>CSCF, Throttling of Diameter Traffic on Cx/Dx Interface Initiated</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf</alarmObjectClass>
                                    <additionalInfo>The PM counter cscfThrottledHssRequests is keyed with both SUM and individual HSS node/realm. Check whether overload has been detected on HSS indicated by the key.</additionalInfo>
                                </ThresholdMonitorReader>
                            </thresholdMonitor>
                        </monitorGroup>
                    </pmApplication>
                </nPMFConfig>
            </imsPmConfig>

            <group>
                <!-- ============================  -->
                <!-- counters without keys         -->
                <!-- ============================  -->
                <description/>
                <!--**FIXME**index sequence="1" name="Cscf" type="defaultRDNtype"/-->
                <!--**FIXME**index sequence="2" name="Source" type="systemRDNtype"/-->
                <!--**FIXME**index sequence="2" name="Source" type="processorRDNtype"/-->
                <counter measurementType="cscfAcceptedRegistrations">
                    <measurementName>cscfAcceptedRegistrations</measurementName>
                    <description>
                        Number of successful registrations of contact addresses. One contact address is registered per registration request
                        with one or more associated public user identities. Public user identities belonging to the same implicit registration set is counted as one registration.
                    </description>
                    <condition>
                        This counter is incremented when sending a successful final response (2xx) to a SIP REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfAcceptedReregistrations">
                    <measurementName>cscfAcceptedReregistrations</measurementName>
                    <description>
                        Number of successful reregistrations of contact addresses. One contact address is reregistered per reregistration
                        request with one or more associated public user identities. Public user identities belonging to the same implicit
                        registration set is counted as one reregistration.
                    </description>
                    <condition>
                        This counter is incremented when sending a successful final response (2xx) to a SIP Re-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfAcceptedDeregistrations">
                    <measurementName>cscfAcceptedDeregistrations</measurementName>
                    <description>
                        Number of successful deregistrations of contact addresses or public user identities.If one contact address is deregistered
                        then all associated public user identities belonging to the contact address are removed. Public user identities
                        belonging to the same implicit registration set is counted as one registration. If a public user identity is deregistered
                        then all associated contact addresses belonging to the public user identity are deregistered.
                    </description>
                    <condition>
                        This counter is incremented when sending a successful final response (2xx) to a SIP De-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRejectedRegistrations">
                    <measurementName>cscfRejectedRegistrations</measurementName>
                    <description>
                        This counter is deprecated. It is replaced by cscfRegistrationsFailure.
                    </description>
                    <condition>
                        Rejected registration of a served user.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRejectedReregistrations">
                    <measurementName>cscfRejectedReregistrations</measurementName>
                    <description>
                        This counter is deprecated. It is replaced by cscfReregistrationsFailure.
                    </description>
                    <condition>
                        Rejected reregistration of a served user.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRejectedDeregistrations">
                    <measurementName>cscfRejectedDeregistrations</measurementName>
                    <description>
                        This counter is deprecated. It is replaced by cscfDeregistrationsFailure.
                    </description>
                    <condition>
                        Rejected deregistration of a served user.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfExpiredRegistrations">
                    <measurementName>cscfExpiredRegistrations</measurementName>
                    <description>
                        Number of expired registered contact addresses. One or more associated public user identities are possibly
                        unregistered as a result of the expired contact address registration.
                    </description>
                    <condition>
                        This counter is incremented at the expiration of a contact address registration.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfPeakConcurrentRegistrations">
                    <measurementName>cscfPeakConcurrentRegistrations</measurementName>
                    <description>
                       The maximum number of registered and unregistered public user identities in the node during a measurement
                       granularity period. One or several public user identities are registered as a result of a successful
                       registration request or an invoked terminating and originating service. Note that several public user
                       identities are registered as a part of an Implicit Registration Set (IRS).
                    </description>
                    <condition>
                       This counter is incremented at successful initial user-initiated registration or at successful initial
                       registration of a user as unregistered for originating or terminating services. This counter is
                       decremented at successful user-initiated deregistration, deregistration as a result of contact address
                       expiration, unregistered user expiration configured by scscfUnregisteredProfileTimer, network-initiated
                       deregistration or the Administrative State is changed to LOCKED for maintenance. This counter sampling
                       interval is controlled by configuration parameter cscfGaugeInterval (default 2 minutes). In the output,
                       the cscfPeakConcurrentRegistrations will be reported from one processor only, but represent registrations
                       from all processors.
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MAX</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>Max number of registrations</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfConcurrentRegistrations">
                    <measurementName>cscfConcurrentRegistrations</measurementName>
                    <description>
                       The mean number of registered and unregistered public user identities in the node during a measurement
                       granularity period. One or several public user identities are registered as a result of a successful
                       registration request or an invoked terminating and originating service. Note that several public user
                       identities are registered as a part of an Implicit Registration Set (IRS).
                    </description>
                    <condition>
                       This counter is incremented at successful initial user-initiated registration or at successful initial
                       registration of a user as unregistered for originating or terminating services. This counter is
                       decremented at successful user-initiated deregistration, deregistration as a result of contact address
                       expiration, unregistered user expiration configured by scscfUnregisteredProfileTimer, network-initiated
                       deregistration or the Administrative State is changed to LOCKED for maintenance. This counter sampling
                       interval is controlled by configuration parameter cscfGaugeInterval (default 2 minutes). In the output,
                       the cscfConcurrentRegistrations will be reported from one processor only, but represent registrations
                       from all processors.
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MEAN</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>Number of current registrations</outputUnit>
                        <resultType>float</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfServiceInvokations">
                    <measurementName>cscfServiceInvokations</measurementName>
                    <description>Number of service invocations that have been performed.</description>
                    <condition>A change in number of service invocations that have been performed.</condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Service Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfExpiredSessions">
                    <measurementName>cscfExpiredSessions</measurementName>
                    <description>
                        Number of sessions that have been removed due to session expiry.
                    </description>
                    <condition>
                        A session is removed due to time expired.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfFailedSessions">
                    <measurementName>cscfFailedSessions</measurementName>
                    <description>
                        Number of failed SIP INVITE requests. The reasons for the failure include rejected authentication and authorization
                        checks. Rejections from the challenge procedure are counted. Syntactically invalid INVITE messages are not counted.
                        The failure may take place at this node, or other nodes involved in the SIP INVITE request chain.
                    </description>
                    <condition>
                        This counter is incremented at failure of an SIP INVITE request.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfSuccessfulSessions">
                    <measurementName>cscfSuccessfulSessions</measurementName>
                    <description>
                        Number of successful session establishments, as a result of successful final responses to initial SIP INVITE received by CSCF.
                        The counter is keyed on the feature tag in the SIP Request message (Accept-Contact header).
                        If there are more feature tags in the message, the CSCF will increment the counter once per feature tag.
                        If there is no feature tag in the message, CSCF will increment the counter for key "DEFAULT".
                        CSCF will also always increment the counter once with the key "sum" in order to keep track of total success.
                    </description>
                    <condition>
                        A session is successfully established as a result of a final 2xx class response
                        to an initial SIP INVITE received on one of the CSCF SIP interfaces (Mw, Gm or ISC).
                        Sessions for the ISC interface in the case when an AS is acting as a proxy are not counted.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>FeatureTag</keyTypeName>
                </counter>
                <counter measurementType="cscfPeakConcurrentSessions">
                    <measurementName>cscfPeakConcurrentSessions</measurementName>
                    <description>
                        The maximum number of established INVITE and SUBSCRIBE dialogs in the node during a measurement granularity
                        period.
                    </description>
                    <condition>
                        This counter is incremented at successful establishment of an INVITE or SUBSCRIBE dialog. This counter is
                        decremented at successful termination of an INVITE or SUBSCRIBE dialog or termination caused by dialog (session)
                        expiry. This counter sampling interval is controlled by configuration parameter CscfGaugeInterval (default 2 minutes).
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MAX</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>Max number of sessions</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfConcurrentSessions">
                    <measurementName>cscfConcurrentSessions</measurementName>
                    <description>
                        The mean number of established INVITE and SUBSCRIBE dialogs in the node during a measurement granularity
                        period.
                    </description>
                    <condition>
                        This counter is incremented at successful establishment of an INVITE or SUBSCRIBE dialog. This counter is
                        decremented at successful termination of an INVITE or SUBSCRIBE dialog or termination caused by dialog (session) expiry. This counter sampling interval is controlled
                        by the configuration parameter CscfGaugeInterval (default 2 minutes).
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MEAN</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>Number of sessions.</outputUnit>
                        <resultType>float</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfScscfAssignments">
                    <measurementName>cscfScscfAssignments</measurementName>
                    <description>
                        Number of times the I-CSCF has assigned users to a S-CSCF.
                    </description>
                    <condition>
                        A change in number of times the I-CSCF has assigned users to a S-CSCF.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPutSents">
                    <measurementName>cscfCxPutSents</measurementName>
                    <description>
                        Counts the number of attempted SARs.
                    </description>
                    <condition>
                        Attempted sending of a SAR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPutSuccesses">
                    <measurementName>cscfCxPutSuccesses</measurementName>
                    <description>
                        Counts the number of received SAAs with Diameter result code "DIAMETER_SUCCESS" or "DIAMETER_SUCCESS_SERVER_NAME_NOT_STORED".
                        It is also stepped at attempted sending of SAR in the case a user is deregistered due to registration timeout or node locking.
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPutPublicIdUnknowns">
                    <measurementName>cscfCxPutPublicIdUnknowns</measurementName>
                    <description>
                        Counts the number of received SAAs with 3GPP result code "DIAMETER_ERROR_USER_UNKNOWN".
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPutUnableToComplys">
                    <measurementName>cscfCxPutUnableToComplys</measurementName>
                    <description>
                        Counts the number of received SAA's with Diameter result code "DIAMETER_UNABLE_TO_COMPLY".
                        The counter is also used for received SAA's with result codes which are not covered by any other counter.
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPutAlreadyRegistereds">
                    <measurementName>cscfCxPutAlreadyRegistereds</measurementName>
                    <description>
                        Counts the number of received SAAs with 3GPP result code "DIAMETER_ERROR_IDENTITY_ALREADY_REGISTERED".
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPutAvpUnsupporteds">
                    <measurementName>cscfCxPutAvpUnsupporteds</measurementName>
                    <description>
                        Counts the number of received SAAs with Diameter result code "DIAMETER_AVP_UNSUPPORTED".
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPutIdentitiesDontMatch">
                    <measurementName>cscfCxPutIdentitiesDontMatch</measurementName>
                    <description>
                        Counts the number of received SAAs with 3GPP result code "DIAMETER_ERROR_ID ENTITIES_DONT_MATCH".
                    </description>
                    <condition>
                        Reception of a SAA
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPullSents">
                    <measurementName>cscfCxPullSents</measurementName>
                    <description>
                        Counts the number of attempted SARs where the downloading of a user profile is explicitly requested,
                        that is, the SAR contains a User-Data-Already-Available AVP with value "USER_DATA_NOT_AVAILABLE".
                    </description>
                    <condition>
                        Attempted sending of a SAR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPullSuccesses">
                    <measurementName>cscfCxPullSuccesses</measurementName>
                    <description>
                        Counts the number of received SAAs with Diameter result code "DIAMETER_SUCCESS".
                        The counter is only stepped if the downloading of a user profile was explicitly requested,
                        that is, the corresponding SAR contained a User-Data-Already-Available AVP with value "USER_DATA_NOT_AVAILABLE".
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPullPublicIdUnknowns">
                    <measurementName>cscfCxPullPublicIdUnknowns</measurementName>
                    <description>
                        Counts the number of received SAAs with 3GPP result code "DIAMETER_ERROR_USER_UNKNOWN".
                        The counter is only stepped if the downloading of a user profile was explicitly requested,
                        that is, the corresponding SAR contained a User-Data-Already-Available AVP with value "USER_DATA_NOT_AVAILABLE".
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPullUnableToComplys">
                    <measurementName>cscfCxPullUnableToComplys</measurementName>
                    <description>
                        Counts the number of received SAAs with Diameter result code "DIAMETER_UNABLE_TO_COMPLY" or with Diameter result code "DIAMETER_SUCCESS"
                        but CSCF has returned a negative SIP response due to some processing error (for example, parsing errors in the downloaded user profile).
                        The counter is also used to count SAAs with result codes not covered by any other counter.
                        The counter is only stepped if the downloading of a user profile was explicitly requested,
                        that is, the corresponding SAR contained a User-Data-Already-Available AVP with value "USER_DATA_NOT_AVAILABLE".
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPullIdentityNotRegistereds">
                    <measurementName>cscfCxPullIdentityNotRegistereds</measurementName>
                    <description>
                        The number of Cx-Pull responses with "CX_UNSUCCESS_PUBLIC_ID_NOT_REGISTERED" result code.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPullAvpUnsupporteds">
                    <measurementName>cscfCxPullAvpUnsupporteds</measurementName>
                    <description>
                        Counts the number of SAAs with Diameter result code "DIAMETER_AVP_UNSUPPORTED".
                        The counter is only stepped if the downloading of a user profile was explicitly requested,
                        that is, the corresponding SAR contained a User-Data-Already-Available AVP with value "USER_DATA_NOT_AVAILABLE".
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxPullIdentitiesDontMatch">
                    <measurementName>cscfCxPullIdentitiesDontMatch</measurementName>
                    <description>
                        Counts the number of received SAAs with 3GPP result code "DIAMETER_ERR OR_IDENTITIES_DONT_MATCH".
                        The counter is only stepped if the downloading of a user profile was explicitly requested, that is,
                        the corresponding SAR contained a User-Data-Already-Available AVP with value "USER_DATA_NOT_AVAILABLE".
                    </description>
                    <condition>
                        Reception of a SAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthSents">
                    <measurementName>cscfCxAuthSents</measurementName>
                    <description>
                        The total number of Cx-AuthData requests sent.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthSuccesses">
                    <measurementName>cscfCxAuthSuccesses</measurementName>
                    <description>
                        The total number of Cx-Auth request responses with "CX_SUCCESS" result code.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthPublicIdUnknowns">
                    <measurementName>cscfCxAuthPublicIdUnknowns</measurementName>
                    <description>
                        The number of Cx-AuthData responses with "CX_UNSUCCESS_PUBLIC_ID_UNKNOWN" result code.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthUnableToComplys">
                    <measurementName>cscfCxAuthUnableToComplys</measurementName>
                    <description>
                        The number of Cx-AuthData responses with "CX_UNABLE_TO_COMPLY" result code.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthMultiRoundAuths">
                    <measurementName>cscfCxAuthMultiRoundAuths</measurementName>
                    <description>
                        The number of Cx-AuthData responses with "CX_MULTI_ROUND_AUTH" result code.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthRejections">
                    <measurementName>cscfCxAuthRejections</measurementName>
                    <description>
                        The number of Cx-AuthData responses that have "CX_AUTHENTICATION_REJECTED" result code.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthAvpUnsupporteds">
                    <measurementName>cscfCxAuthAvpUnsupporteds</measurementName>
                    <description>
                        The number of Cx-AuthData responses with "CX_AVP_UNSUPPORTED" result code.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthInvalidAvpValues">
                    <measurementName>cscfCxAuthInvalidAvpValues</measurementName>
                    <description>
                        The number of Cx-AuthData responses with "CX_INVALID_AVP_VALUE" result code.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxAuthIdentitiesDontMatch">
                    <measurementName>cscfCxAuthIdentitiesDontMatch</measurementName>
                    <description>
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxCongestions">
                    <measurementName>cscfCxCongestions</measurementName>
                    <description>
                        Counts the number of received Cx answers with Diameter result code "DIAMETER_TOO_BUSY".
                    </description>
                    <condition>
                        Reception of a Cx answer.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullSents">
                    <measurementName>cscfCxSelPullSents</measurementName>
                    <description>
                        Counts the number of attempted UARs.
                    </description>
                    <condition>
                        Attempted sending of a UAR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullRegistereds">
                    <measurementName>cscfCxSelPullRegistereds</measurementName>
                    <description>
                        Counts the number of received UAAs with 3GPP result code "DIAMETER_SUBSEQUENT_REGISTRATION" or "DIAMETER_SUCCESS".
                    </description>
                    <condition>
                        Reception of a UAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullInitRegistrations">
                    <measurementName>cscfCxSelPullInitRegistrations</measurementName>
                    <description>
                        Counts the number of received UAAs with 3GPP result code "DIAMETER_FIRST_REGISTRATION".
                    </description>
                    <condition>
                        Reception of a UAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullPrivateIdUnknowns">
                    <measurementName>cscfCxSelPullPrivateIdUnknowns</measurementName>
                    <description>
                        The counter is not used at the moment.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullPublicIdUnknowns">
                    <measurementName>cscfCxSelPullPublicIdUnknowns</measurementName>
                    <description>
                        Counts the number of received UAAs with 3GPP result code "DIAMETER_ERROR_USER_UNKNOWN".
                    </description>
                    <condition>
                        Reception of a UAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullUnableToComplys">
                    <measurementName>cscfCxSelPullUnableToComplys</measurementName>
                    <description>
                        Counts the number of received UAAs with Diameter result code "DIAMETER_UNABLE_TO_COMPLY".
                        The counter is also used when no UAA response is received or for the received UAAs with
                        result codes which are not covered by any other counter.
                    </description>
                    <condition>
                        Reception of a UAA or timeout on reception of a UAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullRoamNotAlloweds">
                    <measurementName>cscfCxSelPullRoamNotAlloweds</measurementName>
                    <description>
                        Counts the number of received UAAs with 3GPP result code "DIAMETER_ERROR_ROAMING_NOT_ALLOWED".
                    </description>
                    <condition>
                        Reception of a UAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullAuthRejecteds">
                    <measurementName>cscfCxSelPullAuthRejecteds</measurementName>
                    <description>
                        Counts the number of received UAAs with Diameter result code "DIAMETER_AUTHORIZATION_REJECTED".
                    </description>
                    <condition>
                        Reception of a UAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullAvpUnsupporteds">
                    <measurementName>cscfCxSelPullAvpUnsupporteds</measurementName>
                    <description>
                        Counts the number of received UAAs with Diameter result code "DIAMETER_AVP_UNSUPPORTED".
                    </description>
                    <condition>
                        Reception of a UAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxSelPullIdentitiesDontMatch">
                    <measurementName>cscfCxSelPullIdentitiesDontMatch</measurementName>
                    <description>
                        Counts the number of received UAAs with 3GPP result code "DIAMETER_ERROR_ID ENTITIES_DONT_MATCH".
                    </description>
                    <condition>
                        Reception of an UAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxLocQuerySents">
                    <measurementName>cscfCxLocQuerySents</measurementName>
                    <description>
                        Counts the number of attempted LIRs.
                    </description>
                    <condition>
                        Attempted sending of a LIR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxLocQuerySuccesses">
                    <measurementName>cscfCxLocQuerySuccesses</measurementName>
                    <description>
                        Counts the number of received LIAs with Diameter result code "DIAMETER_SUCCESS".
                    </description>
                    <condition>
                        Reception of a LIA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxLocQueryNotRegistereds">
                    <measurementName>cscfCxLocQueryNotRegistereds</measurementName>
                    <description>
                        Counts the number of received LIAs with 3GPP result code "DIAMETER_ERROR_IDENTITY_NOT_REGISTERED".
                    </description>
                    <condition>
                        Reception of a LIA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxLocQueryPublicIdUnknowns">
                    <measurementName>cscfCxLocQueryPublicIdUnknowns</measurementName>
                    <description>
                        Counts the number of received LIAs with 3GPP result code "DIAMETER_ERROR_USER_UNKNOWN".
                    </description>
                    <condition>
                        Reception of a LIA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxLocQueryUnableToComplys">
                    <measurementName>cscfCxLocQueryUnableToComplys</measurementName>
                    <description>
                        Counts the number of received LIAs with Diameter result code "DIAMETER_UNABLE_TO_COMPLY"
                        and any result code not covered by other counters.
                    </description>
                    <condition>
                        Reception of a LIA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxLocQueryAvpUnsupporteds">
                    <measurementName>cscfCxLocQueryAvpUnsupporteds</measurementName>
                    <description>
                        Counts the number of received LIAs with Diameter result code "DIAMETER_AVP_UNSUPPORTED".
                    </description>
                    <condition>
                        Reception of a LIA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxLocQueryUnregisteredServices">
                    <measurementName>cscfCxLocQueryUnregisteredServices</measurementName>
                    <description>
                        Counts the number of received LIAs with 3GPP result code "DIAMETER_UNREGISTERED_SERVICE".
                    </description>
                    <condition>
                        Reception of a LIA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxOptimizedAuthSuccesses">
                    <measurementName>cscfCxOptimizedAuthSuccesses</measurementName>
                    <description>
                        The number of successful authentications using optimized authentication.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxOptimizedAuthFailures">
                    <measurementName>cscfCxOptimizedAuthFailures</measurementName>
                    <description>
                        The number of unsuccessful authentications using optimized authentication.
                    </description>
                    <condition>
                        An unsuccessful authentications using optimized authentication.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxReqAcceptedSSO">
                    <measurementName>cscfCxReqAcceptedSSO</measurementName>
                    <description>
                        The number of successful Single Sign-On (SSO) authentication.
                    </description>
                    <condition>
                        Incremented when the subsequent requests from those clients that have SSO feature activated.
                        The S-CSCF will authenticate the subsequent requests for those SSO-authenticated clients by matching
                        the IP address in the first through header and the IP address stored in the authenticatedIPAddress.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxReqFailedSSO">
                    <measurementName>cscfCxReqFailedSSO</measurementName>
                    <description>
                        The number of failed SSO authentications.
                    </description>
                    <condition>
                        Incremented when the match between the IP address in the first through header and the IP address stored in
                        the authenticatedIPAddress fails and configuration parameter CscfSSOAuthentication is set to TRUE.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxUpdateDataRequestReceived">
                    <measurementName>cscfCxUpdateDataRequestReceived</measurementName>
                    <description>
                        Counts the number of received PPR's.
                    </description>
                    <condition>
                        Reception of a PPR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxUpdateDataAnswersSuccess">
                    <measurementName>cscfCxUpdateDataAnswersSuccess</measurementName>
                    <description>
                        Counts the number of sent PPAs with Diameter result code "DIAMETER_SUCCESS".
                    </description>
                    <condition>
                        Sending of a PPA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxUpdateDataAnswersErrUserUnknown">
                    <measurementName>cscfCxUpdateDataAnswersErrUserUnknown</measurementName>
                    <description>
                        Counts the number of sent PPA's with 3GPP result code "DIAMETER_ERROR_USER_UNKNOWN".
                    </description>
                    <condition>
                        Sending of a PPA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxUpdateDataAnswersNotSupportedUserData">
                    <measurementName>cscfCxUpdateDataAnswersNotSupportedUserData</measurementName>
                    <description>
                        Counts the number of sent PPA's with 3GPP result code "DIAMETER_ERROR_NOT_SUPPORTED_USER_DATA".
                    </description>
                    <condition>
                        Sending of a PPA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxUpdateDataAnswersErrInvalidAVPValue">
                    <measurementName>cscfCxUpdateDataAnswersErrInvalidAVPValue</measurementName>
                    <description>
                        Counts the number of sent PPA's with Diameter result code "DIAMETER_INVALID_AVP_VALUE" or "DIAMETER_ERROR_FEATURE_UNSUPPORTED".
                    </description>
                    <condition>
                        Sending of a PPA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxUpdateDataAnswersErrUnableToComply">
                    <measurementName>cscfCxUpdateDataAnswersErrUnableToComply</measurementName>
                    <description>
                        Counts the number of sent PPA's with Diameter result code "DIAMETER_AVP_UNSUPPORTED" and "DIAMETER_MISSING_AVP".
                    </description>
                    <condition>
                        Sending of a PPA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxDeregisterRequestReceived">
                    <measurementName>cscfCxDeregisterRequestReceived</measurementName>
                    <description>
                        Counts the number of received RTR's.
                    </description>
                    <condition>
                        Reception of an RTR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxDeregisterAnswersSuccess">
                    <measurementName>cscfCxDeregisterAnswersSuccess</measurementName>
                    <description>
                        Counts the number of sent RTAs with Diameter result code "DIAMETER_SUCCESS".
                    </description>
                    <condition>
                        Sending of an RTA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxDeregisterAnswersErrUserUnknown">
                    <measurementName>cscfCxDeregisterAnswersErrUserUnknown</measurementName>
                    <description>
                        Counts the number of sent RTA's with 3GPP result code "DIAMETER_ERROR_USER_UNKNOWN".
                    </description>
                    <condition>
                        Sending of an RTA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxDeregisterAnswersAvpUnsupported">
                    <measurementName>cscfCxDeregisterAnswersAvpUnsupported</measurementName>
                    <description>
                        Counts the number of sent RTA's with Diameter result code "DIAMETER_AVP_UNSUPPORTED".
                    </description>
                    <condition>
                        Sending of an RTA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxDeregisterAnswersErrInvalidAVPValue">
                    <measurementName>cscfCxDeregisterAnswersErrInvalidAVPValue</measurementName>
                    <description>
                        Counts the number of sent RTA's with Diameter result code "DIAMETER_INVALID_AVP_VALUE".
                    </description>
                    <condition>
                        Sending of an RTA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCxDeregisterAnswersErrUnableToComply">
                    <measurementName>cscfCxDeregisterAnswersErrUnableToComply</measurementName>
                    <description>
                        Counts the number of sent RTA's with Diameter result code "DIAMETER_UNABLE_TO_COMPLY" or "DIAMETER_MISSING_AVP".
                    </description>
                    <condition>
                        Sending of an RTA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfStatsCxUserAuthorizationRequestRedirections">
                    <measurementName>cscfStatsCxUserAuthorizationRequestRedirections</measurementName>
                    <description>
                        Counts the number of attempted UAR's caused by the reception of a UAA with Diameter result code "DIAMETER_REDIRECT_INDICATION".
                    </description>
                    <condition>
                        Attempted sending of a UAR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfStatsCxLocationUserRequestRedirections">
                    <measurementName>cscfStatsCxLocationUserRequestRedirections</measurementName>
                    <description>
                        Counts the number of attempted SAR's caused by the reception of a SAA with Diameter result code "DIAMETER_REDIRECT_INDICATION".
                    </description>
                    <condition>
                        Attempted sending of a SAR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfStatsCxLocationInfoRequestRedirections">
                    <measurementName>cscfStatsCxLocationInfoRequestRedirections</measurementName>
                    <description>
                        Counts the number of sent LIR's caused by the reception of a LIA with Diameter result code "DIAMETER_REDIRECT_INDICATION".
                    </description>
                    <condition>
                        Attempted sending of a LIR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfStatsCxMultimediaAuthRequestRedirections">
                    <measurementName>cscfStatsCxMultimediaAuthRequestRedirections</measurementName>
                    <description>
                        Counts the number of attempted MAR's caused by the reception of a MAA with Diameter result code "DIAMETER_REDIRECT_INDICATION".
                    </description>
                    <condition>
                        Attempted sending of an MAR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfStatsCxUnableToDecodeRequestRedirections">
                    <measurementName>cscfStatsCxUnableToDecodeRequestRedirections</measurementName>
                    <description>
                        Stepped if the CSCF is unable to decode a response provided by an SLF node.
                    </description>
                    <condition>
                        The counter is incremented when response is not possible to decode by the CSCF.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfStatsCxIllegalCommandCodeRequestRedirections">
                    <measurementName>cscfStatsCxIllegalCommandCodeRequestRedirections</measurementName>
                    <description>
                        Stepped if a response provided by an SLF node contains an illegal command code.
                    </description>
                    <condition>
                        The counter is incremented when an illegal command code is part of the response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfStatsCxRedirectionLoopDetected">
                    <measurementName>cscfStatsCxRedirectionLoopDetected</measurementName>
                    <description>
                        Stepped if the SLF redirection mechanism in the CSCF detects a loop (more than 2 redirections have been conducted).
                    </description>
                    <condition>
                        The counter is incremented when a loop is detected by the redirection mechanism.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfACR">
                    <measurementName>cscfACR</measurementName>
                    <description>
                        The number of Accounting Requests sent.
                    </description>
                    <condition>
                        The counter is incremented when an ACR is sent from the CSCF to Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfACASuccess">
                    <measurementName>cscfACASuccess</measurementName>
                    <description>
                        Number of successful Accounting Answers (ACAs) received from Diameter.
                    </description>
                    <condition>
                        The counter is incremented when a successful ACA is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfACABackup">
                    <measurementName>cscfACABackup</measurementName>
                    <description>
                        When protocol error or no Accounting Response is received on the ACR message the CSCF sends an ACR to the Offline backup process.
                    </description>
                    <condition>
                        The counter is incremented when protocol errors:
                        DIAMETER_UNABLE_TO_DELIVER, DIAMETER_TOO_BUSY
                        and transient failures DIAMETER_OUT_OF_SPACE and ELECTION_LOST are received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfACAProtocolErrors">
                    <measurementName>cscfACAProtocolErrors</measurementName>
                    <description>
                        Number of Accounting Answers (ACAs) with protocol errors (code 3xxx) received from Diameter.
                        The counter is used to raise and cease the threshold alarm CSCF Charging Answers Indicate Protocol Errors.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is incremented when an ACA with protocol errors (code 3xxx)is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfACAPermanentFailure">
                    <measurementName>cscfACAPermanentFailure</measurementName>
                    <description>
                       Number of Accounting Answers (ACA) with permanent errors (code 5xxx) received from Diameter.
                       The counter is used to raise and cease the threshold alarm CSCF Charging Answers Indicate Permanent Failures.
                       The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is incremented when an ACA with protocol errors (code 5xxx) is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfACARedirectIndication">
                    <measurementName>cscfACARedirectIndication</measurementName>
                    <description>
                        Number of Accounting Answers (ACA) with protocol error that the request could not be satisfied
                        with locally and the CSCF will direct the request directly to the server,
                        whose contact information has been added to the response.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>-</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCurrentStoredRecords">
                    <measurementName>cscfCurrentStoredRecords</measurementName>
                    <description>
                        The average number of stored Accounting-Request (ACR) records on disk in the last scan period.
                        A charging session can consist of multiple ACRs. The counter is used to raise and cease the
                        threshold alarm CSCF Charging Request Transmission Problem.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is incremented when a Charging Request Transmission Problem is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MEAN</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>The number of charging records stored in the backup.</outputUnit>
                        <resultType>float</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfUnauthMsgSizes">
                    <measurementName>cscfUnauthMsgSizes</measurementName>
                    <description>
                        Before sending any message, both SIP_TCP Session and SIP_UDP Server Processes have to check if the message
                        is within the allowed limit by either CscfMaxSipMessageSizeTcp or CscfMaxSipMessageSizeUdp.
                        If the initial transport protocol is unable to send the message, the SIP Framework may attempt to use an alternative protocol;
                        in case of failure, the application will be notified through the method called handleSendRequestError.
                        This means that this counter can be incremented by both the CSCF and the SIP Framework.
                    </description>
                    <condition>
                        Once the CSCF is informed of a handleSendRequestError,
                        it will create a SIP error message 513 (message too large) and forward it back properly.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfUserAgentRejections">
                    <measurementName>cscfUserAgentRejections</measurementName>
                    <description>
                        Number of User Agent (UA) rejections due to that a registered UA is not included in
                        the CSCF configuration parameter list CscfUserAgentWhiteList.
                    </description>
                    <condition>
                        If User-Agent header does not match any entry of the configured White-List,
                        a response message 403 "User Agent Not Authorized" is generated and reject the REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfActiveUsers">
                    <measurementName>cscfActiveUsers</measurementName>
                    <description>
                        cscfActiveUsers represents the number of active users during the measurement period.
                        The counter is keyed. The key to this counter is the feature tag received in SIP Request message (Accept-Contact header).
                        Summary key (global), summarize all keys.
                    </description>
                    <condition>
                        Incremented the first time within a measurement interval when the served user either sends
                        or receives a SIP message type specified by the configuration parameter "CscfActiveUserMethod".
                        The measurement intervals (of 10 days) are 1st to 10th  11th to 20th 21th to end of the month.
                        In each measurement period, cscfActiveUsers is incremented only for the first valid user's event in the measurement period,
                        ensuring that users are not counted multiple times during the same period.
                        The counter will only be incremented in S-CSCF and the counter will only be incremented for successful transactions,
                        that is, 2XX responses.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>FeatureTag</keyTypeName>
                </counter>
                <counter measurementType="cscfAuthenticatedTrustedGateway">
                    <measurementName>cscfAuthenticatedTrustedGateway</measurementName>
                    <description>
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCR">
                    <measurementName>cscfCCR</measurementName>
                    <description>The number of Credit Control Request (CCR) messages sent.</description>
                    <condition>
                        The counter is incremented when a CCR is sent from the CSCF to Diameter
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCASuccess">
                    <measurementName>cscfCCASuccess</measurementName>
                    <description>The number of successful Credit Control Answers (CCAs).</description>
                    <condition>
                        The counter is incremented when a successful CCA is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCAProtocolErrors">
                    <measurementName>cscfCCAProtocolErrors</measurementName>
                    <description>
                        Number of Credit Control Answers (CCAs) with protocol errors (code 3xxx) received from Diameter.
                        The counter is used to raise and cease the threshold alarm CSCF Credit Control Answers Indicate Protocol Errors.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is incremented when a successful CCA is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCARedirectIndication">
                    <measurementName>cscfCCARedirectIndication</measurementName>
                    <description>
                        The counter is not used at the moment.
                    </description>
                    <condition>
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <!-- status: used, not used, deprecated -->
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCATransientFailures">
                    <measurementName>cscfCCATransientFailures</measurementName>
                    <description>
                        Number of Credit Control Answers (CCAs) with transient failures (code 4xxx)
                        received from Diameter.
                    </description>
                    <condition>
                        The counter is incremented when a CCA with transient failures (code 4xxx)
                        is received from Diameter
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCAPermanentFailures">
                    <measurementName>cscfCCAPermanentFailures</measurementName>
                    <description>Number of Credit Control Answers (CCAs) with permanent failures (code 5xxx) received from Diameter. The counter is used to raise and cease the threshold alarm CSCF Credit Control Answers Indicate Permanent Failures. The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.</description>
                    <condition>
                        The counter is incremented when a CCA with permanent failures
                        (code 5xxx) is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCAEndUserServiceDenied">
                    <measurementName>cscfCCAEndUserServiceDenied</measurementName>
                    <description>
                        Number of Credit Control Answers (CCAs) with a transient failure where the server denies the service request due to service restrictions.
                        The counter is used to raise and cease the threshold alarm CSCF Credit Control Answers Indicate End User Service Denied.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is incremented when transient failure "DIAMETER_END_USER_SERVICE_DENIED" (4010) is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCAUserUnknown">
                    <measurementName>cscfCCAUserUnknown</measurementName>
                    <description>Number of Credit Control Answers (CCAs) with a permanent
                    failure where the specified end user is unknown in the credit-control server.</description>
                    <condition>The counter is incremented when permanent failure
                    "DIAMETER_USER_UNKNOWN" (5030) is received from Diameter.</condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCACreditLimitReached">
                    <measurementName>cscfCCACreditLimitReached</measurementName>
                    <description>
                        Number of Credit Control Answers (CCAs) with a transient
                        failure where the end-user's account could not cover the requested service.
                    </description>
                    <condition>
                        The counter is incremented when transient failure
                        "DIAMETER_CREDIT_LIMIT_REACHED" (4012) is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCCACreditNotApplicable">
                    <measurementName>cscfCCACreditNotApplicable</measurementName>
                    <description>
                        Number of Credit Control Answers (CCAs) with a transient failure
                        where it is determined that the service can be granted to the end-user,
                        but no further credit control is needed.
                    </description>
                    <condition>
                        The counter is incremented when transient failure
                        "DIAMETER_CREDIT_LIMIT_REACHED" (4012) is received from Diameter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Charging Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfNpLdapAttempts">
                    <measurementName>cscfNpLdapAttempts</measurementName>
                    <description>
                        The number of times an attempt to call the LDAP client has been made.
                    </description>
                    <condition>
                        This counter is stepped each time a Number Portability Database lookup is triggered,
                        that is, each time the analysis of the received telephone number of the called user
                        determines that the number is a subject for being ported.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>LDAP Client Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfNpLdapPortedResults">
                    <measurementName>cscfNpLdapPortedResults</measurementName>
                    <description>
                        The number of times the CSCF has got any kind of response from the LDAP client, not necessarily a ported number.
                    </description>
                    <condition>
                        The counter is incremented each time the CSCF gets any kind of response from the LDAP client, not necessarily a ported number.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>LDAP Client Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfNpLdapErrors">
                    <measurementName>cscfNpLdapErrors</measurementName>
                    <description>
                        Number of times when there were no response from or other traffic error when calling the LDAP client.
                    </description>
                    <condition>
                        This counter is stepped each time a Number Portability Database lookup is unsuccessful.
                        This means that the counter is stepped each time it is not possible to obtain any information
                        from the database, that is, from any of the Number Portability Database servers being part of
                        the redundant Number Portability Database architecture, about whether the number has been ported.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>LDAP Client Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="icscfDuisLdapSuccess">
                    <measurementName>icscfDuisLdapSuccess</measurementName>
                    <description>
                        This counter represents the total number of successful LDAP requests made by the feature Dynamic User Identity Support (DUIS) towards the DUA-DB.
                        This counter is keyed with LDAP server address and command type (bind / search).
                        The sum key represents the total number of successful DUA-DB LDAP requests with bind and search operations.
                    </description>
                    <condition>
                        This counter is incremented when a successful response received from the DUA-DB for an LDAP request sent by the feature Dynamic User Identity Support (DUIS).
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>LDAP Client Counters</cpiHeading>
                    <cardinality>40</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DuisDuaDbServerUrl</keyTypeName>
                    <keyTypeName>DuisLdapCommandType</keyTypeName>
                </counter>
                <counter measurementType="icscfDuisLdapFailure">
                    <measurementName>icscfDuisLdapFailure</measurementName>
                    <description>
                        This counter represents the total number of failed LDAP requests made by the feature Dynamic User Identity Support (DUIS) towards the DUA-DB.
                        This counter is keyed with LDAP server address, command type (bind / search) and DUI LDAP error code.
                        The sum key represents the total number of failed DUA-DB LDAP requests with bind and search operations.
                        The DUI LDAP error code related keys and their meanings are listed below with the mapping to applicable LDAP result codes
                        (Formatted as DUI LDAP Error code key/Description/LDAP result codes):

                        1/ Internal Error/9,10,12,80;
                        5/ Discarded Due To Overload/51;
                        6/ Object Already Exists/20,68;
                        7/ Constraint Violation/19;
                        8/ Operations Error/1,3,4,5,6,17,18,21,33,36,54,64,65,66,67,69;
                        9/ Communication Error/2,7,8,11,13,14,48,49,50,52,71;
                        10/ Object Not Found/32,34;
                        12/ Server Busy Or Unavailable/53;
                        13/ Discarded Request TimeOut/;
                        15/ Object Attributes Missing/16;
                        18/ Connection Down/;
                    </description>
                    <condition>
                        This counter is incremented when an error is detected when calling the DUA-DB by the feature Dynamic User Identity Support (DUIS).
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>LDAP Client Counters</cpiHeading>
                    <cardinality>440</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DuisDuaDbServerUrl</keyTypeName>
                    <keyTypeName>DuisLdapCommandType</keyTypeName>
                    <keyTypeName>DuisLdapErrorCode</keyTypeName>
                </counter>
                <counter measurementType="cscfStatsCxUserDataRequestRedirections">
                    <measurementName>cscfStatsCxUserDataRequestRedirections</measurementName>
                    <description>
                        Counts the number of attempted SAR's caused by the reception of a SAA with Diameter result code "DIAMETER_REDIRECT_INDICATION".
                    </description>
                    <condition>
                        Attempted sending of a SAR.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxMediaAuthSessionEstAttempts">
                    <measurementName>cscfRxMediaAuthSessionEstAttempts</measurementName>
                    <description>
                        The number of AAR messages that establish that the Rx session is sent.
                    </description>
                    <condition>
                        The counter is incremented when the AAR message that establishes that the Rx session is sent.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxMediaAuthSessionModAttempts">
                    <measurementName>cscfRxMediaAuthSessionModAttempts</measurementName>
                    <description>
                        The number of subsequent AAR messages.
                    </description>
                    <condition>
                        The counter is incremented when subsequent AAR messages are sent for established Rx sessions.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxMediaAuthSessionEstSuccesses">
                    <measurementName>cscfRxMediaAuthSessionEstSuccesses</measurementName>
                    <description>
                        The number of received AAA messages as a response to initial AAR message.
                    </description>
                    <condition>
                        The counter is incremented when an AAA message is received as response to the initial AAR message
                        and when the result code in the AAA indicates success.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxMediaAuthSessionModSuccesses">
                    <measurementName>cscfRxMediaAuthSessionModSuccesses</measurementName>
                    <description>
                        The number of received AAA messages as a response to a subsequent AAR message.
                    </description>
                    <condition>
                        The counter is incremented when an AAA message is received as response to a subsequent AAR message
                        and when the result code in the AAA message indicates success.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxMediaAuthorizationFailures">
                    <measurementName>cscfRxMediaAuthorizationFailures</measurementName>
                    <description>
                        The number of failed media authorizations.
                    </description>
                    <condition>
                        The counter will be incremented when media authorization has failed.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxBearerAuthSessionEstAttempts">
                    <measurementName>cscfRxBearerAuthSessionEstAttempts</measurementName>
                    <description>
                        The number of performed media authorizations.
                    </description>
                    <condition>
                        The counter is incremented when the media authorization is performed and when the SIP session has not reached confirmed state.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxBearerAuthSessionModAttempts">
                    <measurementName>cscfRxBearerAuthSessionModAttempts</measurementName>
                    <description>
                        The number of sent AAR messages to the PCRF.
                    </description>
                    <condition>
                        The counter is incremented by the P-CSCF when sending an AAR message, for active SIP sessions, to the PCRF.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxBearerAuthSessionEstSuccesses">
                    <measurementName>cscfRxBearerAuthSessionEstSuccesses</measurementName>
                    <description>
                        The number of performed successful media authorizations.
                    </description>
                    <condition>
                        The counter is incremented when successful media authorization has been performed
                        and when the SIP session has not reached confirmed state.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxBearerAuthSessionModSuccesses">
                    <measurementName>cscfRxBearerAuthSessionModSuccesses</measurementName>
                    <description>
                        The number of performed successful media authorization.
                    </description>
                    <condition>
                        The counter is incremented when successful media authorization has been performed
                        and when the SIP session has reached confirmed state.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRxBearerAuthorizationFailures">
                    <measurementName>cscfRxBearerAuthorizationFailures</measurementName>
                    <description>
                        The number of received AA Answer (AAA) messages as a response to an AAR message.
                    </description>
                    <condition>
                        The counter is incremented when an AAA message is received as response to any AAR message
                        and when the result code indicates other than success.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRegistrationEventSubscriptionFailures">
                    <measurementName>cscfRegistrationEventSubscriptionFailures</measurementName>
                    <description>
                        The number of times of failed subscriptions to registration events
                        (SUBSCRIBE received by CSCF, non-200 OK message sent back by CSCF).
                        The counter is keyed with the return response code used as key.
                    </description>
                    <condition>
                        The counter is incremented when the CSCF receives a negative response or when the CSCF is sending a negative response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfRegistrationEventSubscriptionSuccessful">
                    <measurementName>cscfRegistrationEventSubscriptionSuccessful</measurementName>
                    <description>
                        Number of times of successful subscriptions to registration events
                        (SUBSCRIBE received by CSCF, 200 OK message sent back by the CSCF). This counter is not keyed.
                    </description>
                    <condition>
                        The counter is incremented when the CSCF receives a successful response or when the CSCF is sending a successful response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRegistrationEventReSubscriptionFailures">
                    <measurementName>cscfRegistrationEventReSubscriptionFailures</measurementName>
                    <description>
                        Number of times of failed resubscriptions to registration events
                        (SUBSCRIBE received by CSCF for an already existing subscription, non-200 OK message sent back by CSCF).
                        This counter is keyed with the return response code used as key.
                    </description>
                    <condition>
                        The counter is incremented when the CSCF receives a negative response or when the CSCF is sending a negative response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfRegistrationEventReSubscriptionSuccessful">
                    <measurementName>cscfRegistrationEventReSubscriptionSuccessful</measurementName>
                    <description>
                        Number of times successful resubscriptions to registration events
                        (SUBSCRIBE received by CSCF for an already existing subscription, 200 OK message sent back by CSCF).
                        This counter is not keyed.
                    </description>
                    <condition>
                        The counter is incremented when the CSCF receives a successful response or when the CSCF is sending a successful response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRegistrationEventNotificationsSendFailures">
                    <measurementName>cscfRegistrationEventNotificationsSendFailures</measurementName>
                    <description>
                        Number of non-200 OK response messages returned due to NOTIFY messages sent by the CSCF to subscribers of registration events.
                        The counter is keyed, with the return response code used as key.
                    </description>
                    <condition>
                        The counter is incremented when the CSCF receives a negative response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfRegistrationEventNotificationsSendSuccessful">
                    <measurementName>cscfRegistrationEventNotificationsSendSuccessful</measurementName>
                    <description>
                        Number of times 200 OK return messages are received due to NOTIFY messages sent
                        by the CSCF to subscribers of registration events. This counter is not keyed.
                    </description>
                    <condition>
                        The counter is incremented when the CSCF receives a successful response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfTelBgcfOrigInvocationSuccess">
                    <measurementName>cscfTelBgcfOrigInvocationSuccess</measurementName>
                    <description>
                        Counts the number of times the BGCF returns a successful response when serving the originating side, that is, in the S-CSCF.
                    </description>
                    <condition>
                        When the BGCF returns a successful response, when serving the originating side.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfTelBgcfTermInvocationSuccess">
                    <measurementName>cscfTelBgcfTermInvocationSuccess</measurementName>
                    <description>
                        Counts the number of times the BGCF returns a successful response when serving the terminating side,
                        that is, in the I-CSCF or the S-CSCF (UAC).
                    </description>
                    <condition>
                        When the BGCF returns a successful response, when serving the terminating side.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfTelBgcfOrigInvocationFailure">
                    <measurementName>cscfTelBgcfOrigInvocationFailure</measurementName>
                    <description>
                        The counter is incremented each time an error code is returned from the BGCF
                        when serving the originating side, that is, in the S-CSCF.
                    </description>
                    <condition>
                        When an error code is returned from the BGCF, when serving the originating side.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfTelBgcfTermInvocationFailure">
                    <measurementName>cscfTelBgcfTermInvocationFailure</measurementName>
                    <description>
                        The counter is incremented each time an error code is returned from the BGCF,
                        when serving the terminating side, that is, in the I-CSCF or the S-CSCF (UAC).
                    </description>
                    <condition>
                        When an error code is returned from the BGCF, when serving the terminating side.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfSmpEarlyAuthorizationSuccess">
                    <measurementName>cscfSmpEarlyAuthorizationSuccess</measurementName>
                    <description>
                        This counter is incremented after each SDP Offer-answer successful negotiated, in the negotiated SDP was successfully analyzed by Media Authorization.
                        The counter is keyed on the SMP-ID in the user profile. If the value of SMP-ID is 0, "DEFAULT" is used as the counter key.
                    </description>
                    <condition>
                        The counter is incremented when SDP Offer is sent in messages prior and including final response to initial INVITE.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SmpId</keyTypeName>
                </counter>
                <counter measurementType="cscfSmpConfirmedAuthorizationSuccess">
                    <measurementName>cscfSmpConfirmedAuthorizationSuccess</measurementName>
                    <description>
                        This counter is incremented after each SDP Offer-Answer successful negotiation, in the context that the negotiated SDP was successfully analyzed by Media Authorization.
                        The counter is keyed on the SMP-ID in the user profile. If the value of SMP-ID is 0, "DEFAULT" is used as the counter key.
                    </description>
                    <condition>
                        The counter is incremented when SDP Offer is sent in messages after 2XX final response to the initial INVITE.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SmpId</keyTypeName>
                </counter>
                <counter measurementType="cscfSmpEarlyAuthorizationFailure">
                    <measurementName>cscfSmpEarlyAuthorizationFailure</measurementName>
                    <description>
                        This counter is incremented after each SDP Offer-Answer unsuccessful negotiation,
                        in the context that the negotiated SDP was unsuccessfully analyzed by Media Authorization.
                        The counter is keyed on the SMP-ID in the user profile. If the value of SMP-ID is 0, "DEFAULT" is used as the counter key.
                    </description>
                    <condition>
                        The counter is incremented when SDP Offer is sent in messages prior and including final response of initial INVITE.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SmpId</keyTypeName>
                </counter>
                <counter measurementType="cscfSmpConfirmedAuthorizationFailure">
                    <measurementName>cscfSmpConfirmedAuthorizationFailure</measurementName>
                    <description>
                        This counter is incremented after each SDP Offer-Answer unsuccessfully negotiation,
                        in the context that the negotiated SDP was unsuccessfully analyzed by Media Authorization.
                        The counter is keyed on the SMP-ID in the user profile. If the value of SMP-ID is 0, "DEFAULT" is used as the counter key.
                    </description>
                    <condition>
                        The counter is incremented when SDP Offer is sent in messages after 2XX final response to the initial INVITE.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SmpId</keyTypeName>
                </counter>
                <counter measurementType="cscfSmpIdNotFound">
                    <measurementName>cscfSmpIdNotFound</measurementName>
                    <description>
                        The counter is an indication that user profile data and S-CSCF configuration data is not synchronized.
                        The counter is used to raise and cease the threshold alarm CSCF User Subscribed Media Profile Id Not Defined.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                        The counter is keyed on the SMP-ID in the user profile. If the value of SMP-ID is 0, "DEFAULT" is used as the counter key.
                    </description>
                    <condition>
                        The counter is incremented when Media Authorization function can not find an entry
                        in S-CSCF configuration database for a given SMP-ID.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SmpId</keyTypeName>
                </counter>
                <counter measurementType="CscfRxDiaAAR">
                    <measurementName>CscfRxDiaAAR</measurementName>
                    <description>
                        Number of sent AA Request (AAR) messages.
                    </description>
                    <condition>
                        The counter is incremented when an AAR message is sent.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="CscfRxDiaAAA">
                    <measurementName>CscfRxDiaAAA</measurementName>
                    <description>
                        Number of received AAA messages. It is keyed on the value of the Result-Code AVP.
                    </description>
                    <condition>
                        The counter is incremented when an AAA message is received.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterResultCode</keyTypeName>
                </counter>
                <counter measurementType="CscfRxDiaNotRecAAA">
                    <measurementName>CscfRxDiaNotRecAAA</measurementName>
                    <description>
                        Number of non-received AAA messages.
                    </description>
                    <condition>
                        The counter is incremented when there is no response received from the PCRF.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="CscfRxDiaSTR">
                    <measurementName>CscfRxDiaSTR</measurementName>
                    <description>
                        Number of sent Session Termination Request (STR) messages.
                    </description>
                    <condition>
                        The counter is incremented when an STR message is sent.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="CscfRxDiaSTA">
                    <measurementName>CscfRxDiaSTA</measurementName>
                    <description>
                        Number of received Session Termination Answer (STA) messages. It is keyed on the value of the Result-Code AVP.
                    </description>
                    <condition>
                        The counter is incremented when an STA message is received.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterResultCode</keyTypeName>
                </counter>
                <counter measurementType="CscfRxDiaASR">
                    <measurementName>CscfRxDiaASR</measurementName>
                    <description>
                        Number of received Abort Session Request (ASR) messages. It is keyed on the Abort-Cause AVP.
                    </description>
                    <condition>
                        The counter is incremented when an ASR message is received.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterAbortCause</keyTypeName>
                </counter>
                <counter measurementType="CscfRxDiaASA">
                    <measurementName>CscfRxDiaASA</measurementName>
                    <description>
                        Number of sent Abort Session Answer (ASA) messages. It is keyed on the value of the Result-Code AVP.
                    </description>
                    <condition>
                        The counter is incremented when an ASA message is sent.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterResultCode</keyTypeName>
                </counter>
                <counter measurementType="cscfRxDiaInvalidAnswers">
                    <measurementName>cscfRxDiaInvalidAnswers</measurementName>
                    <description>
                        Number of invalid answer messages. The message is invalid due to,
                        for example, wrong session-id or other invalid or unknown AVP.
                    </description>
                    <condition>
                        The counter is incremented when receiving invalid answer messages.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="pcscfRxSipSessionContOnUnsuccAAA">
                    <measurementName>pcscfRxSipSessionContOnUnsuccAAA</measurementName>
                    <description>
                        The number of times that the P-CSCF continues a SIP session due to
                        the receipt of an AAA command with an unsuccessful result code.
                    </description>
                    <condition>
                        The counter is incremented when the P-CSCF receives an AAA command
                        with an unsuccessful result code before the SIP Session Continue
                        Timer (PcscfRxSipSessionContinueTimer) has expired.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="pcscfRxSipSessionContOnTimeout">
                    <measurementName>pcscfRxSipSessionContOnTimeout</measurementName>
                    <description>
                        The number of times that the P-CSCF continues a SIP session due to
                        the expiry of the SIP Session Continue Timer
                        (PcscfRxSipSessionContinueTimer).
                    </description>
                    <condition>
                        The counter is incremented when the SIP Session Continue Timer
                        (PcscfRxSipSessionContinueTimer) expires.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="pcscfRxSipSessionContOnDiaError">
                    <measurementName>pcscfRxSipSessionContOnDiaError</measurementName>
                    <description>
                        The number of times that the P-CSCF continues a SIP session due to
                        an error notification from the Diameter stack.
                    </description>
                    <condition>
                        The counter is incremented when the P-CSCF continues a SIP session
                        on an error notification from the Diameter stack; for example, if
                        the Diameter stack fails to send the request, it times out, or it
                        is unable to encode or decode a command.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="pcscfRxSipSessionContDelayedAAA">
                    <measurementName>pcscfRxSipSessionContDelayedAAA</measurementName>
                    <description>
                        The number of times that the P-CSCF receives an AAA command after
                        the SIP Session Continue Timer (PcscfRxSipSessionContinueTimer) has
                        expired.
                    </description>
                    <condition>
                        The counter is incremented when the P-CSCF receives an AAA command
                        after the SIP Session Continue Timer
                        (PcscfRxSipSessionContinueTimer) has expired.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Rx Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>NotApplicable</keyTypeName>
                </counter>
                <counter measurementType="ecscfFailedEmergencySessions">
                    <measurementName>ecscfFailedEmergencySessions</measurementName>
                    <description>
                        The number of non-successful final response to an emergency call set up.
                    </description>
                    <condition>
                        The counter is incremented at reception of any non-successful final
                        response to an emergency call setup or upon an internal error
                        when handling the emergency session. It will be keyed on the final response failure code.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="ecscfExpiredEmergencySessions">
                    <measurementName>ecscfExpiredEmergencySessions</measurementName>
                    <description>
                        The number of expired emergency sessions.
                    </description>
                    <condition>
                        The counter is incremented at expiration of an emergency call (session timer).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="ecscfSuccessfulEmergencySessions">
                    <measurementName>ecscfSuccessfulEmergencySessions</measurementName>
                    <description>
                        The number of 2xx successful final response on an emergency call set up.
                    </description>
                    <condition>
                        The counter is incremented at reception
                        of a 2xx successful final response on an emergency call setup.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="ecscfEmergencyMethodNotAllowed">
                    <measurementName>ecscfEmergencyMethodNotAllowed</measurementName>
                    <description>
                        The number of not allowed messages.
                        The Counter is keyed with the SIP method for not allowed Emergency service SIP method.
                    </description>
                    <condition>
                        The counter is incremented at reception of a not allowed message.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPMethod</keyTypeName>
                </counter>
                <counter measurementType="cscfShUDRSuccesses">
                    <measurementName>cscfShUDRSuccesses</measurementName>
                    <description>
                        The number of times a UDA with successful result (in the Result-Code AVP)
                        has been received on the Sh or Dh interface.
                        The counter is keyed on the value of the Origin-Host AVP in the UDA.
                    </description>
                    <condition>
                        The counter is incremented each time a UDA with successful result
                        (in the Result-Code AVP) has been received on the Sh or Dh interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Sh Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterIdentity</keyTypeName>
                </counter>
                <counter measurementType="cscfShUDRErrorResponses">
                    <measurementName>cscfShUDRErrorResponses</measurementName>
                    <description>
                        The number of times a UDA with failure result (in the Result-Code AVP)
                        has been received on the Sh or Dh interface.
                        The counter is keyed on the the values of the Origin-Host AVP and
                        the Result-Code AVP in the UDA.
                        The format of the key is "Origin-Host AVP,Result-Code AVP".
                    </description>
                    <condition>
                        The counter is incremented each time a UDA with failure result
                        (in the Result-Code AVP) has been received on the Sh or Dh interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Sh Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterIdentity</keyTypeName>
                    <keyTypeName>DiameterResultCode</keyTypeName>
                </counter>
                <counter measurementType="cscfShUDRNoResponses">
                    <measurementName>cscfShUDRNoResponses</measurementName>
                    <description>
                        Number of time-outs while waiting for response to a UDR on the Sh or Dh interface.
                        The counter is keyed on the values of the Destination-Realm AVP and
                        the Destination-Host AVP of the UDR.
                        The format of the key is "Destination-Realm AVP,Destination-Host AVP".
                        If parameter CscfCxDestinationHost is not configured, the format of the
                        key is "Destination-Realm AVP,".
                    </description>
                    <condition>
                        The counter is incremented each time a time-out occurs while waiting for
                        response to a UDR on the Sh or Dh interface.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Sh Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterIdentity</keyTypeName>
                    <keyTypeName>DiameterIdentity</keyTypeName>
                </counter>
                <counter measurementType="cscfShUDRExperimentalResults">
                    <measurementName>cscfShUDRExperimentalResults</measurementName>
                    <description>
                        The number of times a UDA with experimental result (in the Experimental-Result-Code AVP)
                        has been received on the Sh or Dh interface.
                        The counter is keyed on the Origin-Host AVP, the Experimental-Result-Code AVP and
                        the Vendor-Id AVP of the UDR.
                        The format of the key is "Origin-Host AVP,Experimental-Result-Code AVP,Vendor-Id AVP".
                    </description>
                    <condition>
                        The counter is incremented each time a UDA with experimental result
                        (in the Experimental-Result-Code AVP) has been received on the Sh or Dh interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Sh Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterIdentity</keyTypeName>
                    <keyTypeName>DiameterResultCode</keyTypeName>
                    <keyTypeName>DiameterVendorId</keyTypeName>
                </counter>
                <counter measurementType="cscfMlHttpSuccesses">
                    <measurementName>cscfMlHttpSuccesses</measurementName>
                    <description>
                        Number of a successful HTTP/SOAP response is recieved. Keyed on IP address.
                    </description>
                    <condition>
                        The counter is incremented each time a successful
                        HTTP/SOAP response is received (no HTTP or SOAP error).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Ml Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>LRFIPAddress</keyTypeName>
                </counter>
                <counter measurementType="ecscfDialogEventSubscriptionSuccessful">
                    <measurementName>ecscfDialogEventSubscriptionSuccessful</measurementName>
                    <description>
                        Number of times that the successful responses are sent by E-CSCF on initial SIP SUBSCRIBE for dialog event.
                    </description>
                    <condition>
                        Incremented when a 200 OK response is sent out by E-CSCF to initial SUBSCRIBE for dialog event.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="ecscfDialogEventSubscriptionFailure">
                    <measurementName>ecscfDialogEventSubscriptionFailure</measurementName>
                    <description>
                        Number of times that the non-successful (non-200) responses are sent by E-CSCF on initial SIP SUBSCRIBE for dialog event.
                    </description>
                    <condition>
                        Incremented when a negative response is sent out by E-CSCF to initial SUBSCRIBE for dialog event.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                    <keyTypeName>SUM</keyTypeName>
                </counter>
                <counter measurementType="ecscfDialogEventReSubscriptionSuccessful">
                    <measurementName>ecscfDialogEventReSubscriptionSuccessful</measurementName>
                    <description>
                        Number of times that the successful responses are sent by E-CSCF on re-SUBSCRIBE or un-SUBSCRIBE for dialog event.
                    </description>
                    <condition>
                        Incremented when a 200 response is sent out by E-CSCF on re-SUBSCRIBE or un-SUBSCRIBE for dialog event.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="ecscfDialogEventReSubscriptionFailure">
                    <measurementName>ecscfDialogEventReSubscriptionFailure</measurementName>
                    <description>
                        Number of times that the non-successful (non-200) responses are sent by E-CSCF on re-SUBSCRIBE or un-SUBSCRIBE for dialog event.
                    </description>
                    <condition>
                        Incremented when a negative response is sent out by E-CSCF on re-SUBSCRIBE or un-SUBSCRIBE for dialog event.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                    <keyTypeName>SUM</keyTypeName>
                </counter>
                <counter measurementType="ecscfDialogEventNotificationSuccessful">
                    <measurementName>ecscfDialogEventNotificationSuccessful</measurementName>
                    <description>
                        Number of successful NOTIFY procedures on dialog event in E-CSCF.
                    </description>
                    <condition>
                        Incremented on receipt of a SIP 200 OK response for NOTIFY on dialog event.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="ecscfDialogEventNotificationFailure">
                    <measurementName>ecscfDialogEventNotificationFailure</measurementName>
                    <description>
                        Number of non-successful NOTIFY procedures on dialog event in E-CSCF.
                    </description>
                    <condition>
                        Incremented on receipt of a negative response for NOTIFY on dialog event
                        or on NOTIFY response time-out.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                    <keyTypeName>SUM</keyTypeName>
                </counter>
                <counter measurementType="cscfMlHttpErrorResponses">
                    <measurementName>cscfMlHttpErrorResponses</measurementName>
                    <description>
                        The number of times an HTTP error is received. Keyed on IP address and result code.
                    </description>
                    <condition>
                        The counter is incremented each time an HTTP error is received.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Ml Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>LRFIPAddress</keyTypeName>
                    <keyTypeName>StatusCode</keyTypeName>
                </counter>
                <counter measurementType="cscfMlHttpNoResponses">
                    <measurementName>cscfMlHttpNoResponses</measurementName>
                    <description>
                        The number of times time-out occurs while waiting for HTTP response.
                        Keyed on IP address. The counter is used to raise and cease the threshold alarm E-CSCF Receives No LRF Response.
                         The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is incremented each time a time-out occurs
                        while waiting for an HTTP response on the HTTP POST operation.
                        It is also incremented when the HTTP request is not successfully delivered to the LRF.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Ml Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>LRFIPAddress</keyTypeName>
                </counter>
                <counter measurementType="cscfMlSoapErrorResponses">
                    <measurementName>cscfMlSoapErrorResponses</measurementName>
                    <description>
                        The number of times a SOAP error is received. Keyed on IP address and SOAP error.
                    </description>
                    <condition>
                        The counter is incremented each time a SOAP error is received, within an HTTP 500 response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Ml Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>LRFIPAddress</keyTypeName>
                    <keyTypeName>SOAPResultCode</keyTypeName>
                </counter>
                <counter measurementType="cscfLRFInternationalCalledNumber">
                    <measurementName>cscfLRFInternationalCalledNumber</measurementName>
                    <description>
                        For HTTP based Ml interface configured (EcscfMlInterface=HTTP), this counter defines
                        the number of times an international PSAP number (starting with the character "+") is
                        received in a SOAP response (within the HTTP 200OK) from LRF.
                        For SIP based Ml interface configured (EcscfMlInterface=SIP), this counter defines
                        the number of time a request is routed from E-CSCF to PSAP based on an international
                        telephone number.
                    </description>
                    <condition>
                        For HTTP based Ml interface configured (EcscfMlInterface=HTTP), this counter is incremented
                        if the "called" number returned from the LRF is an international number, which means it
                        starts with the character "+".
                        For SIP based Ml interface configured (EcscfMlInterface=SIP), this counter is incremented
                        if a request is routed from E-CSCF to PSAP based on an international telephone number,
                        which is received in the Contact header in 3xx response from LRF.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>LRF Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfLRFNationalCalledNumber">
                    <measurementName>cscfLRFNationalCalledNumber</measurementName>
                    <description>
                        For HTTP based Ml interface configured (EcscfMlInterface=HTTP), this counter defines the
                        number of times a non-international PSAP number (starting with a digit other than the
                        character "+") is received in a SOAP response (within the HTTP 200OK) from LRF.
                        Note: this counter is only used when HTTP based Ml interface is configured.
                    </description>
                    <condition>
                        For HTTP based Ml interface configured (EcscfMlInterface=HTTP), this counter is incremented
                        if the "called" number returned from the LRF is a non-international number, that is, the
                        telephone number starts with a digit other than "+".
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>LRF Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfLRFErrorCalledNumber">
                    <measurementName>cscfLRFErrorCalledNumber</measurementName>
                    <description>
                        For HTTP based Ml interface configured (EcscfMlInterface=HTTP), this counter defines
                        the number of time an invalid PSAP address, including the PSAP address missing (due
                        to error situations in LRF), is received in a SOAP response (within the HTTP 200OK)
                        from LRF.
                        For SIP based Ml interface configured (EcscfMlInterface=SIP), this counter defines the
                        number of time a request is routed from E-CSCF to PSAP based on the default PSAP
                        address configured.
                    </description>
                    <condition>
                        For HTTP based Ml interface configured (EcscfMlInterface=HTTP), this counter is
                        incremented if no telephone number is returned in the "called" parameter and the
                        address can not be used for routing, not a valid format on the SIP URI, or if the
                        "called" parameter contains an empty string.
                        For SIP based Ml interface configured (EcscfMlInterface=SIP), this counter is
                        incremented if a request is routed from E-CSCF to PSAP based on the default PSAP
                        address configured.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>LRF Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfLRFNoTelephoneNumber">
                    <measurementName>cscfLRFNoTelephoneNumber</measurementName>
                    <description>
                        For HTTP based Ml interface configured (EcscfMlInterface=HTTP), this counter defines the number
                        of times a routable SIP address, no telephone number, is returned in the "called" parameter.
                        For SIP based Ml interface configured (EcscfMlInterface=SIP), this counter defines the number
                        of times a request is routed from E-CSCF to PSAP based on a non-telephone number.
                    </description>
                    <condition>
                        For HTTP based Ml interface configured (EcscfMlInterface=HTTP), this counter is incremented
                        if a routable SIP address, no telephone number, is returned in the "called" parameter.
                        For SIP based Ml interface configured (EcscfMlInterface=SIP), the counter is incremented
                        if a request is routed from E-CSCF to PSAP based on a non-telephone number, which is received
                        in the Contact header in 3xx response from LRF.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>LRF Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfFailedEmergencySessionForUnregisteredUser">
                    <measurementName>cscfFailedEmergencySessionForUnregisteredUser</measurementName>
                    <description>The number of times an originating emergency session fails for an unregistered user.</description>
                    <condition>
                        The counter is incremented when an originating emergency session fails for an unregistered user.
                        Either due to a failure response received from the E-CSCF or due
                        to an internal error within the P-CSCF.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfFailedEmergencySessionForRegisteredUser">
                    <measurementName>cscfFailedEmergencySessionForRegisteredUser</measurementName>
                    <description>
                        The number of times an originating emergency session fails for an registered user.
                    </description>
                    <condition>
                        The counter is incremented when an originating emergency session fails for a registered user.
                        Either due to a failure response received from the E-CSCF or due to an internal
                        error within the P-CSCF. The counter is keyed on method name.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfSuccessfulEmergencySessionForUnregisteredUser">
                    <measurementName>cscfSuccessfulEmergencySessionForUnregisteredUser</measurementName>
                    <description>
                        The number of times a successful final response is received at the P-CSCF for INVITE
                        with emergency number in Request-URI for an unregistered user.
                    </description>
                    <condition>
                        The counter is incremented when a successful final response is received
                        at the P-CSCF for an INVITE for an emergency session for an unregistered use.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfSuccessfulEmergencySessionForRegisteredUser">
                    <measurementName>cscfSuccessfulEmergencySessionForRegisteredUser</measurementName>
                    <description>
                        The number of times an originating emergency session succeeds for a registered user.
                    </description>
                    <condition>
                        The counter is incremented when an originating emergency session succeeds
                        for a registered user, that is, when a successful final response (2xx)
                        is received for the emergency SIP INVITE.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="pcscfExpiredEmergencySessions">
                    <measurementName>pcscfExpiredEmergencySessions</measurementName>
                    <description>
                        The number of times an emergency call expires.
                    </description>
                    <condition>
                        The counter is incremented at expiration of an emergency call (session timer).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfUnallocatedRoutingAttemptSuccess">
                    <measurementName>cscfUnallocatedRoutingAttemptSuccess</measurementName>
                    <description>
                        Counts the number of times an incoming request is identified as an unallocated user.
                    </description>
                    <condition>
                        If an identification is preformed at the incoming request is identified as an unallocated user.
                        When the BGCF returns a successful response, when serving the terminating side.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfFailureCauseCode">
                    <measurementName>cscfFailureCauseCode</measurementName>
                    <description>
                        The number of incoming requests for an unknown user that resulted in an HSS failure to return a wildcard PSI (W-PSI).
                        An unknown user is matched in the operator allocated number range or the operator allocated domain range.
                        A mismatch between the CSCF and the HSS configurations resulted in a HSS failure to return a wildcard PSI (W-PSI) for the request.
                        The counter is keyed with 1000 cause code for this failure.
                    </description>
                    <condition>
                        An incoming request for an unknown user resulted in an HSS failure to return a wildcard PSI (W-PSI).
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterResultCode</keyTypeName>
                </counter>
                <counter measurementType="cscfOrigASInvocationFailureSessionContinued">
                    <measurementName>cscfOrigASInvocationFailureSessionContinued</measurementName>
                    <description>
                        Number of times the default handling results in a session continued behavior on the originating side when the AS is invoked.
                        The counter is keyed on the URI of the AS, together with the status code received from the AS.
                        The AS URI includes domain name and may include port of the AS. The format of the key is "AS URI,status code".
                    </description>
                    <condition>
                        Incremented when session continued behavior is invoked when invoking an application server.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainAndPort</keyTypeName>
                    <keyTypeName>StatusCode</keyTypeName>
                </counter>
                <counter measurementType="cscfTermASInvocationFailureSessionContinued">
                    <measurementName>cscfTermASInvocationFailureSessionContinued</measurementName>
                    <description>
                        Number of times the default handling results in a session continued behavior on the terminating side when the AS is invoked.
                        The counter is keyed on the URI of the AS, together with the status code received from the AS.
                        The AS URI includes domain name and may include port of the AS. The format of the key is "AS URI,status code".
                    </description>
                    <condition>
                        Incremented when session continued behavior is invoked when invoking an application server.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainAndPort</keyTypeName>
                    <keyTypeName>StatusCode</keyTypeName>
                </counter>
                <counter measurementType="cscfOrigASInvocationFailureSessionTerminated">
                    <measurementName>cscfOrigASInvocationFailureSessionTerminated</measurementName>
                    <description>
                        Number of times the default handling results in a session terminated behavior on the originating side when the AS is invoked.
                        The counter is keyed on the URI of the AS, together with the status code sent back by CSCF.
                        The AS URI includes domain name and may include port of the AS. The format of the key is "AS URI,status code".
                    </description>
                    <condition>
                        Incremented when session terminated behavior is invoked when invoking an application server.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainAndPort</keyTypeName>
                    <keyTypeName>StatusCode</keyTypeName>
                </counter>
                <counter measurementType="cscfTermASInvocationFailureSessionTerminated">
                    <measurementName>cscfTermASInvocationFailureSessionTerminated</measurementName>
                    <description>
                        Number of times the default handling results in a session terminated behavior on terminating side when the AS is invoked.
                        The counter is keyed on the URI of the AS, together with the status code sent back by CSCF.
                        The AS URI includes domain name and may include port of the AS. The format of the key is "AS URI,status code".
                    </description>
                    <condition>
                        Incremented when session terminated behavior is invoked when invoking an application server.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainAndPort</keyTypeName>
                    <keyTypeName>StatusCode</keyTypeName>
                </counter>
                <counter measurementType="cscfCx3gppMAR">
                    <measurementName>cscfCx3gppMAR</measurementName>
                    <description>
                        Counts the number of attempted MAR messages.
                    </description>
                    <condition>
                        Attempted sending of a MAR
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- outputUnit = What is counted -->
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <!-- Defined the cardinality of keyed counters -->
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCx3gppMAA">
                    <measurementName>cscfCx3gppMAA</measurementName>
                    <description>
                        Counts the number of received MAA messages, keyed on the value of the Result-Code AVP or,
                        in case of an Experimental-Result AVP, keyed on the value of the Experimental-Result-Code AVP.
                    </description>
                    <condition>
                        Reception of a MAA.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- outputUnit = What is counted -->
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <!-- Defined the cardinality of keyed counters -->
                    <cardinality>7</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterResultCode</keyTypeName>
                </counter>
                <counter measurementType="cscfAuthAkaSuccessful">
                    <measurementName>cscfAuthAkaSuccessful</measurementName>
                    <description>
                        The counter represents the amount of successful IMS-AKA authentications
                        (the response from the UE matches the expected response).
                    </description>
                    <condition>Successful IMS-AKA authentications.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM
                             type=CC always has subtype= SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- outputUnit = What is counted -->
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>USIM-AKA Specific Counters</cpiHeading>
                    <!-- Defined the cardinality of keyed counters -->
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfAuthAkaFailures">
                    <measurementName>cscfAuthAkaFailures</measurementName>
                    <description>
                        A counter representing the amount of failed IMS-AKA authentications(the response
                        from the UE does not match the expected response).
                    </description>
                    <condition>Failed IMS-AKA authentications.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM
                             type=CC always has subtype= SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- outputUnit = What is counted -->
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>USIM-AKA Specific Counters</cpiHeading>
                    <!-- Defined the cardinality of keyed counters -->
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfRejectedUnprotectedMessages">
                    <measurementName>cscfRejectedUnprotectedMessages</measurementName>
                    <description>
                        A counter representing the amount of SIP messages that unexpectedly arrived at the unprotected port at P-CSCF and gets rejected during the granularity period.
                        This counter is keyed only on IP addresses in the cscfSipPMKey parameter.
                        The counter is used to raise and cease the threshold alarm P-CSCF Rejected Message On Unprotected Server Port.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>SIP messages that unexpectedly arrives at the unprotected port at P-CSCF.</condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- outputUnit = What is counted -->
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>USIM-AKA Specific Counters</cpiHeading>
                    <!-- Defined the cardinality of keyed counters -->
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="pcscfPaniAssertionFailedDefaultUsed">
                    <measurementName>pcscfPaniAssertionFailedDefaultUsed</measurementName>
                    <description>
                        Keeps track of the number of PANI assertion results where a PANI is replaced or added using default PANI.
                        This counter is keyed with the type of SIP message that PANI Header Assertion has applied on.
                    </description>
                    <condition>
                        This counter is stepped every time PANI assertion results in that a PANI is replaced or added using default PANI.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>PANI Assertion Counters</cpiHeading>
                    <cardinality>6</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPMethod</keyTypeName>
                </counter>
                <counter measurementType="pcscfPaniAssertionFailedEmptyUsed">
                    <measurementName>pcscfPaniAssertionFailedEmptyUsed</measurementName>
                    <description>
                        Keeps track of the number of PANI assertion results where no PANI is sent,
                        due to reasons that the IP address is not in the table or the default PANI is empty.
                        This counter is keyed with the type of SIP message that PANI Header Assertion has applied on.
                    </description>
                    <condition>
                        This counter is stepped every time PANI assertion resulted in no PANI is sent.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>PANI Assertion Counters</cpiHeading>
                    <cardinality>6</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPMethod</keyTypeName>
                </counter>
                <counter measurementType="cscfThrottledHssRequests">
                    <measurementName>cscfThrottledHssRequests</measurementName>
                    <description>
                        This counter defines the number of times that a request to HSS over the Cx/Dx interface was throttled due to HSS overload.
                        This counter is keyed on the HSS Destination Host and HSS Destination Realm and SUM.
                        The counter is used to raise and cease the threshold alarm CSCF Throttling of Diameter on Cx/Dx Interface Initiated.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        Incremented when an HSS request is not sent due to throttling.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Cx Interface Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>HssDestinationId</keyTypeName>
                </counter>
                <counter measurementType="eatfSuccessfulInitialEmergencySessionEstablishment">
                    <measurementName>eatfSuccessfulInitialEmergencySessionEstablishment</measurementName>
                    <description>
                        The number of successful Initial Emergency SR-VCC Call Establishment in EATF.
                    </description>
                    <condition>
                        Incremented by 1 when EATF receives an ACK of an initial emergency SR-VCC call establishment from the PS UE.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="eatfFailedInitialEmergencySessionEstablishment">
                    <measurementName>eatfFailedInitialEmergencySessionEstablishment</measurementName>
                    <description>
                        The number of failed Initial Emergency SR-VCC Call Establishment in EATF. .This counter is keyed on the negative response code (3xx-6xx) and SUM.
                        The SUM key represents the total number of failed Initial Emergency SR-VCC Call Establishment in EATF.
                    </description>
                    <condition>
                        Incremented by 1 when EATF responds to an initial emergency SR-VCC call establishment with a negative response (3xx-6xx).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="eatfSuccessfulEmergencySessionAccessTransfer">
                    <measurementName>eatfSuccessfulEmergencySessionAccessTransfer</measurementName>
                    <description>
                        The number of successful Emergency SR-VCC Access Transfer in EATF.
                    </description>
                    <condition>
                        Incremented by 1 when EATF receives an ACK of an emergency SR-VCC access transfer request from the CS UE.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="eatfFailedEmergencySessionAccessTransfer">
                    <measurementName>eatfFailedEmergencySessionAccessTransfer</measurementName>
                    <description>
                        The number of failed Emergency SR-VCC Access Transfer in EATF. This counter is keyed on the negative response code (3xx-6xx) and SUM.
                        The SUM key represent the total number of failed Emergency SR-VCC Access Transfer in EATF.
                    </description>
                    <condition>a
                        Incremented by 1 when EATF responds to an emergency SR-VCC access transfer request with a negative response (3xx-6xx).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="eatfSuccessfulEmergencySessionPsFallback">
                    <measurementName>eatfSuccessfulEmergencySessionPsFallback</measurementName>
                    <description>
                        The number of successful Emergency SR-VCC PS Fallback in EATF.
                    </description>
                    <condition>
                        Incremented by 1 when EATF receives an ACK of an Emergency SRVCC PS Fallback request from the PS UE.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="eatfFailedEmergencySessionPsFallback">
                    <measurementName>eatfFailedEmergencySessionPsFallback</measurementName>
                    <description>
                        The number of failed Emergency SR-VCC PS Fallback in EATF. This counter is keyed on the negative response code (3xx-6xx) and SUM.
                        The SUM key represents the total number of failed Emergency SR-VCC PS Fallback in EATF.
                    </description>
                    <condition>
                        Incremented by 1 when EATF responds to an Emergency SR-VCC PS Fallback request with a negative response (3xx-6xx).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="eatfConcurrentSessions">
                    <measurementName>eatfConcurrentSessions</measurementName>
                    <description>
                        The mean number of concurrent Emergency SR-VCC sessions in EATF during a measurement granularity period.
                    </description>
                    <condition>
                        This counter is incremented at successful establishment of an emergency SRVCC session.
                        This counter is decremented at successful termination of an emergency SRVCC session or termination caused by session expiry.
                        This counter sampling interval is controlled by the configuration parameter cscfGaugeInterval (default 2 minutes).
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MEAN</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>float</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="eatfPeakConcurrentSessions">
                    <measurementName>eatfPeakConcurrentSessions</measurementName>
                    <description>
                        The maximum numberof concurrent Emergency SR-VCC sessions in EATF during a measurement granularity period.
                    </description>
                    <condition>
                        This counter is incremented at successful establishment of an emergency SRVCC session.
                        This counter is decremented at successful termination of an emergency SRVCC session or termination caused by session expiry.
                        This counter sampling interval is controlled by the configuration parameter cscfGaugeInterval (default 2 minutes).
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MAX</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <generation>IMS</generation>
            </group>
            <moc_level>
                0
            </moc_level>
        </moc>

        <moc name="Cscf2">
            <description>
                The default Cscf2 xml file location is /opt/telorb/axe/tsp/NM/PMF/reporterLogs/Cscf2
                and the Cscf2 counter group is Cscf2 as used in the xml file name.
            </description>
            <switchingTechnology>
                Packet Switched
            </switchingTechnology>

            <imsPmConfig>
                <nPMFConfig>
                    <pmApplication>
                        <reportingRootDirectory>/opt/telorb/axe/tsp/NM/PMF/reporterLogs</reportingRootDirectory>
                        <enable>true</enable>
                        <maxMonitorNr/>
                        <measReaderNr/>
                        <timeZone>utc</timeZone>
                        <maxPmdbMemSize/>
                        <maxPmdbCpuLoad/>
                        <maxAlarmPerMeasType/>
                        <monitorGroup>
                            <name>Cscf</name>
                            <measurementJob>
                                <name>Cscf2</name>
                                <enabled>true</enabled>
                                <priority>4</priority>
                                <granularityPeriod>300</granularityPeriod>
                                <notifyMOEvents>true</notifyMOEvents>
                                <reportingDirectory>Cscf2</reportingDirectory>
                                <notifyFileReady>false</notifyFileReady>
                                <reportingFormat>DTD</reportingFormat>
                                <measurementJobReader>
                                    <name>scscfAccumulatedOriginatingSessionEstablishmentTime</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfAccumulatedTerminatingSessionEstablishmentTime</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfAccumulatedOriginatingCallTime</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfAccumulatedTerminatingCallTime</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingSessionExpired</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingSessionExpired</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSipErrorResponse</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeOriginatingInviteSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeOriginatingInviteFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeTerminatingInviteSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeTerminatingInviteFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteSuccessfulEstablishedNoAs</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteSuccessfulEstablishedNoAs</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteSuccessfulEstablishedToAs</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteSuccessfulEstablishedToAs</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteNoAsAnswered</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteNoAsAnswered</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteToAsAnswered</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteToAsAnswered</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteCancelledBeforeEarlyDialog</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteCancelledBeforeEarlyDialog</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteCancelledInEarlyDialog</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteCancelledInEarlyDialog</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteNoAsFailed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteNoAsFailed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteToAsFailed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteToAsFailed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeOriginatingSubscribeSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeOriginatingSubscribeFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeTerminatingSubscribeSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeTerminatingSubscribeFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeOriginatingReSubscribeSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeOriginatingReSubscribeFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeTerminatingReSubscribeSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfUeTerminatingReSubscribeFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfOriginatingInviteNoAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTerminatingInviteNoAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingInviteNoAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingInviteNoAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfOriginatingInviteToAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTerminatingInviteToAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfOriginatingInviteFromAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTerminatingInviteFromAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfOriginatingInviteFromAsToAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfTerminatingInviteFromAsToAsAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icmpSummaryInMessages</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icmpStatsDestinationUnreachableIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icmpStatsParameterProblemIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfNBASuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfNBAFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfNbaChallengeFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfGibaSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfGibaFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSipDigestAuthenticationSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfSipDigestAuthenticationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfBlacklistedAuthenticationRequests</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingMessageSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOriginatingMessageFailed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingMessageSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTerminatingMessageFailed</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfGnpEnumResponseNpdi</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfGnpEnumResponseRn</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfGnpEnumResponseRnNpdi</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfGnpEnumResponseMalformatted</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfGnpSIPRequest</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCicEnumResponseCic</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCicEnumResponseMalformatted</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfCicRequest</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfTransitSessionAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfTransitSessionFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfFailedEmergencySessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfSuccessfulEmergencySessions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfRegEventNetworkDeregisteredNotificationsSendSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfRegEventNetworkDeregisteredNotificationsSendFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfNotifySuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfNotifyFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfAttemptedRegistrationsPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfAcceptedRegistrationsPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfAttemptedReregistrationsPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfAcceptedReregistrationsPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfAttemptedDeregistrationsPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfAcceptedDeregistrationsPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfThirdPartyRegistrationSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfThirdPartyRegistrationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfThirdPartyRegistrationFailureSessionTerminated</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfRegistrationEventShortenedNotificationsSendSuccessful</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfRegistrationEventShortenedNotificationsSendFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfNoMatchingScscf</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfRegistrationsFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfReregistrationsFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfDeregistrationsFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfRegistrationsFromVisitingUsersFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>pcscfRegistrationsFromVisitingUsersSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfRegistrationsFromVisitingDomainsSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfRegistrationsFromVisitingDomainsFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfInviteFromOtherDomainSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfInviteFromOtherDomainFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfInviteToOtherDomainSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>icscfInviteToOtherDomainFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfInviteFromOtherDomainSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfInviteFromOtherDomainFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfInviteToOtherDomainSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfInviteToOtherDomainFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfConcurrentRegisteredUserProfiles</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfConcurrentUnregisteredUserProfiles</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfPeakConcurrentRegisteredUserProfiles</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfPeakConcurrentUnregisteredUserProfiles</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfInviteCommunicationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfGetsPriorityInviteEstablishedSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfGetsPriorityInviteFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfEmergencyRegistrationsSuccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfEmergencyRegistrationsFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfNonConfEosCase</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>cscfMaxEosAttemptsExceeded</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfPcscfRestorationAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfPcscfRestorationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfSipMessageBasedPcscfRestorationAttempts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfSipMessageBasedPcscfRestorationFailure</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                 <measurementJobReader>
                                    <name>scscfAttemptedRegistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfSuccessfulRegistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfFailedRegistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfAttemptedReregistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfSuccessfulReregistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfFailedReregistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfAttemptedDeregistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfSuccessfulDeregistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfFailedDeregistrationPerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigAttemptedInvitePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigSuccessfulEstablishedInvitePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigAnsweredInvitePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigFailedInvitePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermAttemptedInvitePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermSuccessfulEstablishedInvitePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermAnsweredInvitePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermFailedInvitePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigAccumulatedCallTimePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermAccumulatedCallTimePerAccess</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigAttemptedSessionPerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigSuccessfulEstablishedSessionPerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigAnsweredSessionPerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigFailedSessionPerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfOrigAccumulatedCallTimePerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermAttemptedSessionPerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermSuccessfulEstablishedSessionPerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermAnsweredSessionPerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermFailedSessionPerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfTermAccumulatedCallTimePerMedia</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>cscfActiveUsersPerProfile</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfUserRedistributionNotRegistered</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>scscfUserRedistributionRegistered</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                            </measurementJob>
                            <thresholdMonitor>
                                <name>Cscf2ThresholdMonitor</name>
                                <enabled>true</enabled>
                                <granularityPeriod>300</granularityPeriod>
                                <ThresholdMonitorReader>
                                    <name>cscfGnpEnumResponseMalformatted</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>5</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>23</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>ProcessingError</type>
                                    <specificProblem>CSCF ENUM Responses Resulting In Malformatted RN</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf2</alarmObjectClass>
                                    <additionalInfo>cscfGnpEnumResponse. ENUM provisioning errors are resulting in malformatted ENUM responses towards the CSCF. Calls to ported numbers may not be routed properly.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfCicEnumResponseMalformatted</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>5</armLevel>
                                        <disarmLevel>1</disarmLevel>
                                    </majorLevel>
                                    <faultId>21</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>ProcessingError</type>
                                    <specificProblem>CSCF ENUM Responses Resulting In Malformatted CIC</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf2</alarmObjectClass>
                                    <additionalInfo>cscfCicEnumResponseMalformatted. ENUM provisioning errors are resulting in malformatted ENUM responses towards the CSCF. Calls involving CIC routing may not be routed properly.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>cscfNonConfEosCase</name>
                                    <enabled>true</enabled>
                                    <majorLevel>
                                        <armLevel>0</armLevel>
                                        <disarmLevel>0</disarmLevel>
                                    </majorLevel>
                                    <faultId>30</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>ProcessingError</type>
                                    <specificProblem>CSCF, Reference to non-existing End-Of-Selection Case Detected</specificProblem>
                                    <probableCause>351</probableCause>
                                    <alarmObjectClass>Cscf2</alarmObjectClass>
                                    <additionalInfo>cscfNonConfEosCase. The Eos case indicated by the counter key does not exist.</additionalInfo>
                                </ThresholdMonitorReader>
                            </thresholdMonitor>
                        </monitorGroup>
                    </pmApplication>
                </nPMFConfig>
            </imsPmConfig>

            <group>
                <!-- ============================  -->
                <!-- counters without keys         -->
                <!-- ============================  -->
                <description/>
                <!--**FIXME**index sequence="1" name="Cscf2" type="defaultRDNtype"/-->
                <!--**FIXME**index sequence="2" name="Source" type="systemRDNtype"/-->
                <!--**FIXME**index sequence="2" name="Source" type="processorRDNtype"/-->

                <counter measurementType="scscfAccumulatedOriginatingSessionEstablishmentTime">
                    <measurementName>scscfAccumulatedOriginatingSessionEstablishmentTime</measurementName>
                    <description>
                        The accumulated duration between receiving SIP INVITE in originating S-CSCF and transmitting the first early dialog response (typically 180 Ringing) or 200OK if not early dialog response was received.
                    </description>
                    <condition>
                        Incremented with amount of ms between receiving INVITE and sending the first early dialog response or 200OK back by S-CSCF on originating side.
                        When transmitting multiple responses due to forking, it is the first response only that triggers the accumulation.
                        This counter is used for calculating average session establishment time.
                        In order to obtain this average the value of this counter is divided by the sum of scscfOriginatingInviteSuccessfulEstablishedNoAs and scscfOriginatingInviteSuccessfulEstablishedToAs.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>ms</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfAccumulatedTerminatingSessionEstablishmentTime">
                    <measurementName>scscfAccumulatedTerminatingSessionEstablishmentTime</measurementName>
                    <description>
                        The accumulated duration between receiving SIP INVITE in terminating S-CSCF and transmitting the first early dialog response (typically 180 Ringing) or 200OK if not early dialog response was received.
                    </description>
                    <condition>
                        Incremented with amount of ms between receiving INVITE and sending the first early dialog response or 200OK back by S-CSCF on terminating side.
                        When transmitting multiple responses due to forking, it is the first response only that triggers the accumulation.
                        This counter is used for calculating average session establishment time.
                        In order to obtain this average the value of this counter is divided by the sum of scscfTerminatingInviteSuccessfulEstablishedNoAs and scscfTerminatingInviteSuccessfulEstablishedToAs.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>ms</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfAccumulatedOriginatingCallTime">
                    <measurementName>scscfAccumulatedOriginatingCallTime</measurementName>
                    <description>
                        The accumulated session time in seconds on originating side.
                        The duration is between receiving 200OK (INVITE) and receiving BYE in S-CSCF.
                    </description>
                    <condition>
                        Incremented on originating S-CSCF with amount of seconds upon receiving BYE.
                        If authentication is active for BYE request then it is the BYE with valid challenge response that triggers this counter.
                        The counter is not incremented for expired sessions.
                        The counter is not incremented for the cases where it is S-CSCF itself that generates BYE (for example online charging and administrative locking).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>sec</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfAccumulatedTerminatingCallTime">
                    <measurementName>scscfAccumulatedTerminatingCallTime</measurementName>
                    <description>
                        The accumulated session time in seconds on terminating side.
                        The duration is between receiving 200OK (INVITE) and receiving BYE in S-CSCF.
                    </description>
                    <condition>
                        Incremented on terminating S-CSCF with amount of seconds upon receiving BYE.
                        If authentication is active for BYE request then it is the BYE with valid challenge response that triggers this counter.
                        The counter is not incremented for expired sessions.
                        The counter is not incremented for the cases where it is S-CSCF itself that generates BYE (for example online charging and administrative locking).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit>sec</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfOriginatingSessionExpired">
                    <measurementName>scscfOriginatingSessionExpired</measurementName>
                    <description>
                        Number of sessions that have been removed by S-CSCF due to session expiry on originating side.
                    </description>
                    <condition>
                        Incremented when a session is removed due to time expired on originating side.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfTerminatingSessionExpired">
                    <measurementName>scscfTerminatingSessionExpired</measurementName>
                    <description>
                        Number of sessions that have been removed by S-CSCF due to session expiry on terminating side.
                    </description>
                    <condition>
                        Incremented when a session is removed due to time expired on terminating side.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfSipErrorResponse">
                    <measurementName>cscfSipErrorResponse</measurementName>
                    <description>
                        Number of SIP error responses generated by CSCF with generated hexadecimal error code.
                        The counter is keyed with the SIP Method, SIP response code and hexadecimal error code separated by a comma, for example:
                        SIPMethod=INVITE, SIPResponseCode=408, HexErrorCode=020311913.
                    </description>
                    <condition>
                        Incremented when CSCF generates a SIP failure response with a hexadecimal error code.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>100</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPMethod</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                    <keyTypeName>HexErrorCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeOriginatingInviteSuccess">
                    <measurementName>cscfUeOriginatingInviteSuccess</measurementName>
                    <description>
                        Number of times successful final responses to initial SIP INVITE received by the P-CSCF on the originating side.
                    </description>
                    <condition>
                        Incremented when a final 2xx class SIP INVITE response is received on the Mw interface.
                        The counter is incremented in the CSCF node that executes the originating P-CSCF logic.
                        The counter is keyed on the feature tag in the SIP Request message (Accept-Contact header).
                        If there are more feature tags in the message, the CSCF will increment the counter once per feature tag.
                        If there is no feature tag in the message, the CSCF will increment the counter for key "DEFAULT".
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total success.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>FeatureTag</keyTypeName>
                </counter>
                <counter measurementType="cscfUeOriginatingInviteFailure">
                    <measurementName>cscfUeOriginatingInviteFailure</measurementName>
                    <description>
                        Number of times non successful responses to initial SIP INVITE received or generated by the P-CSCF on the originating side.
                    </description>
                    <condition>
                        Incremented for three types of events causes the counter change:
                        - A 4xx-6xx class SIP INVITE response is received on the Mw interface
                        - A 4xx-6xx class SIP INVITE response is generated for sending on the Gm interface as a result of a SIP INVITE request error
                        - Transaction timeout at waiting for the response occurs Responses with code range 3xx,
                        redirection of call, as well as responses with code 407, "Proxy authentication required",
                        part of the authorization procedure will not be counted as failures.
                        The counter is incremented in the CSCF node that executes the originating P-CSCF logic.
                        The counter is keyed on the feature tag in the SIP Request message (Accept-Contact header).
                        If there are more feature tags in the message, the CSCF will increment the counter once per feature tag.
                        If there is no feature tag in the message, the CSCF will increment the counter for key "DEFAULT".
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total failure.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>FeatureTag</keyTypeName>
                </counter>
                <counter measurementType="cscfUeTerminatingInviteSuccess">
                    <measurementName>cscfUeTerminatingInviteSuccess</measurementName>
                    <description>
                        Number of times successful final responses to initial SIP INVITE received by the P-CSCF on the terminating side.
                    </description>
                    <condition>
                        Incremented when a final 2xx class SIP INVITE response is received on the Gm interface.
                        The counter is incremented in the CSCF node that executes the terminating P-CSCF logic.
                        The counter is keyed on the feature tag in the SIP Request message (Accept-Contact header).
                        If there are more feature tags in the message, the CSCF will increment the counter once per feature tag.
                        If there is no feature tag in the message, the CSCF will increment the counter for key "DEFAULT".
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total success.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>FeatureTag</keyTypeName>
                </counter>
                <counter measurementType="cscfUeTerminatingInviteFailure">
                    <measurementName>cscfUeTerminatingInviteFailure</measurementName>
                    <description>
                        Number of times non successful responses to initial SIP INVITE received or generated by the P-CSCF on the terminating side.
                    </description>
                    <condition>
                        Incremented for three types of events causes the counter change:
                        - A 4xx-6xx class SIP INVITE response is received on the Gm interface
                        - A 4xx-6xx class SIP INVITE response is generated for sending on the Mw interface as a result of a SIP INVITE request error
                        - Transaction timeout at waiting for the response occurs Responses with code range 3xx,
                        redirection of call, as well as responses with code 407, "Proxy authentication required",
                        part of the authorization procedure will not be counted as failures.
                        The counter is incremented in the CSCF node that executes the terminating P-CSCF logic.
                        The counter is keyed on the feature tag in the SIP Request message (Accept-Contact header).
                        If there are more feature tags in the message, the CSCF will increment the counter once per feature tag.
                        If there is no feature tag in the message, the CSCF will increment the counter for key "DEFAULT".
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total failure.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>FeatureTag</keyTypeName>
                </counter>
                <counter measurementType="scscfOriginatingInviteSuccessfulEstablishedNoAs">
                    <measurementName>scscfOriginatingInviteSuccessfulEstablishedNoAs</measurementName>
                    <description>
                        Number of times the first early dialog response (typically 180 Ringing) to initial SIP INVITE without AS invocations is transmitted by originating S-CSCF on Mw.
                        The counter is stepped on 2xx response if no early dialog response was received.
                    </description>
                    <condition>
                        Incremented when the first early dialog response to SIP INVITE is transmitted by S-CSCF or when 2xx response is transmitted if no early dialog response was received.
                        When transmitting multiple responses due to forking, it is the first response only that is counted.
                        The counter is keyed on transmitted response code.
                        Extra key 'sum' represents the total.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>3</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTerminatingInviteSuccessfulEstablishedNoAs">
                    <measurementName>scscfTerminatingInviteSuccessfulEstablishedNoAs</measurementName>
                    <description>
                        Number of times the first early dialog response (typically 180 Ringing) to initial SIP INVITE without AS invocations is transmitted by terminating S-CSCF.
                        The counter is stepped on 2xx response if no early dialog response was received.
                    </description>
                    <condition>
                        Incremented when the first early dialog response to SIP INVITE is transmitted by S-CSCF or when 2xx response is transmitted if no early dialog response was received.
                        When transmitting multiple responses due to forking, it is the first response only that is counted.
                        The counter is keyed on transmitted response code.
                        Extra key 'sum' represents the total.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>3</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfOriginatingInviteSuccessfulEstablishedToAs">
                    <measurementName>scscfOriginatingInviteSuccessfulEstablishedToAs</measurementName>
                    <description>
                        Number of times the first early dialog response (typically 180 Ringing) to initial SIP INVITE with one or more AS invocations is transmitted by S-CSCF on Mw.
                        The counter is stepped on 2xx response if no early dialog response was received.
                    </description>
                    <condition>
                        Incremented when the first early dialog response to SIP INVITE is transmitted by S-CSCF or when 2xx response is transmitted if no early dialog response was received.
                        When transmitting multiple responses due to forking, it is the first response only that is counted.
                        The counter is keyed on transmitted response code.
                        Extra key 'sum' represents the total.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>3</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTerminatingInviteSuccessfulEstablishedToAs">
                    <measurementName>scscfTerminatingInviteSuccessfulEstablishedToAs</measurementName>
                    <description>
                        Number of times the first early dialog response (typically 180 Ringing) to initial SIP INVITE with one or more AS invocations is transmitted by terminating S-CSCF.
                        The counter is stepped on 2xx response if no early dialog response was received.
                    </description>
                    <condition>
                        Incremented when the first early dialog response to SIP INVITE is transmitted by S-CSCF or when 2xx response is transmitted if no early dialog response was received.
                        When transmitting multiple responses due to forking, it is the first response only that is counted.
                        The counter is keyed on transmitted response code.
                        Extra key 'sum' represents the total.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>3</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfOriginatingInviteNoAsAnswered">
                    <measurementName>scscfOriginatingInviteNoAsAnswered</measurementName>
                    <description>
                        The number of answered session establishments in originating S-CSCF, no AS invocations.
                    </description>
                    <condition>
                        Incremented when the first final 2xx response to initial SIP INVITE is transmitted by originating S-CSCF on Mw.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfTerminatingInviteNoAsAnswered">
                    <measurementName>scscfTerminatingInviteNoAsAnswered</measurementName>
                    <description>
                        The number of answered session establishments in terminating S-CSCF, no AS invocations.
                    </description>
                    <condition>
                        Incremented when the first final 2xx response to initial SIP INVITE is transmitted by terminating S-CSCF.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfOriginatingInviteToAsAnswered">
                    <measurementName>scscfOriginatingInviteToAsAnswered</measurementName>
                    <description>
                        The number of answered session establishments in originating S-CSCF, with one or more AS invocations.
                    </description>
                    <condition>
                        Incremented when the first final 2xx response to initial SIP INVITE is transmitted by originating S-CSCF on Mw.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfTerminatingInviteToAsAnswered">
                    <measurementName>scscfTerminatingInviteToAsAnswered</measurementName>
                    <description>
                        The number of answered session establishments in terminating S-CSCF, with one or more AS invocations.
                    </description>
                    <condition>
                        Incremented when the first final 2xx response to initial SIP INVITE is transmitted by terminating S-CSCF.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfOriginatingInviteCancelledBeforeEarlyDialog">
                    <measurementName>scscfOriginatingInviteCancelledBeforeEarlyDialog</measurementName>
                    <description>
                        Number of cancelled session establishments on originating S-CSCF prior to transmitting early dialog response.
                    </description>
                    <condition>
                        Incremented when originating S-CSCF receives a 487 Request Terminated response that followed a CANCEL request.
                        This counter is only incremented if CANCEL is received.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfTerminatingInviteCancelledBeforeEarlyDialog">
                    <measurementName>scscfTerminatingInviteCancelledBeforeEarlyDialog</measurementName>
                    <description>
                        Number of cancelled session establishments on terminating S-CSCF prior to transmitting early dialog response.
                    </description>
                    <condition>
                        Incremented when terminating S-CSCF receives a 487 Request Terminated response that followed a CANCEL request.
                        This counter is only incremented if CANCEL is received.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfOriginatingInviteCancelledInEarlyDialog">
                    <measurementName>scscfOriginatingInviteCancelledInEarlyDialog</measurementName>
                    <description>
                        Number of cancelled session establishments on originating S-CSCF after establishing the early dialog.
                    </description>
                    <condition>
                        Incremented when originating S-CSCF receives a 487 Request Terminated response that followed a CANCEL request.
                        This counter is only incremented if CANCEL is received.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfTerminatingInviteCancelledInEarlyDialog">
                    <measurementName>scscfTerminatingInviteCancelledInEarlyDialog</measurementName>
                    <description>
                        Number of cancelled session establishments on terminating S-CSCF after establishing the early dialog.
                    </description>
                    <condition>
                        Incremented when terminating S-CSCF receives a 487 Request Terminated response that followed a CANCEL request.
                        This counter is only incremented if CANCEL is received.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfOriginatingInviteNoAsFailed">
                    <measurementName>scscfOriginatingInviteNoAsFailed</measurementName>
                    <description>
                        Number of times non-successful responses to initial SIP INVITE without AS invocations transmitted by S-CSCF on Mw on the originating side.
                    </description>
                    <condition>
                        This counter is stepped by originating S-CSCF when the response is transmitted on Mw.
                        Incremented for these types of events:
                        - A 3xx-6xx class SIP INVITE response is sent back on Mw interface, except 407 Proxy authentication required;
                        - Transaction timeout at waiting for the response occurs;
                        The counter is keyed on the response code transmitted by S-CSCF.
                        The S-CSCF will also always increment the counter once with the key "sum" in order to keep track of total number of failures.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTerminatingInviteNoAsFailed">
                    <measurementName>scscfTerminatingInviteNoAsFailed</measurementName>
                    <description>
                        Number of times non-successful responses to initial SIP INVITE without AS invocations are transmitted by S-CSCF on the terminating side.
                    </description>
                    <condition>
                        This counter is stepped by terminating S-CSCF when the response is transmitted.
                        Incremented for these types of events:
                        - A 3xx-6xx class SIP INVITE response is sent back by S-CSCF;
                        - Transaction timeout at waiting for the response occurs;
                        The counter is keyed on the response code sent back by S-CSCF.
                        The S-CSCF will also always increment the counter once with the key "sum" in order to keep track of total number of failures.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfOriginatingInviteToAsFailed">
                    <measurementName>scscfOriginatingInviteToAsFailed</measurementName>
                    <description>
                        Number of times non-successful responses to initial SIP INVITE with one or more AS invocations are transmitted by S-CSCF on Mw on the originating side.
                    </description>
                    <condition>
                        This counter is stepped by originating S-CSCF when the response is transmitted on Mw.
                        Incremented for these types of events:
                        - Transmission of 3xx-6xx class SIP INVITE response on Mw interface, except 407 Proxy authentication required;
                        - Transaction timeout at waiting for the response occurs;
                        The counter is keyed on the response code transmitted by S-CSCF.
                        The S-CSCF will also always increment the counter once with the key "sum" in order to keep track of total number of failures.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTerminatingInviteToAsFailed">
                    <measurementName>scscfTerminatingInviteToAsFailed</measurementName>
                    <description>
                        Number of times non-successful responses to initial SIP INVITE with one or more AS invocations are transmitted by S-CSCF on the terminating side.
                    </description>
                    <condition>
                        This counter is stepped by terminating S-CSCF when the response is transmitted.
                        Incremented for these types of events:
                        - A 3xx-6xx class SIP INVITE response is sent back by S-CSCF;
                        - Transaction timeout at waiting for the response occurs;
                        The counter is keyed on the response code transmitted by S-CSCF.
                        The S-CSCF will also always increment the counter once with the key "sum" in order to keep track of total number of failures.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeOriginatingSubscribeSuccess">
                    <measurementName>cscfUeOriginatingSubscribeSuccess</measurementName>
                    <description>
                        Number of times successful final responses to initial SIP SUBSCRIBE received by the P-CSCF on the originating side.
                    </description>
                    <condition>
                        Incremented when a final 2xx class SIP SUBSCRIBE response is received on the Mw interface on the originating side.
                        The counter is incremented in the CSCF node that executes the originating P-CSCF logic.
                        The counter is keyed on the event type code.
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total success.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SUBSCRIBE and resubscribe Accessibility</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeOriginatingSubscribeFailure">
                    <measurementName>cscfUeOriginatingSubscribeFailure</measurementName>
                    <description>
                        Number of times non successful responses to initial SIP SUBSCRIBE received by the P-CSCF on the originating side.
                    </description>
                    <condition>
                        Incremented for three types of events that cause the counter change:
                        - A 4xx-6xx class SIP SUBSCRIBE response is received on the Mw interface
                        - A 4xx-6xx class SIP SUBSCRIBE response is generated for sending on the Gm interface as a result
                        of a SIP SUBSCRIBE request error
                        - Transaction timeout at waiting for the response occurs Responses with code range 3xx,
                        redirection of call, as well as responses with code 407, "Proxy authentication required",
                        part of the authorization procedure will not be counted as failures.
                        The counter is incremented in the CSCF node that executes the originating P-CSCF logic.
                        The counter is keyed on the event type code.
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total failure.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SUBSCRIBE and resubscribe Accessibility</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeTerminatingSubscribeSuccess">
                    <measurementName>cscfUeTerminatingSubscribeSuccess</measurementName>
                    <description>
                        Number of times successful final responses to initial SIP SUBSCRIBE received by the P-CSCF on the terminating side.
                    </description>
                    <condition>
                        Incremented when a final 2xx class SIP SUBSCRIBE response is received on the Mw interface on the terminating side.
                        The counter is incremented in the CSCF node that executes the terminating P-CSCF logic.
                        The counter is keyed on the event type code.
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total success.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SUBSCRIBE and resubscribe Accessibility</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeTerminatingSubscribeFailure">
                    <measurementName>cscfUeTerminatingSubscribeFailure</measurementName>
                    <description>
                        Number of times non successful responses to initial SIP SUBSCRIBE received by the P-CSCF on the terminating side.
                    </description>
                    <condition>
                        Incremented for three types of events causes the counter change:
                        - A 4xx-6xx class SIP SUBSCRIBE response is received on the Gm interface
                        - A 4xx-6xx class SIP SUBSCRIBE response is generated for sending on the Mw interface
                        as a result of a SIP SUBSCRIBE request error
                        - Transaction timeout at waiting for the response occurs Responses with code range 3xx,
                        redirection of call, as well as responses with code 407, "Proxy authentication required",
                        part of the authorization procedure will not be counted as failures.
                        The counter is incremented in the CSCF node that executes the terminating P-CSCF logic.
                        The counter is keyed on the event type code.
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total failure.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SUBSCRIBE and resubscribe Accessibility</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeOriginatingReSubscribeSuccess">
                    <measurementName>cscfUeOriginatingReSubscribeSuccess</measurementName>
                    <description>
                        Number of times successful final responses to SIP resubscribe received by the P-CSCF on the originating side.
                    </description>
                    <condition>
                        Incremented when a final 2xx class SIP resubscribe response is received on the Mw interface on the originating side.
                        The counter is incremented in the CSCF node that executes the originating P-CSCF logic.
                        The counter is keyed on the event type code. The P-CSCF will also always increment the counter once with
                        the key "sum" in order to keep track of total success.
                        Note: Desubscribe success, that is, resubscribe request with expire timeout = 0 is counted.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SUBSCRIBE and resubscribe Accessibility</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeOriginatingReSubscribeFailure">
                    <measurementName>cscfUeOriginatingReSubscribeFailure</measurementName>
                    <description>
                        Number of times non successful responses to SIP resubscribe received by the P-CSCF on the originating side.
                    </description>
                    <condition>
                        Incremented for three types of events causes the counter change:
                        - A 4xx-6xx class SIP resubscribe response is received on the Mw interface
                        - A 4xx-6xx class SIP resubscribe response is generated for sending on the Gm interface as a result of a SIP resubscribe request error
                        - Transaction timeout at waiting for the response occurs Responses with code range 3xx, redirection of call,
                        as well as responses with code 407, "Proxy authentication required",
                        part of the authorization procedure will not be counted as failures.
                        The counter is incremented in the CSCF node that executes the originating P-CSCF logic.
                        Note: Desubscribe failure, that is, response to resubscribe request with expire timeout = 0 is counted.
                        The counter is keyed on the event type code. The P-CSCF will also always increment the counter once with
                        the key "sum" in order to keep track of total failure.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SUBSCRIBE and resubscribe Accessibility</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeTerminatingReSubscribeSuccess">
                    <measurementName>cscfUeTerminatingReSubscribeSuccess</measurementName>
                    <description>
                        Number of times successful final responses to SIP resubscribe received by the P-CSCF on the terminating side.
                    </description>
                    <condition>
                        Incremented when a final 2xx class SIP resubscribe response is received on the Mw interface on the terminating side.
                        The counter is incremented in the CSCF node that executes the terminating P-CSCF logic.
                        The counter is keyed on the event type code.
                        Note: Desubscribe success, that is, resubscribe request with expire timeout = 0 is counted.
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total success.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SUBSCRIBE and resubscribe Accessibility</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfUeTerminatingReSubscribeFailure">
                    <measurementName>cscfUeTerminatingReSubscribeFailure</measurementName>
                    <description>
                        Number of times non successful responses to SIP resubscribe received by the P-CSCF on the terminating side.
                    </description>
                    <condition>
                        Incremented for three types of events causes the counter change:
                        - A 4xx-6xx class SIP resubscribe response is received on the Gm interface
                        - A 4xx-6xx class SIP resubscribe response is generated for sending on the Mw interface as a result of a SIP resubscribe request error
                        - Transaction timeout at waiting for the response occurs Responses with code range 3xx, redirection of call,
                        as well as responses with code 407, "Proxy authentication required",
                        part of the authorization procedure will not be counted as failures.
                        The counter is incremented in the CSCF node that executes the terminating P-CSCF logic.
                        Note: Desubscribe failure, that is, response to resubscribe request with expire timeout = 0 is counted.
                        The counter is keyed on the event type code.
                        The P-CSCF will also always increment the counter once with the key "sum" in order to keep track of total failure.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Subscribe and Resubscribe Accessibility</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfOriginatingInviteNoAsAttempts">
                    <measurementName>cscfOriginatingInviteNoAsAttempts</measurementName>
                    <description>
                        Number of times initial SIP INVITE requests received by the CSCF on the originating side,
                        on Mw or Gm interface, no Application Server is invoked.
                    </description>
                    <condition>
                        Incremented when an initial SIP INVITE request is received by the CSCF on the originating side.
                        This counter is incremented once per SIP session (initial INVITE) when no AS is invoked.
                        Attempts are counted meaning the counter is incremented independently of the session setup result.
                        Failed attempts detected before it is known if an AS is to be invoked or not, also increments this counter.
                        The counter is incremented in the stand-alone P-CSCF and the S-CSCF.
                        If the node is configured as a colocated ISP CSCF node, the counter is only stepped once.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfTerminatingInviteNoAsAttempts">
                    <measurementName>cscfTerminatingInviteNoAsAttempts</measurementName>
                    <description>
                        Number of times initial SIP INVITE requests received by the CSCF on the terminating side
                        on Mw or Gm interface, no Application Server is invoked.
                    </description>
                    <condition>
                        Incremented when an initial SIP INVITE request is received by the CSCF on the terminating side.
                        This counter is incremented once per SIP session (initial INVITE) when no AS is invoked.
                        Attempts are counted meaning the counter is incremented independently of the session setup result.
                        Failed attempts detected before the direction could be decided,
                        increments this counter also for the terminating 'to AS' traffic case.
                        The counter is incremented in the stand-alone P-CSCF, I-CSCF and S-CSCF.
                        If the node is configured as a colocated ISP CSCF node, the counter is only stepped once.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfOriginatingInviteNoAsAttempts">
                    <measurementName>scscfOriginatingInviteNoAsAttempts</measurementName>
                    <description>
                        Number of times initial SIP INVITE requests received by the S-CSCF on the originating side, no Application Server is invoked.
                    </description>
                    <condition>
                        Incremented when originating S-CSCF sends a response to the initial SIP INVITE request without AS invocations.
                        In case of multiple (subsequent or forked) responses the counter is triggered at the first transmitted response only.
                        This counter is incremented for an attempted initial INVITE when no AS is invoked.
                        Failed attempts detected before it is known if an AS is to be invoked or not, also increment this counter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfTerminatingInviteNoAsAttempts">
                    <measurementName>scscfTerminatingInviteNoAsAttempts</measurementName>
                    <description>
                        Number of times initial SIP INVITE requests received by the S-CSCF on the terminating, no Application Server is invoked.
                    </description>
                    <condition>
                        Incremented when the S-CSCF on the terminating side sends response to the initial SIP INVITE request without AS invocations.
                        In case of multiple (subsequent or forked) responses the counter is triggered at the first transmitted response only.
                        This counter is incremented for an attempted initial INVITE when no AS is invoked.
                        Failed attempts detected before it is known if an AS is to be invoked or not, also increment this counter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfOriginatingInviteToAsAttempts">
                    <measurementName>cscfOriginatingInviteToAsAttempts</measurementName>
                    <description>
                        Number of times an initial SIP INVITE request attempts received by the S-CSCF on
                        the originating side on Mw or (Gm interface for a colocated CSCF),
                        resulting in an AS invocation on ISC interface.
                    </description>
                    <condition>
                        Incremented when the S-CSCF on the originating side is about to send response to the initial SIP INVITE request, resulting in an AS invocation.
                        In case of multiple (subsequent or forked) responses the counter is triggered at the first transmitted response only.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfTerminatingInviteToAsAttempts">
                    <measurementName>cscfTerminatingInviteToAsAttempts</measurementName>
                    <description>
                        Number of times an initial SIP INVITE request attempts received by the S-CSCF on the
                        terminating side on Mw interface, resulting in a AS invocation on ISC interface.
                    </description>
                    <condition>
                        Incremented when the S-CSCF on the terminating side is about to send response to the initial SIP INVITE request, resulting in an AS invocation.
                        This counter will also be incremented when the AS acts as an UAC.
                        In case of multiple (subsequent or forked) responses the counter is triggered at the first transmitted response only.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfOriginatingInviteFromAsAttempts">
                    <measurementName>cscfOriginatingInviteFromAsAttempts</measurementName>
                    <description>
                        Number of times an initial SIP INVITE request attempts received by the S-CSCF on the originating
                        side on ISC interface from application server, resulting in an outgoing request on non ISC interface (Mw).
                        There are no further AS invocations.
                    </description>
                    <condition>
                        The counter is incremented when an initial SIP INVITE request attempt is received by the S-CSCF
                        on the originating side on ISC interface from application server, resulting in an outgoing request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfTerminatingInviteFromAsAttempts">
                    <measurementName>cscfTerminatingInviteFromAsAttempts</measurementName>
                    <description>
                        Number of times an initial SIP INVITE request attempts received by the S-CSCF
                        on the terminating side on ISC interface from AS, resulting in an outgoing request
                        on the Mw (or Gm interface for a colocated CSCF).There is no further AS invocations.
                    </description>
                    <condition>
                        Incremented when an initial SIP INVITE request attempt is received by the S-CSCF
                        on the terminating side from AS, resulting in an outgoing request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfOriginatingInviteFromAsToAsAttempts">
                    <measurementName>cscfOriginatingInviteFromAsToAsAttempts</measurementName>
                    <description>
                        Number of times an initial SIP INVITE request attempts received by the S-CSCF on the
                        originating side on ISC interface, resulting in a new AS invocation on ISC interface.
                    </description>
                    <condition>
                        The counter is incremented when an initial SIP INVITE request is received by the S-CSCF
                        on the originating side, resulting in a new AS invocation.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfTerminatingInviteFromAsToAsAttempts">
                    <measurementName>cscfTerminatingInviteFromAsToAsAttempts</measurementName>
                    <description>
                        Number of initial SIP INVITE request attempts received by the S-CSCF on the terminating
                        side on ISC interface from AS, resulting in a new AS invocation on ISC interface.
                    </description>
                    <condition>
                        An initial SIP INVITE request attempt is received by the S-CSCF on the terminating side from AS,
                        resulting in a new AS invocation. This counter is incremented once per SIP session when initial
                        SIP INVITE message is received from AS acting as B2BUA, proxy or UAC and when further AS invocation occurs.
                        Counter is incremented in terminating half-call. Attempts are counted meaning the counter is incremented
                        independently of the session setup result.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="icmpSummaryInMessages">
                    <measurementName>icmpSummaryInMessages</measurementName>
                    <description>
                        The total number of processed ICMP messages
                    </description>
                    <condition>
                        This counter is incremented on reception of any ICMP message matching a configured ICMP Framework Port
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>CSCF ICMP Framework Counters</cpiHeading>
                    <!-- Defined the cardinality of keyed counters -->
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="icmpStatsDestinationUnreachableIns">
                    <measurementName>icmpStatsDestinationUnreachableIns</measurementName>
                    <description>
                        The total number of processed ICMP messages of type Destination Unreachable
                    </description>
                    <condition>
                        This counter is incremented on reception of ICMP messages which
                        a) are of type Destination Unreachable and
                        b) have code net unreachable, host unreachable, protocol unreachable or port unreachable and
                        c) matches a configured ICMP Framework Port
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>CSCF ICMP Framework Counters</cpiHeading>
                    <!-- Defined the cardinality of keyed counters -->
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="icmpStatsParameterProblemIns">
                    <measurementName>icmpStatsParameterProblemIns</measurementName>
                    <description>
                        The total number of processed ICMP messages of type Parameter Problem
                    </description>
                    <condition>
                        This counter is incremented on reception of ICMP messages which
                        a) are of type Parameter Problem and
                        b) matches a configured ICMP Framework Port
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>CSCF ICMP Framework Counters</cpiHeading>
                    <!-- Defined the cardinality of keyed counters -->
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfNBASuccess">
                    <measurementName>cscfNBASuccess</measurementName>
                    <description>This counter records the number of successful NASS bundled authentications.</description>
                    <condition>
                        The counter is stepped when the comparison of line identity matches (initial registration) or when
                        the comparison of IP addresses matches (other requests) or when the MAA includes a successful result
                        for NASS bundled authentication and the Line-Identifier AVP includes the string "Line_Profile".
                        If the optional challenged NBA is enabled, the counter is stepped only if the above mentioned
                        conditions are met and the challenge is successful.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Authentication Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfNBAFailure">
                    <measurementName>cscfNBAFailure</measurementName>
                    <description>Number of failed NASS bundled authentications.</description>
                    <condition>
                        The counter is stepped when the comparison of Line-Identifier does not match (initial registration)
                        or when the comparison of IP addresses does not match (other requests).
                        The counter is keyed on SIP response code.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Authentication Counters</cpiHeading>
                    <cardinality>5</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfNbaChallengeFailure">
                    <measurementName>scscfNbaChallengeFailure</measurementName>
                    <description>
                        This is a counter in S-CSCF to record the total number of unanswered NBA SIP Challenge Responses.
                        This counter is keyed with the IP address of client receiving the challenge. A "sum" key is included to represent
                        the sum of all unanswered challenges.
                    </description>
                    <condition>
                        The counter is incremented whenever an NBA challenge nonce is expired.
                        This counter is used when the challenged NBA is enabled via ScscfNbaChallengeEnabled.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Authentication Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfGibaSuccess">
                    <measurementName>scscfGibaSuccess</measurementName>
                    <description>
                        The number of successful GIBA (GPRS IMS Bundled Authentication) authentications.
                    </description>
                    <condition>
                        The counter is stepped when the comparison of the IP addresses matches.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Authentication Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfGibaFailure">
                    <measurementName>scscfGibaFailure</measurementName>
                    <description>
                        The number of failed GIBA (GPRS IMS Bundled Authentication) authentications.
                    </description>
                    <condition>
                        The counter is stepped when the comparison of the IP addresses fails.  The counter is keyed on the SIP response code.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Authentication Counters</cpiHeading>
                    <cardinality>5</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfSipDigestAuthenticationSuccess">
                    <measurementName>cscfSipDigestAuthenticationSuccess</measurementName>
                    <description>
                        Number of successful Digest Authentications.
                    </description>
                    <condition>
                        The counter is incremented whenever the UE's credentials received in Authorization or
                        Proxy-Authorization header of SIP request are successfully validated
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Authentication Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfSipDigestAuthenticationFailure">
                    <measurementName>cscfSipDigestAuthenticationFailure</measurementName>
                    <description>
                        Number of failed digest authentications.
                    </description>
                    <condition>
                        The counter is incremented whenever the UE's credentials received in the Authorization or
                        Proxy-Authorization header of the SIP request are rejected by the S-CSCF.
                        The counter is keyed on the SIP response code.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Authentication Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfBlacklistedAuthenticationRequests">
                    <measurementName>cscfBlacklistedAuthenticationRequests</measurementName>
                    <description>Number of requests received during blacklist periods.</description>
                    <condition>
                        The counter is stepped every time a request is received during a blacklist period.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Authentication Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfOriginatingMessageSuccess">
                    <measurementName>scscfOriginatingMessageSuccess</measurementName>
                    <description>
                        Number of 2xx responses to SIP MESSAGE transmitted by S-CSCF on originating side.
                    </description>
                    <condition>
                        Incremented when a 2xx response to SIP MESSAGE request is transmitted on originating side.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>MESSAGE Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfOriginatingMessageFailed">
                    <measurementName>scscfOriginatingMessageFailed</measurementName>
                    <description>
                        Number of times non-successful responses to SIP MESSAGE request are transmitted by S-CSCF on originating side.
                    </description>
                    <condition>
                        Incremented when a non-successful response to SIP MESSAGE request is transmitted on originating side.
                        Responses with code 407 Proxy authentication required, part of the authorization procedure will not be counted as failures.
                        The counter is keyed on the response code sent back to P-CSCF.
                        The S-CSCF will also always increment the counter once with the key "sum" in order to keep track of total failure.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>MESSAGE Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTerminatingMessageSuccess">
                    <measurementName>scscfTerminatingMessageSuccess</measurementName>
                    <description>
                        Number of 2xx responses to SIP MESSAGE transmitted by S-CSCF on terminating side.
                    </description>
                    <condition>
                        Incremented when a 2xx response to SIP MESSAGE request is transmitted on terminating side.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>MESSAGE Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfTerminatingMessageFailed">
                    <measurementName>scscfTerminatingMessageFailed</measurementName>
                    <description>
                        Number of times non-successful responses to SIP MESSAGE request are transmitted by S-CSCF on terminating side.
                    </description>
                    <condition>
                        Incremented when a non-successful response to SIP MESSAGE request is transmitted on terminating side.
                        The counter is keyed on the response code sent back to I-CSCF.
                        The S-CSCF will also always increment the counter once with the key "sum" in order to keep track of total failure.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>MESSAGE Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfGnpEnumResponse">
                    <measurementName>cscfGnpEnumResponse</measurementName>
                    <description>
                        This counter measures the number of ENUM responses that include additional routing information such as Routing Number and NPDI.
                    </description>
                    <condition>
                        The keyed counter is stepped whenever the specific routing information is received in the ENUM response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit> The number of ENUM responses of type described by the key</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>GnpEnum</keyTypeName>
                </counter>
                <counter measurementType="cscfGnpEnumResponseNpdi">
                    <measurementName>cscfGnpEnumResponseNpdi</measurementName>
                    <description>
                        This counter measures the number of ENUM responses that include only NPDI information.
                    </description>
                    <condition>
                        The counter is stepped whenever the specific routing information is received in the ENUM response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfGnpEnumResponseRn">
                    <measurementName>cscfGnpEnumResponseRn</measurementName>
                    <description>
                        This counter measures the number of ENUM responses that include only RN information.
                    </description>
                    <condition>
                        The counter is stepped whenever the specific routing information is received in the ENUM response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfGnpEnumResponseRnNpdi">
                    <measurementName>cscfGnpEnumResponseRnNpdi</measurementName>
                    <description>
                        This counter measures the number of ENUM responses that include RN and NPDI information.
                    </description>
                    <condition>
                        The counter is stepped whenever the specific routing information is received in the ENUM response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfGnpEnumResponseMalformatted">
                    <measurementName>cscfGnpEnumResponseMalformatted</measurementName>
                    <description>
                        This counter measures the number of ENUM responses that include NPDI and possibly RN information, but the format of the data is not according to RFC3261 or RFC3966.
                        The counter is used to raise and cease the threshold alarm CSCF ENUM Responses Resulting In Malformatted RN.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is stepped whenever the specific routing information is received in the ENUM response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfGnpSIPRequest">
                    <measurementName>cscfGnpSIPRequest</measurementName>
                    <description>
                        This counter measures the number of SIP requests received with additional routing information, such as Routing Number, included.
                        The counters is applicable for originating S-CSCF and for terminating I-CSCF requests.  The counter is keyed on the node type and the responses as follows
                        ScscfNpdi : only NPDI information received by the originating S-CSCF from other SIP base nodes
                        IcscfNpdi : only NPDI information received by the terminating I-CSCF from other SIP base nodes
                        ScscfRnNpdi : RN and NPDI information received by the originating S-CSCF from other SIP base nodes
                        IcscfRnNpdi : RN and NPDI information received by the terminating I-CSCF from other SIP base nodes
                        ScscfMalformatted :  format of the RN and NPDI received by the originating S-CSCF from other SIP base nodes is not according to RFC3261 or RFC3966.
                        IcscfMalformatted :  format of the RN and NPDI received by the terminating I-CSCF from other SIP base nodes is not according to RFC3261 or RFC3966.
                        ScscfRn : RN without the NPDI indicator set received by the originating S-CSCF from other SIP base nodes
                        IcscfRn : RN without the NPDI indicator set received by the terminating I-CSCF from other SIP base nodes
                    </description>
                    <condition>
                        The keyed counter is stepped whenever specific routing information is received in the SIP request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit> The number of incoming SIP requests of type described by the key</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>8</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>GnpNodeType</keyTypeName>
                </counter>
                <counter measurementType="cscfCicEnumResponse">
                    <measurementName>cscfCicEnumResponse</measurementName>
                    <description>
                        This counter measures the number of ENUM responses that include CIC routing information.
                        This counter is a keyed counter with the following results:
                        Cic : CIC information received from ENUM
                        CicEnumMalformatted :  format of the CIC is not according to RFC3261 or RFC3966.
                    </description>
                    <condition>
                        The keyed counter is stepped whenever the specific routing information is received in the ENUM response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit> The number of ENUM responses of type described by the key</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>2</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>CicEnum</keyTypeName>
                </counter>
                <counter measurementType="cscfCicEnumResponseCic">
                    <measurementName>cscfCicEnumResponseCic</measurementName>
                    <description>
                        This counter measures the number of ENUM responses that include CIC routing information.
                    </description>
                    <condition>
                        The counter is stepped whenever the specific routing information is received in the ENUM response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCicEnumResponseMalformatted">
                    <measurementName>cscfCicEnumResponseMalformatted</measurementName>
                    <description>
                        This counter measures the number of ENUM responses that include CIC routing information, but the format of the data is not proper according to RFC3261 or RFC3966.
                        The counter is used to raise and cease the threshold alarm CSCF ENUM Responses Resulting In Malformatted CIC.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is stepped whenever the specific routing information is received in the ENUM response.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfCicRequest">
                    <measurementName>cscfCicRequest</measurementName>
                    <description>
                        This counter measures the number of of SIP requests received with additional routing information, such as Routing Number or CIC, included.
                        The counter is applicable for originating S-CSCF and for terminating I-CSCF requests.  The counter is keyed on the node type and the responses as follows
                        ScscfCic : CIC information received by the originating S-CSCF from other SIP base nodes
                        IcscfCic : CIC information received by the terminating I-CSCF from other SIP base nodes
                        ScscfMalformatted :  format of the CIC received by the originating S-CSCF from other SIP base nodes is not according to RFC3261 or RFC3966.
                        IcscfMalformatted :  format of the CIC received by the terminating I-CSCF from other SIP base nodes is not according to RFC3261 or RFC3966.
                    </description>
                    <condition>
                        The keyed counter is stepped whenever CIC information is received in the SIP request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <outputUnit> The number of incoming SIP requests of type described by the key</outputUnit>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Routing Information Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>CicNodeType</keyTypeName>
                </counter>
                <counter measurementType="icscfTransitSessionAttempts">
                    <measurementName>icscfTransitSessionAttempts</measurementName>
                    <description>
                        Number of attempted session establishments (INVITE) resulting in that terminating I-CSCF performs a transit attempt.
                    </description>
                    <condition>
                        This counter is increased everytime When I-CSCF attempts to transit a call
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="icscfTransitSessionFailures">
                    <measurementName>icscfTransitSessionFailures</measurementName>
                    <description>
                        Number of failed transit attempts, that is, the counter is stepped for every transit attempt which results in sending of a negative response.
                        The counter is keyed on the response code to make it possible to determine what types of faults that have occurred.
                    </description>
                    <condition>
                        The counter is increased everytime I-CSCF sends a negative response to an INVITE for a transit call.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfFailedEmergencySessions">
                    <measurementName>scscfFailedEmergencySessions</measurementName>
                    <description>The number of times an originating emergency session fails at the SCSCF.</description>
                    <condition>
                        Incremented at reception of any non-successful final response to an emergency call
                        setup or upon an internal error when handling the emergency session.
                        It is keyed on the final response failure code.
                        The sum keyword is also a valid key to count all failure cases.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfSuccessfulEmergencySessions">
                    <measurementName>scscfSuccessfulEmergencySessions</measurementName>
                    <description>The number of times an originating emergency session succeeds at the SCSCF.</description>
                    <condition>
                        Incremented at reception of a 2xx successful final response on an emergency call setup.
                        It is keyed on the provisional (180) or final (200) response code.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Emergency Counters</cpiHeading>
                    <cardinality>4</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfRegistrationEventNetworkDeregisteredNotificationsSendSuccessful">
                    <measurementName>scscfRegistrationEventNetworkDeregisteredNotificationsSendSuccessful</measurementName>
                    <description>
                        This counter has a name that exceeds the 64 character limit imposed by nPMF, hence it is discontinued.
                        A new/renamed counter scscfRegEventNetworkDeregisteredNotificationsSendSuccessful is introduced instead.
                    </description>
                    <condition>
                        Incremented on receipt of a SIP 2xx message for the NOTIFY.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfRegEventNetworkDeregisteredNotificationsSendSuccessful">
                    <measurementName>scscfRegEventNetworkDeregisteredNotificationsSendSuccessful</measurementName>
                    <description>
                        Number of successful Registration event NOTIFYs that are sent because of network initiated deregistration in S-CSCF.
                        Network initiated deregistration can be triggered in several ways, for example by registration timer expiry,
                        administrative state change in CSCF, maximum number of contacts reached, or RTR received from HSS.
                    </description>
                    <condition>
                        Incremented on receipt of a SIP 2xx message for the NOTIFY.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfRegistrationEventNetworkDeregisteredNotificationsSendFailures">
                    <measurementName>scscfRegistrationEventNetworkDeregisteredNotificationsSendFailures</measurementName>
                    <description>
                        This counter has a name that exceeds the 64 character limit imposed by nPMF, hence it is discontinued.
                        A new/renamed counter scscfRegEventNetworkDeregisteredNotificationsSendFailures is introduced instead.
                    </description>
                    <condition>
                        Incremented on receipt by the S-CSCF of a response message (for example 403) indicating a failed NOTIFY request or a timeout of such a request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfRegEventNetworkDeregisteredNotificationsSendFailures">
                    <measurementName>scscfRegEventNetworkDeregisteredNotificationsSendFailures</measurementName>
                    <description>
                        Number of unsuccessful Registration event NOTIFYs that are sent because of network initiated deregistration in S-CSCF.
                        Network initiated deregistration can be triggered in several ways, for example by registration timer expiry,
                        administrative state change in CSCF, maximum number of contacts reached, or RTR received from HSS.
                        This counter is keyed with the SIP response code. There is also a SUM key, which is incremented for all response codes.
                    </description>
                    <condition>
                        Incremented on receipt by the S-CSCF of a response message (for example 403) indicating a failed NOTIFY request or a timeout of such a request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfNotifySuccess">
                    <measurementName>cscfNotifySuccess</measurementName>
                    <description>
                        Number of successful NOTIFY procedures in the P-CSCF and S-CSCF. Applies to both proxied and CSCF generated NOTIFYs.
                    </description>
                    <condition>
                        Incremented on receipt of a SIP 2xx message for the NOTIFY.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Basic SIP Request Handling in CSCF</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfNotifyFailure">
                    <measurementName>cscfNotifyFailure</measurementName>
                    <description>
                        Number of failed NOTIFY procedures in the P-CSCF and S-CSCF. Applies to both proxied and CSCF generated NOTIFYs.
                        This counter is keyed with the SIP response code. There is also a SUM key, which is incremented for all response codes.
                    </description>
                    <condition>
                        Incremented on receipt by the S-CSCF of a response message (for example SIP_403) indicating a failed NOTIFY request or a timeout of such a request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Basic SIP Request Handling in CSCF</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="pcscfAttemptedRegistrationsPerAccess">
                    <measurementName>pcscfAttemptedRegistrationsPerAccess</measurementName>
                    <description>
                        Number of attempted initial registrations in P-CSCF.
                        This counter is keyed on the access type in the P-Access-Network-Information header in the REGISTER request.
                    </description>
                    <condition>
                        Incremented at receipt of an initial SIP REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="pcscfAcceptedRegistrationsPerAccess">
                    <measurementName>pcscfAcceptedRegistrationsPerAccess</measurementName>
                    <description>
                        Number of successful initial registrations in P-CSCF.
                        This counter is keyed on the access type in the P-Access-Network-Information header in the REGISTER request.
                        See also cscfAcceptedRegistrations
                    </description>
                    <condition>
                        Incremented when sending a successful final response (2xx) to an initial SIP REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="pcscfAttemptedReregistrationsPerAccess">
                    <measurementName>pcscfAttemptedReregistrationsPerAccess</measurementName>
                    <description>
                        Number of attempted reregistrations in P-CSCF.
                        This counter is keyed on the access type in the P-Access-Network-Information header in the REGISTER request.
                    </description>
                    <condition>
                        Incremented at receipt of a SIP Re-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="pcscfAcceptedReregistrationsPerAccess">
                    <measurementName>pcscfAcceptedReregistrationsPerAccess</measurementName>
                    <description>
                        Number of successful reregistrations in P-CSCF.
                        This counter is keyed on the access type in the P-Access-Network-Information header in the REGISTER request.
                        See also cscfAcceptedReregistrations.
                    </description>
                    <condition>
                        Incremented when sending a successful final response (2xx) to a SIP Re-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="pcscfAttemptedDeregistrationsPerAccess">
                    <measurementName>pcscfAttemptedDeregistrationsPerAccess</measurementName>
                    <description>
                        Number of attempted user-initiated deregistrations in P-CSCF.
                        This counter is keyed on the access type in the P-Access-Network-Information header in the REGISTER request.
                    </description>
                    <condition>
                        Incremented at receipt of a SIP De-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="pcscfAcceptedDeregistrationsPerAccess">
                    <measurementName>pcscfAcceptedDeregistrationsPerAccess</measurementName>
                    <description>
                        Number of successful user-initiated deregistrations in P-CSCF.
                        This counter is keyed on the access type in the P-Access-Network-Information header in the REGISTER request.
                        See also cscfAcceptedDeregistrations.
                    </description>
                    <condition>
                        Incremented when sending a successful final response (2xx) to a SIP De-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfThirdPartyRegistrationSuccess">
                    <measurementName>scscfThirdPartyRegistrationSuccess</measurementName>
                    <description>
                        Number of successful third party registration procedures in the S-CSCF.
                    </description>
                    <condition>
                        Incremented on receipt of a SIP 2xx message for the 3rd party registration.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfThirdPartyRegistrationFailure">
                    <measurementName>scscfThirdPartyRegistrationFailure</measurementName>
                    <description>
                        Number of failed third party registration procedures in the S-CSCF.
                        This counter is keyed with the SIP response code. There is also a SUM key, which is incremented for all response codes.
                    </description>
                    <condition>
                        Incremented on receipt by the S-CSCF of a response message (for example 403)
                        indicating a failed third party registration REGISTER request or a timeout of such a request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfThirdPartyRegistrationFailureSessionTerminated">
                    <measurementName>scscfThirdPartyRegistrationFailureSessionTerminated</measurementName>
                    <description>
                        Number of failed 3rd party register requests that resulted in the session-terminated case.
                        This counter is keyed with the SIP response code. There is also a SUM key, which is incremented for all non 2xx response codes.
                    </description>
                    <condition>
                        The counter is incremented by S-CSCF when session terminated behavior is invoked when sending
                        a 3rd party register to an application server.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfRegistrationEventShortenedNotificationsSendSuccessful">
                    <measurementName>scscfRegistrationEventShortenedNotificationsSendSuccessful</measurementName>
                    <description>
                        Number of successful Registration event NOTIFY's that are sent because of network initiated shorten registration time in S-CSCF.
                        Network initiated shorten registration time can be triggered by the manual invoked network initiated reauthentication function.
                    </description>
                    <condition>
                        Incremented on receipt of a SIP 2xx message for the NOTIFY including the event attribute 'shortened'.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfRegistrationEventShortenedNotificationsSendFailures">
                    <measurementName>scscfRegistrationEventShortenedNotificationsSendFailures</measurementName>
                    <description>
                        Number of unsuccessful Registration event NOTIFY's that are sent because of network initiated shorten registration time in S-CSCF.
                        Network initiated shorten registration time can be triggered by the manual invoked network initiated reauthentication function.
                        This counter is keyed with the SIP response code. There is also a SUM key, which is incremented for all non 2xx response codes.
                    </description>
                    <condition>
                        Incremented on receipt by the S-CSCF of a response message (for example 403) indicating a failed NOTIFY
                        (including the event attribute 'shortened') request or a timeout of such a request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Event Counters</cpiHeading>
                    <cardinality>25</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="icscfNoMatchingScscf">
                    <measurementName>icscfNoMatchingScscf</measurementName>
                    <description>
                        Number of times it has been impossible to select an S-CSCF because no one matches the
                        requested mandatory capabilities. The counter is keyed with the requested mandatory capabilities.
                    </description>
                    <condition>
                        The counter is incremented when an S-CSCF shall be selected, based upon requested capabilities,
                        and there is no S-CSCF server configured that supports all requested mandatory capabilities.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>5</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>Capability</keyTypeName>
                </counter>
                <counter measurementType="cscfRegistrationsFailure">
                    <measurementName>cscfRegistrationsFailure</measurementName>
                    <description>
                        Number of initial registration attempts that resulted in rejection. Each new contact
                        registered by a user will be counted as an initial registration. The reasons for the
                        rejection include failed authentication and authorization checks. Syntactically invalid
                        initial registration messages are not counted. The counter is keyed with the SIP
                        response code. There is also a SUM key, which is incremented for all response codes.
                    </description>
                    <condition>
                        Will be incremented after a rejection of an initial registration attempt.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfReregistrationsFailure">
                    <measurementName>cscfReregistrationsFailure</measurementName>
                    <description>
                        Number of reregistration attempts that resulted in rejection. The reasons for
                        the rejection include failed authentication and authorization checks. Syntactically
                        invalid reregistration messages are not counted. The counter is keyed with the SIP
                        response code. There is also a SUM key, which is incremented for all response codes.
                    </description>
                    <condition>
                        Will be incremented after a rejection of an attempted reregistration of a registered contact.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfDeregistrationsFailure">
                    <measurementName>cscfDeregistrationsFailure</measurementName>
                    <description>
                        Number of deregistration attempts that resulted in rejection. The reasons for
                        the rejection include failed authentication and authorization checks. Syntactically
                        invalid deregistration messages are not counted. This counter is keyed with the
                        SIP response code. There is also a SUM key, which is incremented for all response codes.
                    </description>
                    <condition>
                        Will be incremented after a rejection of an attempted deregistration of a registered contact.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="pcscfRegistrationsFromVisitingUsersFailure">
                    <measurementName>pcscfRegistrationsFromVisitingUsersFailure</measurementName>
                    <description>

                    </description>
                    <condition>

                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="pcscfRegistrationsFromVisitingUsersSuccess">
                    <measurementName>pcscfRegistrationsFromVisitingUsersSuccess</measurementName>
                    <description>
                        Number of successful initial registrations of contacts by users from network domains
                        other than the P-CSCF home domain. This counter is keyed with the users? network
                        domain name. The counter also has a ?SUM? key to collect the total number of
                        pcscfRegistrationsFromVisitingUsersSuccess.
                    </description>
                    <condition>
                        Incremented when P-CSCF sends a 200 OK response for an initial SIP REGISTER request,
                        and the domain name of the To header in the request does not match to any domain in
                        configuration parameter CscfDomainAlias.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                </counter>
                <counter measurementType="scscfRegistrationsFromVisitingDomainsSuccess">
                    <measurementName>scscfRegistrationsFromVisitingDomainsSuccess</measurementName>
                    <description>
                        Number of successful registrations from P-CSCF nodes in visiting domains. The counter
                        is keyed with the domain name of the other network P-CSCF. The counter also has a
                        "SUM" key to collect the total number of scscfRegistrationsFromVisitingDomainsSuccess.
                    </description>
                    <condition>
                        Incremented when S-CSCF sends a 200 OK response for an initial registration of a
                        contact that is sent via a P-CSCF, and the domain name of the P-CSCF received in
                        the P-Visited-Network-ID header of the request does not match to any domain in
                        configuration parameter CscfDomainAlias.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                </counter>
                <counter measurementType="scscfRegistrationsFromVisitingDomainsFailure">
                    <measurementName>scscfRegistrationsFromVisitingDomainsFailure</measurementName>
                    <description>
                        Number of failed registration attempts from P-CSCF nodes in visiting domains.
                        This counter is keyed with the concatenation of the domain name of the other
                        network P-CSCF and the SIP error response code (domain name, response code).
                        The counter also has a ?SUM? key to collect the total number of
                        scscfRegistrationsFromVisitingDomainsFailure
                    </description>
                    <condition>
                        Incremented when the S-CSCF rejects an initial REGISTER from a contact that
                        is sent via a P-CSCF with a domain name received in the P-Visited-Network-ID
                        header of the request, that does not match to any domain in configuration
                        parameter CscfDomainAlias.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="icscfInviteFromOtherDomainSuccess">
                    <measurementName>icscfInviteFromOtherDomainSuccess</measurementName>
                    <description>
                        Number of successful initial INVITE requests from users belonging to domains
                        other than the I-CSCF home domain(s). The counter is keyed with the domain
                        name of the other network. The counter also has a "SUM" key to collect the
                        total number of icscfInviteFromOtherDomainSuccess.
                    </description>
                    <condition>
                        Incremented when an I-CSCF sends a 2XX response for an initial INVITE request
                        to a network with a domain name that does not match any domain in configuration
                        parameter CscfDomainAlias. The counter is not incremented for request received
                        from an AS, via the ISC interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                </counter>
                <counter measurementType="icscfInviteFromOtherDomainFailure">
                    <measurementName>icscfInviteFromOtherDomainFailure</measurementName>
                    <description>
                        Number of failed initial INVITE requests from users belonging to domains other
                        than the I-CSCF home domain(s). The counter is keyed with the concatenation of
                        the domain name of the other network and the SIP error response code
                        (domain name, response code).  The counter also has a "SUM" key to collect the
                        total number of icscfInviteFromOtherDomainFailure.
                    </description>
                    <condition>
                        Incremented when an I-CSCF rejects an initial INVITE request and sends a failure
                        response to a network with a domain name that does not match any domain in
                        configuration parameter CscfDomainAlias. The rejected request could either be
                        forwarded or generated by the I-CSCF. The counter is not incremented for request
                        received from an AS, via the ISC interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="icscfInviteToOtherDomainSuccess">
                    <measurementName>icscfInviteToOtherDomainSuccess</measurementName>
                    <description>
                        Number of successful initial INVITE requests in I-CSCF from users belonging to
                        another network domain than the I-CSCF home domain. The counter is keyed with
                        the domain name of the other network. The counter also has a "SUM" key to collect
                        the total number of icscfInviteToOtherDomainSuccess.
                    </description>
                    <condition>
                        Incremented when an I-CSCF receives a 2XX response for an initial INVITE request,
                        from a network with a domain that does not match any domain in configuration parameter
                        CscfDomainAlias. The counter is not incremented for responses sent via the ISC interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                </counter>
                <counter measurementType="icscfInviteToOtherDomainFailure">
                    <measurementName>icscfInviteToOtherDomainFailure</measurementName>
                    <description>
                        Number of failed initial INVITE requests to users belonging to domains other than the
                        I-CSCF home domain(s). The counter is keyed with the concatenation of the domain name
                        of the other network and the SIP error response code (domain name, response code).
                        The counter also has a "SUM" key to collect the total number of icscfInviteToOtherDomainFailure.
                    </description>
                    <condition>
                        Incremented when an I-CSCF sends an initial INVITE request and receives a failure response from
                        a network with a domain that does not match any domain in configuration parameter CscfDomainAlias.
                        The rejected request could either be forwarded or generated by the I-CSCF. The counter
                        is not incremented for failure responses received via the ISC interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfInviteFromOtherDomainSuccess">
                    <measurementName>scscfInviteFromOtherDomainSuccess</measurementName>
                    <description>
                        Number of successful initial INVITE requests from users belonging to domains other than
                        the S-CSCF home domain(s). The counter is keyed with the domain name of the other network.
                        The counter also has a "SUM" key to collect the total number of scscfInviteFromOtherDomainSuccess.
                    </description>
                    <condition>
                        Incremented when an S-CSCF sends a 2XX response to an initial INVITE requests from a
                        network with a domain that does not match any domain in configuration parameter CscfDomainAlias.
                        The counter is not incremented for INVITE requests that are received over the ISC-interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                </counter>
                <counter measurementType="scscfInviteFromOtherDomainFailure">
                    <measurementName>scscfInviteFromOtherDomainFailure</measurementName>
                    <description>
                        Number of failed initial INVITE requests from users belonging to domains other than the
                        S-CSCF home domain(s). The counter is keyed with the concatenation of the domain name
                        of the other network and the SIP error response code (domain name, response code).
                        The counter also has a "SUM" key to collect the total number of scscfInviteFromOtherDomainFailure.
                    </description>
                    <condition>
                        Incremented when an S-CSCF rejects an initial INVITE request and sends a failure response
                        to a network with a domain that does not match any domain in configuration parameter
                        CscfDomainAlias. The counter is not incremented for INVITE requests that are sent
                        over the ISC-interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfInviteToOtherDomainSuccess">
                    <measurementName>scscfInviteToOtherDomainSuccess</measurementName>
                    <description>
                        Number of successful initial INVITE requests to users belonging to domains other than
                        the S-CSCF home domain(s). The counter is keyed with the domain name of the other network.
                        The counter also has a ?SUM? key to collect the total number of
                        scscfInviteToOtherDomainSuccess.
                    </description>
                    <condition>
                        Incremented when an originating S-CSCF receives a 2XX response on an initial INVITE request,
                        from a network with a domain that does not match any domain in configuration parameter
                        CscfDomainAlias. The counter is not incremented for INVITE requests that are sent
                        over the ISC-interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                </counter>
                <counter measurementType="scscfInviteToOtherDomainFailure">
                    <measurementName>scscfInviteToOtherDomainFailure</measurementName>
                    <description>
                        Number of failed initial INVITE requests to users belonging to domains other than
                        the S-CSCF home domain(s). The counter is keyed with the concatenation of the
                        domain name of the other network and the SIP error response code (domain name,
                        response code).  The counter also has a ?SUM? key to collect the total number
                        of scscfInviteToOtherDomainFailure.
                    </description>
                    <condition>
                        Incremented when an originating S-CSCF sends an initial INVITE request and receives
                        a failure response from a network with a domain that does not match any domain in
                        configuration parameter CscfDomainAlias. The counter is not incremented for INVITE
                        requests that are sent over the ISC-interface.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>0</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DomainName</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfConcurrentRegisteredUserProfiles">
                    <measurementName>cscfConcurrentRegisteredUserProfiles</measurementName>
                    <description>
                        The mean number of registered implicit registration sets and registered public
                        identifications not belonging to implicit registration sets during the granularity
                        period.
                    </description>
                    <condition>
                       cscfConcurrentRegisteredUserProfiles is incremented at successful initial user-initiated
                       registration. It is decremented at successful user-initiated deregistration, deregistration
                       as a result of contact address expiration, network-initiated deregistration or the
                       Administrative State is changed to LOCKED for maintenance. This counter sampling interval
                       is controlled by configuration parameter cscfGaugeInterval (default 2 minutes). In the output,
                       the cscfConcurrentRegisteredUserProfiles will be reported from one processor only, but
                       represent registrations from all processors.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>GAUGE</type>
                        <subtype>MEAN</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>float</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfConcurrentUnregisteredUserProfiles">
                    <measurementName>scscfConcurrentUnregisteredUserProfiles</measurementName>
                    <description>
                        The mean number of unregistered implicit registration sets and unregistered public
                        identifications not belonging to implicit registration sets during a measurement
                        granularity period.
                    </description>
                    <condition>
                        cscfConcurrentUnregisteredUserProfiles is incremented at successful initial registration
                        of a user as unregistered for originating or terminating services. It is decremented
                        at successful initial user-initiated registration of an unregistered user, unregistered
                        user expiration configured by scscfUnregisteredProfileTimer, network-initiated
                        deregistration or the Administrative State is changed to LOCKED for maintenance. This
                        counter sampling interval is controlled by configuration parameter cscfGaugeInterval
                        (default 2 minutes). In the output, the cscfConcurrentUnregisteredUserProfiles will be
                        reported from one processor only, but represent registrations from all processors.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>GAUGE</type>
                        <subtype>MEAN</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>float</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfPeakConcurrentRegisteredUserProfiles">
                    <measurementName>cscfPeakConcurrentRegisteredUserProfiles</measurementName>
                    <description>
                        The max number of registered implicit registration sets and registered public
                        identifications not belonging to implicit registration sets during the
                        granularity period.
                    </description>
                    <condition>
                       cscfPeakConcurrentRegisteredUserProfiles is incremented at successful initial
                       user-initiated registration. It is decremented at successful user-initiated
                       deregistration, deregistration as a result of contact address expiration,
                       network-initiated deregistration or the Administrative State is changed to
                       LOCKED for maintenance. This counter sampling interval is controlled by
                       configuration parameter cscfGaugeInterval (default 2 minutes). In the output,
                       the cscfPeakConcurrentRegisteredUserProfiles will be reported from one processor
                       only, but represent registrations from all processors.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>GAUGE</type>
                        <subtype>MAX</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfPeakConcurrentUnregisteredUserProfiles">
                    <measurementName>scscfPeakConcurrentUnregisteredUserProfiles</measurementName>
                    <description>
                        The max number of unregistered implicit registration sets and unregistered
                        public identifications not belonging to implicit registration sets in the
                        S-CSCF during a measurement granularity period.
                    </description>
                    <condition>
                       cscfPeakConcurrentUnregisteredUserProfiles is incremented at successful initial
                       registration of a user as unregistered for originating or terminating services.
                       It is decremented at successful initial user-initiated registration of an
                       unregistered user, unregistered user expiration configured by
                       scscfUnregisteredProfileTimer, network-initiated deregistration or the
                       Administrative State is changed to LOCKED for maintenance. This counter sampling
                       interval is controlled by configuration parameter cscfGaugeInterval (default 2
                       minutes). In the output, the cscfPeakConcurrentUnregisteredUserProfiles will be
                       reported from one processor only, but represent registrations from all processors.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>GAUGE</type>
                        <subtype>MAX</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfInviteCommunicationFailure">
                    <measurementName>cscfInviteCommunicationFailure</measurementName>
                    <description>
                        Number of failed SIP requests rejected by CSCF caused by communication
                        failures. The counter is keyed with the SIP response code, sip
                        reason phrase and hexadecimal error code, separated by a whitespace.
                        The counter also has a "SUM" key to collect
                        the total number of cscfInviteCommunicationFailure.
                    </description>
                    <condition>
                        Incremented when CSCF generates a SIP failure response to a SIP INVITE.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCodePhraseAndHexErrorCode</keyTypeName>
                </counter>
                <counter measurementType="scscfGetsPriorityInviteEstablishedSuccess">
                    <measurementName>scscfGetsPriorityInviteEstablishedSuccess</measurementName>
                    <description>
                        Number of times the first early dialog response (typically 180 Ringing) to initial GETS priority
                        SIP INVITE is transmitted by the S-CSCF.
                        The counter is stepped on 2xx response if no early dialog response was received.
                        The counter is keyed on the wps value.
                        When the wps value is not present in the request, response, or user profile, then ets.0 is used instead.
                    </description>
                    <condition>
                        Incremented when the first early dialog response to initial GETS priority SIP INVITE is transmitted by
                        S-CSCF or when 2xx response is transmitted if no early dialog response was received. When transmitting
                        multiple responses due to forking, it is the first response only that is counted.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                              subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Priority Statistics Counters</cpiHeading>
                    <cardinality>7</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>GetsPriorityValue</keyTypeName>
                </counter>
                <counter measurementType="scscfGetsPriorityInviteFailure">
                    <measurementName>scscfGetsPriorityInviteFailure</measurementName>
                    <description>
                        Number of times non-successful responses to initial GETS priority SIP INVITE are transmitted by S-CSCF.
                        The counter is keyed on the combination of the wps value and the SIP Response code (3xx-6xx).
                        When the wps value is not present in the request, response, or user profile, then ets.0 is used instead.
                        S-CSCF also increments the counter once with the key "SUM" in order to keep track of total failures.
                    </description>
                    <condition>
                        The counter is stepped by S-CSCF when the non-successful response is transmitted.
                        Incremented for these types of events:
                            - A 3xx-6xx class GETS priority SIP INVITE response is sent back by S-CSCF,
                                except 407 Proxy authentication required;
                            - Transaction timeout at waiting for response occurs;
                        Note: the counter is stepped when 487 Request Terminated is due to a Cancel request.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                              subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Priority Statistics Counters</cpiHeading>
                    <cardinality>28</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>GetsPriorityValueAndSipResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfEmergencyRegistrationsSuccess">
                    <measurementName>scscfEmergencyRegistrationsSuccess</measurementName>
                    <description>
                        Number of SIP REGISTER requests for emergency registration accepted by the CSCF.
                    </description>
                    <condition>
                        This counter is incremented for the initial registration of an emergency contact.
                        Registration of a new emergency contact to replace the existing emergency contact is also considered an initial registration.
                        This counter is not incremented otherwise (that is, reregistration of an emergency contact).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfEmergencyRegistrationsFailure">
                    <measurementName>scscfEmergencyRegistrationsFailure</measurementName>
                    <description>
                        Number of SIP REGISTER requests for emergency registration rejected by the CSCF.
                        The counter is keyed with the SIP response code. There is also a SUM key,
                        which is incremented for all response codes.
                    </description>
                    <condition>
                        Will be incremented after a rejection of an initial emergency registration attempt.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>20</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="cscfNonConfEosCase">
                    <measurementName>cscfNonConfEosCase</measurementName>
                    <description>
                        Number of times an application attempts to invoke an EOS Case that has not been configured or has been removed from EOS Analysis.
                        The counter is keyed on the non-existing EOS Case name and the total number of attempted invocations of non-existing EOS Case names (sum).
                        The counter is used to raise and cease the threshold alarm CSCF Reference to non-existing End-Of-Selection Case Detected.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        The counter is incremented when an EOS Case is to be analyzed but is not found
                        in any cscfEosCaseTableEntryId
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>End-of-Selection counter</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>EosCase</keyTypeName>
                </counter>
                <counter measurementType="cscfMaxEosAttemptsExceeded">
                    <measurementName>cscfMaxEosAttemptsExceeded</measurementName>
                    <description>
                        Number of times allowed EOS invocations have been exceeded per call or session.
                        The counter is keyed on the last EOS Case invoked and the total number of exceeded EOS attempts (sum).
                    </description>
                    <condition>
                        The counter is incremented by invoking cscfEosCaseTableEntryId when cscfEosMaxEosAttempts is exceeded.
                        When cscfEosMaxEosAttempts=0 any EOS Analysis invocation attempts
                        will also result in the stepping of the counter.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>End-of-Selection counter</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>EosCase</keyTypeName>
                </counter>
                <counter measurementType="scscfPcscfRestorationAttempts">
                    <measurementName>scscfPcscfRestorationAttempts</measurementName>
                    <description>
                         The number of P-CSCF restoration attempts by the S-CSCF.
                         The counter is keyed on the reasons triggering the P-CSCF restoration, that is SIP error response code or "Blacklisted" or PCRF failure or SBG restoration;
                         and a "sum" key for the total number of P-CSCF restoration attempts by S-CSCF.
                    </description>
                    <condition>
                         This counter is incremented when the triggering condition of P-CSCF restoration is met.
                         The triggering condition is a blacklisted P-CSCF, or the SIP error response code returned by the P-CSCF or generated by S-CSCF matching an entry in configuration parameter scscfPcscfRestorationSipErrorCodes.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>PcscfRestorationCause</keyTypeName>
                </counter>
                <counter measurementType="scscfPcscfRestorationFailure">
                    <measurementName>scscfPcscfRestorationFailure</measurementName>
                    <description>
                          The number of failed P-CSCF restorations due to signaling with HSS. The counter is keyed on the Diameter error code,
                          "ReqTimeout", "ReqConnectionProblem", "ReqProtocolError", "ReqUnspecFailure", "ReqThrottled", or "AnsInvalidResult";
                          and a "sum" key for the total number of P-CSCF restoration failures due to signaling with HSS.
                    </description>
                    <condition>
                          This counter is incremented when the SAR request sent for initiating the P-CSCF Restoration procedure is not successful.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>DiameterErrorCodeAndOtherErrors</keyTypeName>
                </counter>
                <counter measurementType="scscfSipMessageBasedPcscfRestorationAttempts">
                    <measurementName>scscfSipMessageBasedPcscfRestorationAttempts</measurementName>
                    <description>
                          The number of P-CSCF Restoration SIP MESSAGE received by the S-CSCF.
                          The counter is keyed on the reasons triggering the SIP MESSAGE based P-CSCF Restoration, that is "PcrfFailure" or "SbcRestoration";
                          and a "sum" key for the total number of P-CSCF Restoration SIP MESSAGE received by S-CSCF.
                    </description>
                    <condition>
                          This counter is incremented when a SIP MESSAGE is received with the Request-URI set to the S-CSCF address, and the XML indication is "pcrf-failure" or "sbc-restoration".
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>3</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SipMessageBasedPcscfRestorationCause</keyTypeName>
                </counter>
                <counter measurementType="scscfSipMessageBasedPcscfRestorationFailure">
                    <measurementName>scscfSipMessageBasedPcscfRestorationFailure</measurementName>
                    <description>
                          The number of failed SIP MESSAGE based P-CSCF Restoration.
                          The counter with the "sum" key is used for the total number of failed SIP MESSAGE based P-CSCF Restorations.
                          The counter is also keyed on SipMessageBasedPcscfRestorationCause ("PcrfFailure"  or "SbcRestoration"), SIP Response Code, and Hex Error Code. For example: SipMessageBasedPcscfRestorationCause=PcrfFailure,SIPResponseCode=403,HexErrorCode=03033360D.
                    </description>
                    <condition>
                          This counter is incremented when the response to the SIP MESSAGE request received for initiating SIP MESSAGE based P-CSCF Restoration procedure is not successful.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>20</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SipMessageBasedPcscfRestorationCause</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                    <keyTypeName>HexErrorCode</keyTypeName>
                </counter>
                <counter measurementType="scscfAttemptedRegistrationPerAccess">
                    <measurementName>scscfAttemptedRegistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of attempted initial registrations (first contact or adding new contact) per access type in S-CSCF.
                        The counter is keyed on the access type value in P-Access-Network-Information header in the REGISTER request.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented at receipt of an initial REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfSuccessfulRegistrationPerAccess">
                    <measurementName>scscfSuccessfulRegistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of successful initial registrations (first contact or adding new contact) per access type in S-CSCF.
                        The counter is keyed on the access type value in the P-Access-Network-Information header in the REGISTER request.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when sending a successful final response (2xx) to an initial REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfFailedRegistrationPerAccess">
                    <measurementName>scscfFailedRegistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of non-successful initial registrations (first contact or adding new contact) per access type.
                        The counter is keyed on the access type value in the P-Access-Network-Information header in the REGISTER request and error code (3xx/4xx/5xx/6xx) from the response.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when an initial REGISTER is rejected.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>200</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfAttemptedReregistrationPerAccess">
                    <measurementName>scscfAttemptedReregistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of attempted reregistrations per access type in S-CSCF.
                        The counter is keyed on the access type value in the P-Access-Network-Information header in the Re-REGISTER request.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented at receipt of a Re-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfSuccessfulReregistrationPerAccess">
                    <measurementName>scscfSuccessfulReregistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of successful reregistrations per access type in S-CSCF.
                        The counter is keyed on the access type value in the P-Access-Network-Information header in the Re-REGISTER request.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when sending a successful final response (2xx) to a Re-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfFailedReregistrationPerAccess">
                    <measurementName>scscfFailedReregistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of non-successful reregistrations per access type.
                        The counter is keyed on the access type value in the P-Access-Network-Information header in the Re-REGISTER request and error code (3xx/4xx/5xx/6xx) from the response.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when a Re-REGISTER is rejected.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>200</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfAttemptedDeregistrationPerAccess">
                    <measurementName>scscfAttemptedDeregistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of attempted user initiated deregistrations per access type in S-CSCF.
                        The counter is keyed on the access type value in the P-Access-Network-Information header in the De-REGISTER request.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented at receipt of a De-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfSuccessfulDeregistrationPerAccess">
                    <measurementName>scscfSuccessfulDeregistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of successful user initiated deregistrations per access type in S-CSCF.
                        The counter is keyed on the access type value in the P-Access-Network-Information header in the De-REGISTER request.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when sending a successful final response (2xx) to a De-REGISTER request.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfFailedDeregistrationPerAccess">
                    <measurementName>scscfFailedDeregistrationPerAccess</measurementName>
                    <description>
                        This counter is the number of non-successful deregistrations per access type.
                        The counter is keyed on the access type value in the P-Access-Network-Information header in the De-REGISTER request and error code (3xx/4xx/5xx/6xx) from the response.
                        If the PANI header is not received, "DEFAULT" is used as key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when a De-REGISTER is rejected.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Registration Statistics Counters</cpiHeading>
                    <cardinality>200</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigAttemptedInvitePerAccess">
                    <measurementName>scscfOrigAttemptedInvitePerAccess</measurementName>
                    <description>
                        This counter is the number of attempted INVITE session establishments per access type in originating S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user.
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when an initial INIVITE is received in originating S-CSCF.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigSuccessfulEstablishedInvitePerAccess">
                    <measurementName>scscfOrigSuccessfulEstablishedInvitePerAccess</measurementName>
                    <description>
                        This counter is the number of successful INVITE session establishments per access type in originating S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user and the response code (18x/2xx).
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when the first SIP provisional response (typically 180 Ringing) to the initial INVITE is transmitted by originating S-CSCF.
                        If the INVITE is answered by 2xx without provisional response, the counter is incremented as well.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>40</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigAnsweredInvitePerAccess">
                    <measurementName>scscfOrigAnsweredInvitePerAccess</measurementName>
                    <description>
                        This counter is the number of answered session establishments per access type in originating S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user.
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when the first 2xx response to the initial SIP INVITE is transmitted by originating S-CSCF.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigFailedInvitePerAccess">
                    <measurementName>scscfOrigFailedInvitePerAccess</measurementName>
                    <description>
                        This counter is the number of non-successful INVITE session establishments per access type in originating S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user and the error code (3xx/4xx/5xx/6xx) in the response.
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when a non-successful response (with 3xx, 4xx, 5xx or 6xx error code) to the initial INVITE is transmitted by the S-CSCF.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>200</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTermAttemptedInvitePerAccess">
                    <measurementName>scscfTermAttemptedInvitePerAccess</measurementName>
                    <description>
                        This counter is the number of attempted INVITE session establishments per access type in terminating S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user.
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when an initial INVITE is received in terminating S-CSCF.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>INVITE Session Setup Attempt Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfTermSuccessfulEstablishedInvitePerAccess">
                    <measurementName>scscfTermSuccessfulEstablishedInvitePerAccess</measurementName>
                    <description>
                        This counter is the number of successful INVITE session establishments per access type in terminating S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user and the response code (18x/2xx).
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        The counter is incremented when the first SIP provisional response (typically 180 Ringing) to the initial INVITE is transmitted by the S-CSCF.
                        If the INVITE is answered by 2xx without provisional response, the counter is incremented as well.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>40</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTermAnsweredInvitePerAccess">
                    <measurementName>scscfTermAnsweredInvitePerAccess</measurementName>
                    <description>
                        This counter is the number of answered session establishments per access type in terminating S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user.
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when the 2xx response to the initial SIP INVITE is transmitted by the terminating S-CSCF.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfTermFailedInvitePerAccess">
                    <measurementName>scscfTermFailedInvitePerAccess</measurementName>
                    <description>
                        This counter is the number of failed INVITE session establishments per access type in terminating S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user and the error code (3xx/4xx/5xx/6xx) in the response.
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        The S-CSCF will also always increment the counter once with the key "SUM".
                    </description>
                    <condition>
                        This counter is incremented when a non-successful response (with 3xx, 4xx, 5xx or 6xx error code) to the initial INVITE is transmitted by the S-CSCF.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Setup Accessibility Counters</cpiHeading>
                    <cardinality>200</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigAccumulatedCallTimePerAccess">
                    <measurementName>scscfOrigAccumulatedCallTimePerAccess</measurementName>
                    <description>
                        This counter is the accumulated INVITE session time per access type in seconds in originating S-CSCF.
                        The duration for each INVITE session is between receiving 200OK (INVITE) and receiving BYE in S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user.
                        If no access type  has been stored, "DEFAULT" is used as the counter key.
                        If authentication is active for BYE request then it is the BYE with valid challenge response that triggers this counter.
                    </description>
                    <condition>
                        It is incremented for each INVITE session with amount of seconds between receiving 200OK (INVITE) and receiving BYE in S-CSCF .
                        The counter is not incremented for expired sessions.
                        The counter is not incremented for the cases where it is S-CSCF itself that generates BYE (for example when credit limit is reached for online charging or when administrative state of CSCF is locked).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfTermAccumulatedCallTimePerAccess">
                    <measurementName>scscfTermAccumulatedCallTimePerAccess</measurementName>
                    <description>
                        This counter is the accumulated INVITE session time per access type in seconds in terminating S-CSCF.
                        The duration for each INVITE session is between receiving 200OK (INVITE) and receiving BYE in S-CSCF.
                        The counter is keyed on the stored access type value from P-Access-Network-Info in REGISTER request for the served user.
                        If no access type has been stored, "DEFAULT" is used as the counter key.
                        If authentication is active for BYE request then it is the BYE with valid challenge response that triggers this counter.
                    </description>
                    <condition>
                        This counter is incremented for each INVITE session with amount of seconds between receiving 200OK (INVITE) and receiving BYE in S-CSCF.
                        The counter is not incremented for expired sessions.
                        The counter is not incremented for the cases where it is S-CSCF itself that generates BYE (for example when credit limit is reached for online charging or when administrative state of CSCF is locked).
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>AccessType</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigAttemptedSessionPerMedia">
                    <measurementName>scscfOrigAttemptedSessionPerMedia</measurementName>
                    <description>
                        Number of attempted INVITE session establishments per media type in originating S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP offer received during the call establishment.
                        The counter is keyed for the following media types: Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigSuccessfulEstablishedSessionPerMedia">
                    <measurementName>scscfOrigSuccessfulEstablishedSessionPerMedia</measurementName>
                    <description>
                        Number of successful INVITE session establishments per media type in originating S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP answer received.
                        The first SDP answer could be received during call establishment or in the successful answer.
                        The counter has two keys, the SIP response code of the SIP response that carried the SDP answer, and the media type that can be one of the following:  Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>40</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigAnsweredSessionPerMedia">
                    <measurementName>scscfOrigAnsweredSessionPerMedia</measurementName>
                    <description>
                        Number of successfully answered sessions (SIP 2xx received) per media type in originating S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP answer received. The first SDP answer could be received during call establishment or in the successful answer.
                        The counter is keyed for the following media types: Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigFailedSessionPerMedia">
                    <measurementName>scscfOrigFailedSessionPerMedia</measurementName>
                    <description>
                        Number of unsuccessful INVITE session establishments per media type in originating S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP offer received during the call establishment.
                        The counter has two keys, the SIP response code (3xx/4xx/5xx/6xx), and the media type that can be one of the following:  Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>200</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfOrigAccumulatedCallTimePerMedia">
                    <measurementName>scscfOrigAccumulatedCallTimePerMedia</measurementName>
                    <description>
                        The accumulated session time per media type in seconds in originating S-CSCF.
                        The duration for each INVITE session is between receiving 2xx (INVITE) and receiving BYE in S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP answer received. The first SDP answer could be received during call establishment or in the successful answer.
                        The counter is keyed for the following media types: Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                        If authentication is active for BYE request then it is the BYE with valid challenge response that triggers this counter.
                        The counter is not incremented for expired sessions. The counter is not incremented for the cases where it is S-CSCF itself that generates BYE (for example when credit limit is reached for online charging or when administrative state of CSCF is locked).
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                </counter>
                <counter measurementType="scscfTermAttemptedSessionPerMedia">
                    <measurementName>scscfTermAttemptedSessionPerMedia</measurementName>
                    <description>
                        Number of attempted INVITE session establishments per media type in terminating S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP offer received during the call establishment.
                        The counter is keyed for the following media types: Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                </counter>
                <counter measurementType="scscfTermSuccessfulEstablishedSessionPerMedia">
                    <measurementName>scscfTermSuccessfulEstablishedSessionPerMedia</measurementName>
                    <description>
                        Number of successful INVITE session establishments per media type in terminating S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP answer received. The first SDP answer could be received during call establishment or in the successful answer.
                        The counter has two keys, the SIP response code of the SIP response that carried the SDP answer, and the media type that can be one of the following:  Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>40</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTermAnsweredSessionPerMedia">
                    <measurementName>scscfTermAnsweredSessionPerMedia</measurementName>
                    <description>
                        Number of successfully answered sessions (SIP 2xx received) per media type in terminating S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP answer received. The first SDP answer could be received during call establishment or in the successful answer.
                        The counter is keyed for the following media types: Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                </counter>
                <counter measurementType="scscfTermFailedSessionPerMedia">
                    <measurementName>scscfTermFailedSessionPerMedia</measurementName>
                    <description>
                        Number of unsuccessful INVITE session establishments per media type in terminating S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP offer received during the call establishment.
                        The counter has two keys, the SIP response code (3xx/4xx/5xx/6xx), and the media type that can be one of the following:  Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>200</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                    <keyTypeName>SIPResponseCode</keyTypeName>
                </counter>
                <counter measurementType="scscfTermAccumulatedCallTimePerMedia">
                    <measurementName>scscfTermAccumulatedCallTimePerMedia</measurementName>
                    <description>
                        The accumulated session time per media type in seconds in terminating S-CSCF.
                        The duration for each INVITE session is between receiving 2xx (INVITE) and receiving BYE in S-CSCF.
                    </description>
                    <condition>
                        It is incremented once for each unique media type present in the first SDP answer received. The first SDP answer could be received during call establishment or in the successful answer.
                        The counter is keyed for the following media types: Application, Audio, Control, Data, Image, Message, Model, Multipart, Text and Video.
                        The "DEFAULT" key is used for unknown media types.
                        S-CSCF also increments the counter with key "SUM" once per media type.
                        If authentication is active for BYE request then it is the BYE with valid challenge response that triggers this counter.
                        The counter is not incremented for expired sessions.
                        The counter is not incremented for the cases where it is S-CSCF itself that generates BYE (for example when credit limit is reached for online charging or when administrative state of CSCF is locked).
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                           subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <cpiHeading>Session Statistics Counters</cpiHeading>
                    <cardinality>10</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>MediaType</keyTypeName>
                </counter>

                <counter measurementType="cscfActiveUsersPerProfile">
                    <measurementName>cscfActiveUsersPerProfile</measurementName>
                    <description>
                        This counter is the number of active users per profile during the measurement interval in CSCF. The counter is keyed on the active user profile.
                    </description>
                    <condition>
                        This counter is incremented for the present measurement interval when an initial SIP request is received. The counter shall be incremented whether the request is successful or not.
                        If the applicable counter has already been incremented for current measurement interval, the CSCF shall not increment the counter again for the same user during the current measurement interval.
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MAX</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Active User Statistics Counters</cpiHeading>
                    <cardinality>3</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                 <counter measurementType="scscfUserRedistributionNotRegistered">
                    <measurementName>scscfUserRedistributionNotRegistered</measurementName>
                    <description>
                        The number of users that are redistributed at registration attempts where the user is not registered or in state unregistered by S-CSCF when Administrative State is "Shutting Down".
                    </description>
                    <condition>
                        The counter is incremented when a REGISTER request is rejected with 305 (Use Proxy) or 480 (Temporary Unavailable) responses by S-CSCF for a not registered user or a user in state unregistered
                        when Administrative State of S-CSCF is "Shutting Down".
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response Statistics</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="scscfUserRedistributionRegistered">
                    <measurementName>scscfUserRedistributionRegistered</measurementName>
                    <description>
                        The number of users that are redistributed at registration attempts where the user has at least one contact registered in S-CSCF when Administrative State is "Shutting Down".
                    </description>
                    <condition>
                        The counter is incremented when a REGISTER request is rejected with 305 (Use Proxy) or 480 (Temporary Unavailable) responses by S-CSCF for a user with at least one registered
                        contact (regular or emergency) when Administrative State of S-CSCF is "Shutting Down".
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response Statistics</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <generation>IMS</generation>
            </group>
            <moc_level>
                0
            </moc_level>
        </moc>

        <moc name="CscfSipServer">
            <description>
                The default CscfSipServer xml file location is /opt/telorb/axe/tsp/NM/PMF/reporterLogs/CscfSipServer
                and the CscfSipServer counter group is CscfSipServer as used in the xml file name.
            </description>
            <switchingTechnology>
                Packet Switched
            </switchingTechnology>

            <imsPmConfig>
                <nPMFConfig>
                    <pmApplication>
                        <reportingRootDirectory>/opt/telorb/axe/tsp/NM/PMF/reporterLogs</reportingRootDirectory>
                        <enable>true</enable>
                        <maxMonitorNr/>
                        <measReaderNr/>
                        <timeZone>utc</timeZone>
                        <maxPmdbMemSize/>
                        <maxPmdbCpuLoad/>
                        <maxAlarmPerMeasType/>
                        <monitorGroup>
                            <name>Cscf</name>
                            <measurementJob>
                                <name>CscfSipServer</name>
                                <enabled>true</enabled>
                                <priority>4</priority>
                                <granularityPeriod>300</granularityPeriod>
                                <notifyMOEvents>true</notifyMOEvents>
                                <reportingDirectory>CscfSipServer</reportingDirectory>
                                <notifyFileReady>false</notifyFileReady>
                                <reportingFormat>DTD</reportingFormat>
                                <measurementJobReader>
                                    <name>sipSummaryInRequests</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipSummaryOutResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipSummaryServerTransactions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sigcompCompressionFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sigcompCompressionSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sigcompDecompressionFailures</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sigcompDecompressionSuccesses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsAckIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsByeIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsCancelIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsExtMethodIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsGlobalFailClassOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsInfoClassOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsInviteIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsNotifyIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsOptionsIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsPublishIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRedirClassOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsReferIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRegisterIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsReqFailClassOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsServerFailClassOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsSubscribeIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsSuccessClassOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsMessageIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsTcpCongestions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsUdpCongestions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>cscfPeakSipReportingOverloadControlValue</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>cscfAverageSipReportingOverloadControlValue</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>cscfSipReportingOverloadControlDuration</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                   <name>cscfSipReportingOverloadControlPeriods</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                            </measurementJob>
                            <thresholdMonitor>
                                <name>CscfSipServerThresholdMonitor</name>
                                <enabled>true</enabled>
                                <granularityPeriod>300</granularityPeriod>
                                <ThresholdMonitorReader>
                                    <name>sipStatsTcpCongestions</name>
                                    <enabled>true</enabled>
                                    <minorLevel>
                                        <armLevel>0</armLevel>
                                        <disarmLevel>0</disarmLevel>
                                    </minorLevel>
                                    <faultId>43</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>ProcessingError</type>
                                    <specificProblem>CSCF, TCP SIP Load Regulation Rejection</specificProblem>
                                    <probableCause>310</probableCause>
                                    <alarmObjectClass>CscfSipServer</alarmObjectClass>
                                    <additionalInfo>sipStatsTcpCongestions, rejected SIP messages due to load regulation.</additionalInfo>
                                </ThresholdMonitorReader>
                                <ThresholdMonitorReader>
                                    <name>sipStatsUdpCongestions</name>
                                    <enabled>true</enabled>
                                    <minorLevel>
                                        <armLevel>0</armLevel>
                                        <disarmLevel>0</disarmLevel>
                                    </minorLevel>
                                    <faultId>44</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>ProcessingError</type>
                                    <specificProblem>CSCF, UDP SIP Load Regulation Rejection</specificProblem>
                                    <probableCause>310</probableCause>
                                    <alarmObjectClass>CscfSipServer</alarmObjectClass>
                                    <additionalInfo>sipStatsUdpCongestions, rejected SIP messages due to load regulation.</additionalInfo>
                                </ThresholdMonitorReader>
                            </thresholdMonitor>
                        </monitorGroup>
                    </pmApplication>
                </nPMFConfig>
            </imsPmConfig>

            <group>
                <!-- ============================  -->
                <!-- counters without keys         -->
                <!-- ============================  -->
                <description/>
                <!--**FIXME**index sequence="1" name="CscfSipServer" type="defaultRDNtype"/-->
                <!--**FIXME**index sequence="2" name="Source" type="systemRDNtype"/-->
                <!--**FIXME**index sequence="2" name="Source" type="processorRDNtype"/-->
                <counter measurementType="sipSummaryInRequests">
                    <measurementName>sipSummaryInRequests</measurementName>
                    <description>The total number of SIP requests received, including retransmissions.</description>
                    <condition>Reception of any SIP request will increment this counter.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Summary Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipSummaryOutResponses">
                    <measurementName>sipSummaryOutResponses</measurementName>
                    <description>The total number of SIP responses sent (originated and relayed), including retransmissions.</description>
                    <condition>Transmission of any SIP response will make this counter to be incremented.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Summary Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipSummaryServerTransactions">
                    <measurementName>sipSummaryServerTransactions</measurementName>
                    <description>The total number of SIP server transactions that are in progress or that have reached the terminated state.</description>
                    <condition>This counter will be incremented for every SIP server transaction.
                    For unsuccessful INVITE requests (with non-2xx responses), the ACK request is included in the INVITE transaction.
                    For successful INVITE requests (with 2xx responses), the ACK request is counted as a separate transaction.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Summary Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sigcompCompressionFailures">
                    <measurementName>sigcompCompressionFailures</measurementName>
                    <description>
                        The total number of outgoing SIP messages that are not successfully compressed.
                    </description>
                    <condition>
                        Any outgoing SIP message that is not successfully compressed will increment this counter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Compressor Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sigcompCompressionSuccesses">
                    <measurementName>sigcompCompressionSuccesses</measurementName>
                    <description>
                        The total number of outgoing SIP messages that are successfully compressed.
                    </description>
                    <condition>
                        Any outgoing SIP message that is successfully compressed will increment this counter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Compressor Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sigcompDecompressionFailures">
                    <measurementName>sigcompDecompressionFailures</measurementName>
                    <description>
                        The total number of received SigComp messages that are not successfully decompressed.
                    </description>
                    <condition>
                        Any received SigComp message that is not successfully decompressed will increment this counter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Decompressor Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sigcompDecompressionSuccesses">
                    <measurementName>sigcompDecompressionSuccesses</measurementName>
                    <description>
                        The total number of received sigComp messages that are successfully decompressed.
                    </description>
                    <condition>
                        Any received sigComp message that is successfully decompressed will increment this counter.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>obsolete</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>Decompressor Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsAckIns">
                    <measurementName>sipStatsAckIns</measurementName>
                    <description>
                        The total number of ACK requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received ACK requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsByeIns">
                    <measurementName>sipStatsByeIns</measurementName>
                    <description>
                        The total number of BYE requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received BYE requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsCancelIns">
                    <measurementName>sipStatsCancelIns</measurementName>
                    <description>
                        The total number of CANCEL requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received CANCEL requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsExtMethodIns">
                    <measurementName>sipStatsExtMethodIns</measurementName>
                    <description>
                        The total number of extension method requests received, including retransmissions.
                        This does not include extension methods for which separate counters are defined.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every received extension method requests that do not have a separate counter.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsGlobalFailClassOuts">
                    <measurementName>sipStatsGlobalFailClassOuts</measurementName>
                    <description>
                        The total number of 6xx class SIP responses sent (originated and relayed), including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every sent 6xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response-out Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsInfoClassOuts">
                    <measurementName>sipStatsInfoClassOuts</measurementName>
                    <description>
                        The total number of 1xx class SIP responses sent (originated and relayed), including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every sent 1xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response-out Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsInviteIns">
                    <measurementName>sipStatsInviteIns</measurementName>
                    <description>
                        The total number of INVITE requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received INVITE requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsNotifyIns">
                    <measurementName>sipStatsNotifyIns</measurementName>
                    <description>
                        The number of NOTIFY requests received, not including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received NOTIFY requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsOptionsIns">
                    <measurementName>sipStatsOptionsIns</measurementName>
                    <description>
                        The total number of OPTIONS requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received OPTION requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsPublishIns">
                    <measurementName>sipStatsPublishIns</measurementName>
                    <description>
                        The total number of PUBLISH requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received PUBLISH requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsRedirClassOuts">
                    <measurementName>sipStatsRedirClassOuts</measurementName>
                    <description>
                        The total number of 3xx class SIP responses sent (originated and relayed), including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every sent 3xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response-out Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsReferIns">
                    <measurementName>sipStatsReferIns</measurementName>
                    <description>
                        The total number of REFER requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition> This counter will be incremented for every received REFER requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsRegisterIns">
                    <measurementName>sipStatsRegisterIns</measurementName>
                    <description>
                        The total number of REGISTER requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received REGISTER requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsReqFailClassOuts">
                    <measurementName>sipStatsReqFailClassOuts</measurementName>
                    <description>
                        The total number of 4xx class SIP responses sent (originated and relayed), including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every sent 4xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response-out Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsServerFailClassOuts">
                    <measurementName>sipStatsServerFailClassOuts</measurementName>
                    <description>
                        The total number of 5xx class SIP responses sent (originated and relayed), including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent 5xx class SIP responses.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response-out Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsSubscribeIns">
                    <measurementName>sipStatsSubscribeIns</measurementName>
                    <description>
                        The total number of SUBSCRIBE requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received SUBSCRIBE requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsSuccessClassOuts">
                    <measurementName>sipStatsSuccessClassOuts</measurementName>
                    <description>
                        The total number of 2xx class SIP responses sent (originated and relayed), including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition> This counter will be incremented for every sent 2xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response-out Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsMessageIns">
                    <measurementName>sipStatsMessageIns</measurementName>
                    <description>
                        The total number of MESSAGE requests received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received MESSAGE requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request-in Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPServerIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsTcpCongestions">
                    <measurementName>sipStatsTcpCongestions</measurementName>
                    <description>
                        The total number of SIP messages received via TCP transport protocol,
                        including retransmissions that are rejected due to load regulation.
                        The counter is used to raise and cease the threshold alarm CSCF,
                        TCP SIP Load Regulation Rejection. The thresholds for raising and ceasing the alarm are configurable,
                        see alarm OPI for further information.
                    </description>
                    <condition>
                        This counter will be incremented for every rejected SIP message due to load regulation when received via TCP transport protocol.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Load Regulation Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsUdpCongestions">
                    <measurementName>sipStatsUdpCongestions</measurementName>
                    <description>
                        The total number of SIP messages received via UDP transport protocol,
                        including retransmissions that are rejected due to load regulation.
                        The counter is used to raise and cease the threshold alarm CSCF,
                        UDP SIP Load Regulation Rejection. The thresholds for raising and ceasing the alarm are configurable,
                        see alarm OPI for further information.
                    </description>
                    <condition>
                        This counter will be incremented for every rejected SIP message due to load regulation when received via UDP transport protocol.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Load Regulation Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfPeakSipReportingOverloadControlValue">
                    <measurementName>cscfPeakSipReportingOverloadControlValue</measurementName>
                    <description>
                        This counter shows the maximum oc-value generated for
                        the SIP Overload Control function during a granularity period.
                    </description>
                    <condition>
                        The counter is updated every second with current calculated oc-value
                        based on the cluster average resource utilization level when the reporting role
                        for SIP Overload Control is enabled.
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MAX</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Overload Control Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfAverageSipReportingOverloadControlValue">
                    <measurementName>cscfAverageSipReportingOverloadControlValue</measurementName>
                    <description>
                        This counter shows the average oc-value generated for the SIP Overload Control
                        function during a granularity period.
                    </description>
                    <condition>
                        The counter is updated every second with current calculated oc-value based on
                        the cluster average  resource utilization level when the reporting role for
                        SIP Overload Control is enabled.
                    </condition>
                    <collectionMethod>
                        <type>GAUGE</type>
                        <subtype>MEAN</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>float</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Overload Control Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfSipReportingOverloadControlDuration">
                    <measurementName>cscfSipReportingOverloadControlDuration</measurementName>
                    <description>
                        This counter shows the number of seconds which the node spent in overload
                        condition during a granularity period.
                    </description>
                    <condition>
                        The counter is incremented by 1 in each second during the overload period
                        when the oc-value is larger than zero for the reporting role of SIP Overload Control.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Overload Control Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="cscfSipReportingOverloadControlPeriods">
                    <measurementName>cscfSipReportingOverloadControlPeriods</measurementName>
                    <description>
                        This counter shows the number of times when the node entered the overload
                        operation mode during a granularity period.
                    </description>
                    <condition>
                        The counter is incremented by 1 when the node entered the overload mode,
                        when the oc-value becomes larger than zero, for the reporting role of SIP Overload Control.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Overload Control Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <generation>IMS</generation>
            </group>
            <moc_level>
                0
            </moc_level>
        </moc>
        <moc name="CscfSipClient">
            <description>
                The default CscfSipClient xml file location is /opt/telorb/axe/tsp/NM/PMF/reporterLogs/CscfSipClient
                and the CscfSipClient counter group is CscfSipClient as used in the xml file name.
            </description>
            <switchingTechnology>
                Packet Switched
            </switchingTechnology>

            <imsPmConfig>
                <nPMFConfig>
                    <pmApplication>
                        <reportingRootDirectory>/opt/telorb/axe/tsp/NM/PMF/reporterLogs</reportingRootDirectory>
                        <enable>true</enable>
                        <maxMonitorNr/>
                        <measReaderNr/>
                        <timeZone>utc</timeZone>
                        <maxPmdbMemSize/>
                        <maxPmdbCpuLoad/>
                        <maxAlarmPerMeasType/>
                        <monitorGroup>
                            <name>Cscf</name>
                            <measurementJob>
                                <name>CscfSipClient</name>
                                <enabled>true</enabled>
                                <priority>4</priority>
                                <granularityPeriod>300</granularityPeriod>
                                <notifyMOEvents>true</notifyMOEvents>
                                <reportingDirectory>CscfSipClient</reportingDirectory>
                                <notifyFileReady>false</notifyFileReady>
                                <reportingFormat>DTD</reportingFormat>
                                <measurementJobReader>
                                    <name>sipSummaryClientTransactions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipSummaryOutRequests</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipSummaryInResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipSummaryNonSipMessages</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsAckOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsByeOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsCancelOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsExtMethodOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsGlobalFailClassIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsInfoClassIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsInviteOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsNotifyOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsOptionsOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsPublishOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRedirClassIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsReferOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRegisterOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsReqFailClassIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsMessageOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryExtMethod</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryFinalResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryNonFinalResponses</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryNotify</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryPublish</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryRefer</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryByes</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryCancels</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryInvites</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryOptions</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryRegisters</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetrySubscribe</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsRetryMessage</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsServerFailClassIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsStackCongestions</name>
                                    <enabled>false</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsSubscribeOuts</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsSuccessClassIns</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                                <measurementJobReader>
                                    <name>sipStatsReqTimeout</name>
                                    <enabled>true</enabled>
                                </measurementJobReader>
                            </measurementJob>
                            <thresholdMonitor>
                                <name>CscfSipClientThresholdMonitor</name>
                                <enabled>true</enabled>
                                <granularityPeriod>300</granularityPeriod>
                                <ThresholdMonitorReader>
                                    <name>sipStatsReqTimeout</name>
                                    <enabled>true</enabled>
                                    <minorLevel>
                                        <armLevel>150</armLevel>
                                        <disarmLevel>4</disarmLevel>
                                    </minorLevel>
                                    <faultId>17</faultId>
                                    <alarmDirection>Up</alarmDirection>
                                    <mode>Crossed</mode>
                                    <type>Communication</type>
                                    <specificProblem>CSCF SIP Request Timed Out</specificProblem>
                                    <probableCause>305</probableCause>
                                    <alarmObjectClass>CscfSipClient</alarmObjectClass>
                                    <additionalInfo>sipStatsReqTimeout. Request timed out without having received a response.</additionalInfo>
                                </ThresholdMonitorReader>
                            </thresholdMonitor>
                        </monitorGroup>
                    </pmApplication>
                </nPMFConfig>
            </imsPmConfig>

            <group>
                <!-- ============================  -->
                <!-- counters without keys         -->
                <!-- ============================  -->
                <description/>
                <!--**FIXME**index sequence="1" name="CscfSipClient" type="defaultRDNtype"/-->
                <!--**FIXME**index sequence="2" name="Source" type="systemRDNtype"/-->
                <!--**FIXME**index sequence="2" name="Source" type="processorRDNtype"/-->
                <counter measurementType="sipSummaryClientTransactions">
                    <measurementName>sipSummaryClientTransactions</measurementName>
                    <description>The total number of SIP client transactions that are in progress or that have reached the terminated state. </description>
                    <condition>This counter will be incremented for every SIP client transaction.
                    For unsuccessful INVITE requests (with non-2xx responses), the ACK request is included in the INVITE transaction.
                    For successful INVITE requests (with 2xx responses), the ACK request is counted as a separate transaction.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Summary Statistics Counters Client</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipSummaryOutRequests">
                    <measurementName>sipSummaryOutRequests</measurementName>
                    <description>The total number of SIP requests sent (originated and relayed),
                    including retransmissions, forking, and so on.</description>
                    <condition>Transmission of any SIP request will make this counter to be incremented.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Summary Statistics Counters Client</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipSummaryInResponses">
                    <measurementName>sipSummaryInResponses</measurementName>
                    <description>The total number of SIP responses received, including retransmissions.</description>
                    <condition>Reception of any SIP response will make this counter to be incremented.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Summary Statistics Counters Client</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipSummaryNonSipMessages">
                    <measurementName>sipSummaryNonSipMessages</measurementName>
                    <description>The total number of unintelligible SIP messages received, including retransmissions.
                    This includes and is limited to messages that can not be recognized as requests or responses and responses with invalid response codes.</description>
                    <condition>Each time a message is not recognized as a valid SIP message this counter will be incremented.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Summary Statistics Counters Client</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsAckOuts">
                    <measurementName>sipStatsAckOuts</measurementName>
                    <description>
                        The total number of ACK requests sent (originated and relayed), including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent ACK requests.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsByeOuts">
                    <measurementName>sipStatsByeOuts</measurementName>
                    <description>
                        The total number of BYE requests sent (originated and relayed), including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent BYE requests.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsCancelOuts">
                    <measurementName>sipStatsCancelOuts</measurementName>
                    <description>
                        The total number of CANCEL requests sent (originated and relayed), including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent CANCEL requests.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsExtMethodOuts">
                    <measurementName>sipStatsExtMethodOuts</measurementName>
                    <description>
                        The total number of extension method requests sent (originated and relayed), including retransmissions, forking, and the like.
                        This does not include extension methods for which separate counters are defined.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent extension method requests that do not have a separate counter.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsGlobalFailClassIns">
                    <measurementName>sipStatsGlobalFailClassIns</measurementName>
                    <description>
                        The total number of 6xx class SIP responses received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received 6xx class SIP responses.</condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsInfoClassIns">
                    <measurementName>sipStatsInfoClassIns</measurementName>
                    <description>The total number of 1xx class SIP responses received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received 1xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsInviteOuts">
                    <measurementName>sipStatsInviteOuts</measurementName>
                    <description>
                        The total number of INVITE requests sent (originated and relayed), including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent INVITE requests.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsNotifyOuts">
                    <measurementName>sipStatsNotifyOuts</measurementName>
                    <description>
                        The number of NOTIFY requests sent (originated and relayed), forking, and the like, not including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent NOTIFY requests.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsOptionsOuts">
                    <measurementName>sipStatsOptionsOuts</measurementName>
                    <description>
                        The total number of OPTIONS requests sent (originated and relayed),including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent OPTION requests.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsPublishOuts">
                    <measurementName>sipStatsPublishOuts</measurementName>
                    <description>
                        The total number of PUBLISH requests sent (originated and relayed),including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent PUBLISH requests.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsRedirClassIns">
                    <measurementName>sipStatsRedirClassIns</measurementName>
                    <description>
                        The total number of 3xx class SIP responses received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received 3xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsReferOuts">
                    <measurementName>sipStatsReferOuts</measurementName>
                    <description>
                        The total number of REFER requests sent (originated and relayed), including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent REFER requests.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsRegisterOuts">
                    <measurementName>sipStatsRegisterOuts</measurementName>
                    <description>
                        The total number of REGISTER requests sent (originated and relayed), including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent REGISTER requests.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsReqFailClassIns">
                    <measurementName>sipStatsReqFailClassIns</measurementName>
                    <description>
                        The total number of 4xx class SIP responses received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received 4xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsMessageOuts">
                    <measurementName>sipStatsMessageOuts</measurementName>
                    <description>
                        The total number of MESSAGE requests sent (originated and relayed), including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent MESSAGE requests.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsRetryExtMethod">
                    <measurementName>sipStatsRetryExtMethod</measurementName>
                    <description>The total number of extension method request retransmissions that have been sent.
                    This does not include extension methods for which separate counters are defined.
                    Note: The number of unique extension method requests sent (originated and relayed) equals sipStatsExtMethodOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted extension method requests.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryFinalResponses">
                    <measurementName>sipStatsRetryFinalResponses</measurementName>
                    <description>The total number of final response retransmissions that have been sent.</description>
                    <condition>This counter will be incremented for every retransmitted final responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryNonFinalResponses">
                    <measurementName>sipStatsRetryNonFinalResponses</measurementName>
                    <description>The total number of non-final response retransmissions that have been sent.
                    Note: The number of unique non-final responses sent (originated and relayed) equals sipStatsInfoClassOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted non-final responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryNotify">
                    <measurementName>sipStatsRetryNotify</measurementName>
                    <description>The total number of NOTIFY request retransmissions that have been sent.
                    Note: The number of unique NOTIFY requests sent (originated and relayed) equals sipStatsNotifyOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted NOTIFY.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryPublish">
                    <measurementName>sipStatsRetryPublish</measurementName>
                    <description>
                        The total number of PUBLISH request retransmissions that have been sent.
                        Note: The number of unique PUBLISH requests sent (originated and relayed)
                        equals sipStatsPublishOuts minus this number.
                    </description>
                    <condition>This counter will be incremented for every retransmitted PUBLISH.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryRefer">
                    <measurementName>sipStatsRetryRefer</measurementName>
                    <description>
                        The total number of REFER request retransmissions that have been sent.
                        Note: The number of unique REFER requests sent(originated and relayed) equals sipStatsReferOuts minus this number.
                    </description>
                    <condition>This counter will be incremented for every retransmitted REFER.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryByes">
                    <measurementName>sipStatsRetryByes</measurementName>
                    <description>The total number of BYE request retransmissions that have been sent.
                    Note: The number of unique BYE requests sent (originated and relayed) equals sipStatsByeOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted BYE.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryCancels">
                    <measurementName>sipStatsRetryCancels</measurementName>
                    <description>The total number of CANCEL request retransmissions that have been sent.
                    Note: The number of unique CANCEL requests sent (originated and relayed) equals sipStatsCancelOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted CANCEL.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryInvites">
                    <measurementName>sipStatsRetryInvites</measurementName>
                    <description>The total number of INVITE request retransmissions that have been sent.
                    Note: The number of unique INVITE requests sent (originated and relayed) equals sipStatsInviteOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted INVITE.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryOptions">
                    <measurementName>sipStatsRetryOptions</measurementName>
                    <description>The total number of OPTIONS request retransmissions that have been sent.
                    Note: The number of unique OPTIONS requests sent (originated and relayed) equals sipStatsOptionsOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted OPTIONS.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryRegisters">
                    <measurementName>sipStatsRetryRegisters</measurementName>
                    <description>The total number of REGISTER request retransmissions that have been sent.
                    Note: The number of unique REGISTER requests sent (originated and relayed) equals sipStatsRegisterOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted REGISTER.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetrySubscribe">
                    <measurementName>sipStatsRetrySubscribe</measurementName>
                    <description>The total number of SUBSCRIBE request retransmissions that have been sent.
                    Note: The number of unique SUBSCRIBE requests sent (originated and relayed) equals sipStatsSubscribeOuts minus this number.</description>
                    <condition>This counter will be incremented for every retransmitted SUBSCRIBE.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsRetryMessage">
                    <measurementName>sipStatsRetryMessage</measurementName>
                    <description>
                        The total number of MESSAGE request retransmissions that have been sent.
                        Note: The number of unique MESSAGE requests sent (originated and relayed)
                        equals sipStatsMessageOuts minus this number.
                    </description>
                    <condition>
                        This counter will be incremented for every retransmitted MESSAGE.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Retransmission Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsServerFailClassIns">
                    <measurementName>sipStatsServerFailClassIns</measurementName>
                    <description>
                        The total number of 5xx class SIP responses received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received 5xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsStackCongestions">
                    <measurementName>sipStatsStackCongestions</measurementName>
                    <description>
                        The total number of SIP messages, including retransmissions,
                        discarded due to congestion in the SIP transaction and behavior layer
                    </description>
                    <condition>
                        This counter will be incremented for every discarded SIP messages
                        due to congestion in the SIP stack and behavior layers.
                    </condition>
                    <collectionMethod>
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>deprecated</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Load Regulation Statistics Counters</cpiHeading>
                    <cardinality>1</cardinality>
                    <std3GPPmeasurementType/>
                </counter>
                <counter measurementType="sipStatsSubscribeOuts">
                    <measurementName>sipStatsSubscribeOuts</measurementName>
                    <description>
                        The total number of SUBSCRIBE requests sent (originated and relayed), including retransmissions, forking, and the like.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>
                        This counter will be incremented for every sent SUBSCRIBE requests.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsSuccessClassIns">
                    <measurementName>sipStatsSuccessClassIns</measurementName>
                    <description>
                        The total number of 2xx class SIP responses received, including retransmissions.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                    </description>
                    <condition>This counter will be incremented for every received 2xx class SIP responses.</condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Response Statistics Counters</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <counter measurementType="sipStatsReqTimeout">
                    <measurementName>sipStatsReqTimeout</measurementName>
                    <description>
                        The total number a request times out without having received a response.
                        This counter is keyed on the remote IP address. Separate keys are maintained for addresses that are included in the CscfSipPMKey configuration parameter;
                        a default key is used for other addresses.
                        The counter is used to raise and cease the threshold alarm CSCF SIP Request Timed Out.
                        The thresholds for raising and ceasing the alarm are configurable, see alarm OPI for further information.
                    </description>
                    <condition>
                        This counter will be incremented every time a SIP request times out without having received a response.
                    </condition>
                    <collectionMethod>
                        <!--  type = CC, SI, GAUGE or DER,
                             subtype = MIN, MAX, LAST_UPDATE, RAW, MEAN, SUM -->
                        <type>CC</type>
                        <subtype>SUM</subtype>
                    </collectionMethod>
                    <measurementResult>
                        <!-- resultType = float, integer -->
                        <outputUnit/>
                        <resultType>integer</resultType>
                    </measurementResult>
                    <status>current</status>
                    <!-- cpiHeading= Free text, used as heading in CPI. -->
                    <cpiHeading>SIP Request Statistics</cpiHeading>
                    <cardinality>18</cardinality>
                    <std3GPPmeasurementType/>
                    <keyTypeName>SIPClientIPAddress</keyTypeName>
                </counter>
                <generation>IMS</generation>
            </group>
            <moc_level>
                0
            </moc_level>
        </moc>

        <keyTypesList>
            <keyType>
                <name>AccessType</name>
                <description>The key value is the access type in the P-Access-Network-Information header in the REGISTER request.</description>
            </keyType>
            <keyType>
                <name>Capability</name>
                <description>The keys are SIP capabilities.</description>
            </keyType>
            <keyType>
                <name>CicEnum</name>
                <description>
                    The key distinguishes between valid and invalid requests.</description>
            </keyType>
            <keyType>
                <name>CicNodeType</name>
                <description>The keys are diameter Abort-Cause values.</description>
            </keyType>
            <keyType>
                <name>DiameterAbortCause</name>
                <description>The keys are diameter Abort-Cause values.</description>
            </keyType>
            <keyType>
                <name>DiameterIdentity</name>
                <description>The FQDN of the Diameter node. For example, the contents of Origin-Host, Origin-Realm, Destination-Host, Destination-Realm AVPs of a Diameter message are of this type.</description>
            </keyType>
            <keyType>
                <name>DiameterResultCode</name>
                <description>The value of Result-Code or Experimental-Result-Code AVPs of a Diameter answer message.
                             Diameter provides the following classes of errors, all identified by the thousands digit in the decimal notation, 1xxx (Informational), 2xxx (Success),
                             3xxx (Protocol Errors), 4xxx (Transient Failures), 5xxx (Permanent Failure).
                </description>
            </keyType>
            <keyType>
                <name>DomainAndPort</name>
                <description>?</description>
            </keyType>
            <keyType>
                <name>FeatureTag</name>
                <description>The key is the feature tag received in SIP Request message (Accept-Contact header).
                        Summary key (global), summarize all keys.</description>
            </keyType>
            <keyType>
                <name>GnpEnum</name>
                <description>?</description>
            </keyType>
            <keyType>
                <name>GnpNodeType</name>
                <description>?</description>
            </keyType>
            <keyType>
                <name>LRFIPAddress</name>
                <description>The Key is a LRF IP-address.</description>
            </keyType>
            <keyType>
                <name>SIPClientIPAddress</name>
                <description>The Key is a SIP-client IP-address.</description>
            </keyType>
            <keyType>
                <name>SIPMethod</name>
                <description>A SIP method</description>
            </keyType>
            <keyType>
                <name>SIPResponseCode</name>
                <description>A SIP response code</description>
            </keyType>
            <keyType>
                <name>SIPResponseCodeAndPhrase</name>
                <description>SIP response code and phrase concatenated</description>
            </keyType>
            <keyType>
                <name>SIPResponseCodePhraseAndHexErrorCode</name>
                <description>SIP response code, phrase and hexadecimal error code concatenated</description>
            </keyType>
            <keyType>
                <name>HexErrorCode</name>
                <description>A hexadecimal error code</description>
            </keyType>
            <keyType>
                <name>SIPServerIPAddress</name>
                <description>The Key a SIP-server IP-address.</description>
            </keyType>
            <keyType>
                <name>SOAPResultCode</name>
                <description>?</description>
            </keyType>
            <keyType>
                <name>StatusCode</name>
                <description>?</description>
            </keyType>
            <keyType>
                <name>DiameterVendorId</name>
                <description>The value of the Vendor-Id AVP of a Diameter message is of this type. The Vendor-Id AVP contains the IANA "SMI Network Management Private Enterprise Codes" value assigned to the vendor of the Diameter application.</description>
            </keyType>
            <keyType>
                <name>DomainName</name>
                <description>FQDN</description>
            </keyType>
            <keyType>
                <name>GetsPriorityValue</name>
                <description>The key is the GETS priority value</description>
            </keyType>
            <keyType>
                <name>GetsPriorityValueAndSipResponseCode</name>
                <description>
                    The key is the GETS priority value combined with the SIP response code.
                    The two values are seperated with a comma.
                </description>
            </keyType>
            <keyType>
                <name>EosCase</name>
                <description>?</description>
            </keyType>
            <keyType>
                <name>DuisDuaDbServerUrl</name>
                <description>The key is the DUA-DB server URL which has the form ldap://[IP address]:[port]</description>
            </keyType>
            <keyType>
                <name>DuisLdapCommandType</name>
                <description>The key is the LDAP operation, the value can be Bind or Search</description>
            </keyType>
            <keyType>
                <name>DuisLdapErrorCode</name>
                <description>The key is internal error code used by the feature DUIS with value range from 0 to 20. Some error codes are mapped to standard LDAP result codes.</description>
            </keyType>
            <keyType>
                <name>HssDestinationId</name>
                <description>?</description>
            </keyType>
            <keyType>
                <name>MediaType</name>
                <description>The key is the media type value in the SDP message body.</description>
            </keyType>
            <keyType>
                <name>SUM</name>
                <description>?</description>
            </keyType>
            <keyType>
                <name>PcscfRestorationCause</name>
                <description>The key value is the SIP error response code returned by the P-CSCF which matches the error code configured in parameter scscfPcscfRestorationSipErrorCodes or the string "Blacklisted" due to a blacklisted P-CSCF.</description>
            </keyType>
            <keyType>
                <name>DiameterErrorCodeAndOtherErrors</name>
                <description>The key value is the Diameter error code or the string "ReqTimeout", "ReqConnectionProblem", "ReqProtocolError", "ReqUnspecFailure", "ReqThrottled", or "AnsInvalidResult".</description>
            </keyType>
            <keyType>
                <name>SipMessageBasedPcscfRestorationCause</name>
                <description>The key value is either PcrfFailure or SbcRestoration.</description>
            </keyType>
            <keyType>
                <name>SmpId</name>
                <description>SubscribedMediaProfileId in the User Profile provisioned in HSS.</description>
            </keyType>
            <keyType>
                <name>NotApplicable</name>
                <description>Not Applicable.</description>
            </keyType>
        </keyTypesList>
    </data>

    <pmMimMetadata>
        <nodeType>CSCF</nodeType>
        <nodeSubtype>CSCF</nodeSubtype>
        <MIM_major_version>8</MIM_major_version>
        <MIM_minor_version>121</MIM_minor_version>
        <node_major_version>7</node_major_version>
        <node_minor_version>10</node_minor_version>
        <timestamp>2018-09-07T17:31:51</timestamp>
        <pmMimVersion>2.0</pmMimVersion>
        <imsMimVersionDoc>4/192 05-FEA 202 8501 Uen C</imsMimVersionDoc>
        <!--rh:revision-history>
                <rh:rev-info>
                        <rh:rev>A</rh:rev>
                        <rh:date>2012-06-07</rh:date>
                        <rh:change><rh:description>First Release, based on 1/155 19-CAA 109 1399 Uen U. cscfGetsPriorityInviteSuccess and cscfGetsPriorityInviteFailure counters names have been changed to cscfGetsPriorityInviteSuccessfulEstablished and scscfGetsPriorityInviteFailure respectively.</rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>B</rh:rev>
                        <rh:date>2012-06-27</rh:date>
                        <rh:change><rh:description>Fix bad major number and incorrect node version.</rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>C</rh:rev>
                        <rh:date>2012-07-02</rh:date>
                        <rh:change><rh:description>add ScscfEmergencyRegistrationSuccess and ScscfEmergencyRegistrationFailure couters for WP235A.</rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>D</rh:rev>
                        <rh:date>2012-07-09</rh:date>
                        <rh:change><rh:description>Fix TR HP72267: Change description for scscfGetsPriorityInviteEstablishedSuccess and scscfGetsPriorityInviteFailure counters.</rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>E</rh:rev>
                        <rh:date>2012-08-20</rh:date>
                        <rh:change><rh:description>modified descriptions and conditions for counters cscfLRFNoTelephoneNumber, cscfLRFInternationalCalledNumber, cscfLRFNationalCalledNumber and cscfLRFErrorCalledNumber.</rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>F</rh:rev>
                        <rh:date>2012-09-07</rh:date>
                        <rh:change><rh:description>Change of Alarm Text: CSCF Charging Answers Indicate Permanent Errors to CSCF Charging Answers Indicate Permanent Failures.
                                                   Change of additionalInfo text for alarm-id 20: "non-REGISTER" to "RE-REGISTER or DE-REGISTER".
                                                   Change of additionalInfo text for alarm-id 21: "cscfCicEnumResponse" to "cscfCicEnumResponseMalformatted".
                                                   Rebased LSV_13_13 and merge was needed"</rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>G</rh:rev>
                        <rh:date>2012-09-17</rh:date>
                        <rh:change><rh:description>WP230_stage2</rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>G1</rh:rev>
                        <rh:date>2012-11-05</rh:date>
                        <rh:change><rh:description>WP258: added 2 new counters icscfDuisLdapSuccess and icscfDuisLdapFailure. </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>J</rh:rev>
                        <rh:date>2013-02-12</rh:date>
                        <rh:change><rh:description>WP263_01: modified descriptions and conditions for counters cscfAcceptedDeregistration, cscfAcceptedRegistrations,
                                                   cscfAcceptedReregistrations, cscfConcurrentRegistrations, cscfExpiredRegistrations, cscfPeakConcurrentRegistrations, cscfConcurrentSessions,
                                                   cscfFailedSessions, cscfPeakConcurrentSessions, cscfSuccessfulSessions;
                                                   also modeified descriptions and status for deprecated counters cscfRejectedDeregistrations,cscfRejectedRegistrations and cscfRejectedReregistrations.
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>K</rh:rev>
                        <rh:date>2013-03-05</rh:date>
                        <rh:change><rh:description>WP253: adding the following counters counters ecscfDialogEventSubscribeSuccessful, ecscfDialogEventSubscribeFailure, ecscfDialogEventReSubscriptionSuccessful,
                                                   ecscfDialogEventReSubscribeFailure, ecscfDialogEventNotificationSuccessful, ecscfDialogEventNotificationFailure.
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>L</rh:rev>
                        <rh:date>2013-06-10</rh:date>
                        <rh:change><rh:description>WP261E: Fix TR HR30538:
                                                   fixing the following counters counters ecscfDialogEventSubscribeSuccessful, ecscfDialogEventSubscribeFailure, ecscfDialogEventReSubscriptionSuccessful,
                                                   ecscfDialogEventReSubscribeFailure, ecscfDialogEventNotificationFailure..
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>M</rh:rev>
                        <rh:date>2013-06-14</rh:date>
                        <rh:change><rh:description>Version update for 14 release.
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>N</rh:rev>
                        <rh:date>2014-03-08</rh:date>
                        <rh:change><rh:description>WP300-1: add cscfThrottledHssRequests counter
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>WP302D</rh:rev>
                        <rh:date>2014-03-13</rh:date>
                        <rh:change><rh:description>WP302D 14B DFU TR Fixes:
                             HR85182 and HS20009:
                                 modified descriptions and conditions for five existing counters.
                                     <rh:modified ref="cscfCxSelPullUnableToComplys"/>
                                     <rh:modified ref="cscfOrigASInvocationFailureSessionContinued"/>
                                     <rh:modified ref="cscfOrigASInvocationFailureSessionTerminated"/>
                                     <rh:modified ref="cscfTermASInvocationFailureSessionContinued"/>
                                     <rh:modified ref="cscfTermASInvocationFailureSessionTerminated"/>
                            HS22689:
                                modified description for ecscfDialogEventReSubscriptionSuccessful, ecscfDialogEventReSubscriptionFailure.
                            HS40027:
                                modified description for cscfInviteCommunicationFailure
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>WP302F</rh:rev>
                        <rh:date>2014-05-09</rh:date>
                        <rh:change><rh:description>WP302F DFU TR Fixes:
                            HS10865: Moid in cscfShUDRErrorResponses counter contains an invalid character
                                Changed description of counter cscfShUDRSuccesses
                                Changed description of counter cscfShUDRErrorResponses
                                Changed description of counter cscfShUDRNoResponses
                                Changed description of counter cscfShUDRExperimentalResults
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                    <rh:rev>WP330</rh:rev>
                    <rh:date>2014-06-11</rh:date>
                        <rh:change><rh:description>WP330 EATF - Dynamic payload type mapping:
                            Added the following:
                                Added counter eatfSuccessfulInitialEmergencySessionEstablishment
                                    Added counter eatfFailedInitialEmergencySessionEstablishment
                                    Added counter eatfSuccessfulEmergencySessionAccessTransfer
                                    Added counter eatfFailedEmergencySessionAccessTransfer
                                    Added counter eatfSuccessfulEmergencySessionPsFallback
                                    Added counter eatfFailedEmergencySessionPsFallback
                                    Added counter eatfConcurrentSessions
                                    Added counter eatfPeakConcurrentSessions
                       </rh:description></rh:change>
               </rh:rev-info>
               <rh:rev-info>
                        <rh:rev>Y</rh:rev>
                        <rh:date>2015-02-20</rh:date>
                        <rh:change><rh:description>Y 15B DFU TR Fixes + Uplift 15A R14F01:
                            HS68006: Document Error: 'feature code' should be insteaded of 'feature tag' in <CSCF Performance Measuremen>
                                Modified descriptions for the following counters:
                                     <rh:modified ref="cscfSuccessfulSessions"/>
                                     <rh:modified ref="cscfUeOriginatingInviteFailure"/>
                                     <rh:modified ref="cscfUeOriginatingInviteSuccess`"/>
                                     <rh:modified ref="cscfUeTerminatingInviteFailure"/>
                                     <rh:modified ref="cscfUeOriginatingInviteFailure"/>
                        </rh:description></rh:change>
                        <rh:change><rh:description>Y 15B DFU TR Fixes + Uplift 15A R14F01:
                            HT25056: Errors in the CPI MIM identified by CPI Writers
                                Modified descriptions for the following counters:
                                     <rh:modified ref="cscfAcceptedDeregistrations"/>
                                     <rh:modified ref="cscfAcceptedReregistrations"/>
                                     <rh:modified ref="cscfConcurrentRegistrations"/>
                                     <rh:modified ref="cscfPeakConcurrentRegistrations"/>
                                     <rh:modified ref="cscfNotifyFailure"/>
                                     <rh:modified ref="scscfRegEventNetworkDeregisteredNotificationsSendFailures"/>
                                     <rh:modified ref="scscfRegEventNetworkDeregisteredNotificationsSendSuccessful"/>
                                     <rh:modified ref="scscfRegistrationEventNetworkDeregisteredNotificationsSendFailures"/>
                                     <rh:modified ref="scscfRegistrationEventShortenedNotificationsSendFailures"/>
                                     <rh:modified ref="scscfRegistrationEventShortenedNotificationsSendSuccessful"/>
                                     <rh:modified ref="cscfDeregistrationsFailure"/>
                                     <rh:modified ref="cscfReregistrationsFailure"/>
                                     <rh:modified ref="pcscfAcceptedDeregistrationsPerAccess"/>
                                     <rh:modified ref="pcscfAcceptedReregistrationsPerAccess"/>
                                     <rh:modified ref="pcscfAttemptedDeregistrationsPerAccess"/>
                                     <rh:modified ref="pcscfAttemptedReregistrationsPerAccess"/>
                                     <rh:modified ref="scscfEmergencyRegistrationsSuccess"/>
                                     <rh:modified ref="scscfThirdPartyRegistrationFailure"/>
                                     <rh:modified ref="scscfAccumulatedOriginatingCallTime"/>
                                     <rh:modified ref="scscfAccumulatedTerminatingCallTime"/>
                        </rh:description></rh:change>
               </rh:rev-info>
               <rh:rev-info>
                        <rh:rev>Z</rh:rev>
                        <rh:date>2015-03-01</rh:date>
                        <rh:change><rh:description>add the following counters for Z.
                            Added counter  scscfPcscfRestorationAttempts
                            Added counter  scscfPcscfRestorationFailure
                        </rh:description></rh:change>
               </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>WP366-1</rh:rev>
                        <rh:date>2015-04-16</rh:date>
                        <rh:change><rh:description>add the hex error code into existing PM counter cscfInviteCommunicationFailure
                                     <rh:modified ref="cscfInviteCommunicationFailure"/>
                        </rh:description></rh:change>
                        <rh:change><rh:description>Added new counter cscfSipErrorResponse.
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>WP346-1</rh:rev>
                        <rh:date>2014-12-09</rh:date>
                        <rh:change><rh:description>
                                S-CSCF Support of counters for AccessType
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>AA</rh:rev>
                        <rh:date>2015-04-05</rh:date>
                        <rh:change><rh:description>
                                S-CSCF Support of counters for MediaType
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>AB</rh:rev>
                        <rh:date>2015-05-21</rh:date>
                        <rh:change>
                                <rh:description>Added counter cscfActiveUsersPerProfile for AB</rh:description>
                        </rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>AC</rh:rev>
                        <rh:date>2015-09-14</rh:date>
                        <rh:change>
                                <rh:description>Update threshold Alarm description</rh:description>
                        </rh:change>
                </rh:rev-info>
                <rh:rev-info>
                    <rh:rev>AD</rh:rev>
                    <rh:date>2015-09-21</rh:date>
                        <rh:change><rh:description>WP360G: 15B DFU TR Fixes
                        HU10625: Linguistic errors in xml parameter and SIP Hex error codes document
                                Modified descriptions for the following counters:
                                     <rh:modified ref="icscfTransitSessionFailures"/>
                                     <rh:modified ref="scscfAttemptedReregistrationPerAccess"/>
                                     <rh:modified ref="scscfSuccessfulReregistrationPerAccess"/>
                                     <rh:modified ref="scscfFailedReregistrationPerAccess"/>
                                     <rh:modified ref="scscfAttemptedDeregistrationPerAccess"/>
                                     <rh:modified ref="scscfSuccessfulDeregistrationPerAccess"/>
                                     <rh:modified ref="scscfFailedDeregistrationPerAccess"/>
                                     <rh:modified ref="scscfOrigAccumulatedCallTimePerAccess"/>
                                     <rh:modified ref="scscfTermAccumulatedCallTimePerAccess"/>
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                    <rh:rev>WP60G2-1</rh:rev>
                    <rh:date>2015-10-01</rh:date>
                        <rh:change><rh:description>WP386:
                        HT92746: CscfSipPMKey utilization to be added in CSCF Installation & Configuration Guidelines
                                Modified descriptions for the following counters:
                                     <rh:modified ref="sipStatsAckOuts"/>
                                     <rh:modified ref="sipStatsReqTimeout"/>
                                     <rh:modified ref="sipStatsSuccessClassIns"/>
                                     <rh:modified ref="sipStatsSubscribeOuts"/>
                                     <rh:modified ref="sipStatsServerFailClassIns"/>
                                     <rh:modified ref="sipStatsMessageOuts"/>
                                     <rh:modified ref="sipStatsReqFailClassIns"/>
                                     <rh:modified ref="sipStatsRegisterOuts"/>
                                     <rh:modified ref="sipStatsReferOuts"/>
                                     <rh:modified ref="sipStatsRedirClassIns"/>
                                     <rh:modified ref="sipStatsPublishOuts"/>
                                     <rh:modified ref="sipStatsOptionsOuts"/>
                                     <rh:modified ref="sipStatsNotifyOuts"/>
                                     <rh:modified ref="sipStatsInviteOuts"/>
                                     <rh:modified ref="sipStatsInfoClassIns"/>
                                     <rh:modified ref="sipStatsGlobalFailClassIns"/>
                                     <rh:modified ref="sipStatsExtMethodOuts"/>
                                     <rh:modified ref="sipStatsCancelOuts"/>
                                     <rh:modified ref="sipStatsByeOuts"/>
                                     <rh:modified ref="sipStatsAckIns"/>
                                     <rh:modified ref="sipStatsByeIns"/>
                                     <rh:modified ref="sipStatsCancelIns"/>
                                     <rh:modified ref="sipStatsExtMethodIns"/>
                                     <rh:modified ref="sipStatsGlobalFailClassOuts"/>
                                     <rh:modified ref="sipStatsInfoClassOuts"/>
                                     <rh:modified ref="sipStatsInviteIns"/>
                                     <rh:modified ref="sipStatsNotifyIns"/>
                                     <rh:modified ref="sipStatsOptionsIns"/>
                                     <rh:modified ref="sipStatsPublishIns"/>
                                     <rh:modified ref="sipStatsRedirClassOuts"/>
                                     <rh:modified ref="sipStatsReferIns"/>
                                     <rh:modified ref="sipStatsRegisterIns"/>
                                     <rh:modified ref="sipStatsReqFailClassOuts"/>
                                     <rh:modified ref="sipStatsServerFailClassOuts"/>
                                     <rh:modified ref="sipStatsSubscribeIns"/>
                                     <rh:modified ref="sipStatsSuccessClassOuts"/>
                                     <rh:modified ref="sipStatsMessageIns"/>
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>AG</rh:rev>
                        <rh:date>2015-10-20</rh:date>
                        <rh:change><rh:description>AG 15B DFU TR Fixes + Uplift 15A EP2.0.1:
                            HS62083: Description of cscfSuccessfulEmergencySessionForRegisteredUser needs updates
                                Changed condition description of counter cscfSuccessfulEmergencySessionForRegisteredUser
                                     <rh:modified ref="cscfSuccessfulEmergencySessionForRegisteredUser"/>
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>AH</rh:rev>
                        <rh:date>2016-02-22</rh:date>
                        <rh:change><rh:description>AH: Add ThresholdMonitorHeader for sipStatsUdpCongestions and sipStatsTcpCongestions
                        </rh:description></rh:change>
                </rh:rev-info>
                <rh:rev-info>
                        <rh:rev>WP354-1</rh:rev>
                        <rh:date>2016-02-03</rh:date>
                        <rh:change>
                                <rh:description>Modified SigComp related counters to obsolete </rh:description>
                                <rh:modified ref="sigcompCompressionFailures"/>
                                <rh:modified ref="sigcompCompressionSuccesses"/>
                                <rh:modified ref="sigcompDecompressionFailures"/>
                                <rh:modified ref="sigcompDecompressionSuccesses"/>
                        </rh:change>
                </rh:rev-info>
                <rh:rev-info>
                    <rh:rev>AK</rh:rev>
                    <rh:date>2016-05-05</rh:date>
                        <rh:change>
                                <rh:description>WP413: Add scscfSipMessageBasedPcscfRestorationAttempts and scscfSipMessageBasedPcscfRestorationFailure counters</rh:description>
                        </rh:change>
                </rh:rev-info>

                <rh:rev-info>
                    <rh:rev>AL</rh:rev>
                    <rh:date>2016-05-05</rh:date>
                        <rh:change><rh:description>WP412: Add scscfUserRedistributionNotRegistered, scscfUserRedistributionRegistered in Register Statistic Group
                        </rh:description></rh:change>
                </rh:rev-info>

                <rh:rev-info>
                    <rh:rev>AM</rh:rev>
                    <rh:date>2017-04-18</rh:date>
                    <rh:change>
                        <rh:description>WP451: Add PM counters for Overload control function</rh:description>
                        <rh:added ref="cscfPeakSipReportingOverloadControlValue"/>
                        <rh:added ref="cscfAverageSipReportingOverloadControlValue"/>
                    </rh:change>
                </rh:rev-info>

                <rh:rev-info>
                    <rh:rev>AN</rh:rev>
                    <rh:date>2017-06-16</rh:date>
                        <rh:change><rh:description>HV54046 SMP function in CSCF does not work as documented
                                Modified descriptions and add KeyTypeName for the following counters:
                                     <rh:modified ref="cscfSmpConfirmedAuthorizationFailure"/>
                                     <rh:modified ref="cscfSmpConfirmedAuthorizationSuccess"/>
                                     <rh:modified ref="cscfSmpEarlyAuthorizationFailure"/>
                                     <rh:modified ref="cscfSmpEarlyAuthorizationSuccess"/>
                                     <rh:modified ref="cscfSmpIdNotFound"/>
                        </rh:description></rh:change>
                </rh:rev-info>

                <rh:rev-info>
                    <rh:rev>AS</rh:rev>
                    <rh:date>2017-12-05</rh:date>
                        <rh:change><rh:description>HW48850 CSCF7.4.5, Load regulation alarms are not recognized by OSS due to dot included in specificProblem
                                Modified specificProblem for the following ThresholdMonitorReader: removed the dot at the end
                                     sipStatsTcpCongestions <specificProblem>CSCF, TCP SIP Load Regulation Rejection</specificProblem>
                                     sipStatsUdpCongestions <specificProblem>CSCF, UDP SIP Load Regulation Rejection</specificProblem>
                        </rh:description></rh:change>
                </rh:rev-info>

                <rh:rev-info>
                    <rh:rev>AT</rh:rev>
                    <rh:date>2018-04-23</rh:date>
                        <rh:change><rh:description>HW35361 Documentation update for counter pcscfRxSipSessionContDelayedAAA
                                Modified Cardinality and KeyType of pcscfRxSipSessionContDelayedAAA
                                     <rh:modified ref="Cardinality"/>
                                     <rh:modified ref="KeyType"/>
                        </rh:description></rh:change>
                </rh:rev-info>

                <rh:rev-info>
                    <rh:rev>AU</rh:rev>
                    <rh:date>2018-05-16</rh:date>
                    <rh:change>
                        <rh:description>WP468: Update PM counters for SIP Overload Control function</rh:description>
                        <rh:modified ref="cscfPeakSipReportingOverloadControlValue"/>
                        <rh:modified ref="cscfAverageSipReportingOverloadControlValue"/>
                    </rh:change>
                    <rh:change>
                        <rh:description>WP468: Add PM counters for SIP Overload Control function</rh:description>
                        <rh:added ref="cscfSipReportingOverloadControlDuration"/>
                        <rh:added ref="cscfSipReportingOverloadControlPeriods"/>
                    </rh:change>
                    <rh:change>
                        <rh:description>WP468: Description update for counter cscfCurrentStoredRecords</rh:description>
                        <rh:modified ref="cscfCurrentStoredRecords"/>
                    </rh:change>
                </rh:rev-info>
                <rh:rev-info>
                    <rh:rev>AV</rh:rev>
                    <rh:date>2018-06-15</rh:date>
                    <rh:change>
                        <rh:description>WP475: Description and condition update for counters cscfConcurrentRegistrations, cscfPeakConcurrentRegistrations,
                        cscfConcurrentRegisteredUserProfiles, cscfPeakConcurrentRegisteredUserProfiles, scscfConcurrentUnregisteredUserProfiles
                        scscfPeakConcurrentUnregisteredUserProfiles</rh:description>
                            <rh:modified ref="cscfConcurrentRegistrations"/>
                            <rh:modified ref="cscfPeakConcurrentRegistrations"/>
                            <rh:modified ref="cscfConcurrentRegisteredUserProfiles"/>
                            <rh:modified ref="cscfPeakConcurrentRegisteredUserProfiles"/>
                            <rh:modified ref="scscfConcurrentUnregisteredUserProfiles"/>
                            <rh:modified ref="scscfPeakConcurrentUnregisteredUserProfiles"/>
                    </rh:change>
                </rh:rev-info>
       </rh:revision-history-->
    </pmMimMetadata>
</PM>
